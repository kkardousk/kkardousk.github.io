{
  "hash": "1fac25da525a84114ff6f536274049cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: |\n  <div class=\"custom-title-block\" style=\"text-align: center;\">\n    <span style=\"color:#2c3e50; font-size: 1.4em; font-weight: bold;\">Exploring Von Koch and his Snowflakes (Fractals) </span><br>\n    <span style=\"font-size:.5em;\">Karim K. Kardous</span><br>\n    <a href=\"mailto:kardouskarim@gmail.com\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-envelope\"></i>\n    </a>\n    <a href=\"https://github.com/kkardousk\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-github\"></i>\n    </a>\n  </div>\nformat:  \n  html:\n    toc: true\n    toc-depth: 4\n    toc-expand: true\n    toc-title: 'Jump To'\n    number-depth: 2\n    fig-format: retina\n    fig-dpi: 300\n    code-link: true # requires both downlit and xml2 to be downloaded\n    code-fold: true\n    code-summary: '<i class=\"bi-code-slash\"></i> Show the code'\n    # code-overflow: wrap\n    code-tools:\n      toggle: true  # adds \"Show All / Hide All\"; also allows for all code copy (at once as quarto doc)\n    css: styles.css\n    highlight-style: github-dark\n    df-print: paged\n    page-layout: article\n    embed-resources: true\n    smooth-scroll: true\n    link-external-icon: false\n    link-external-newwindow: true\n    fontsize: 1.1em\n    linestretch: 0\n    linespace: 0\n    html-math-method: katex\n    linkcolor: '#D35400'\nexecute:\n  echo: true\n  warning: false\n  message: false\n  info: false\n  cache: false\n  freeze: auto\neditor: visual\n---\n\n\n\n\n\n## **Initial Setup**\n\n::: text-justify\nI start by configuring the Python environment using `{reticulate}`, specifying a custom virtual environment and ensuring required packages (matplotlib and pillow) are installed. This setup step ensures Python and R work seamlessly together; granted 'seamlessly' might be over-reaching, but at least for this case, fairly commonly used modules, it was the case.\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\ninvisible(\n  capture.output({\n    Sys.setenv(RETICULATE_PYTHON = \"py_venv/bin/python3.9\")\n    reticulate::use_python(\"py_venv/bin/python3.9\", required = TRUE)\n    })\n)\n\ninvisible(\n  capture.output({\n  use_python(\"py_venv/bin/python3.9\", required = TRUE)\n  py_config()\n  py_install(c('matplotlib', 'pillow'), envname = \"py_venv\", pip = TRUE)\n  })\n)\n```\n:::\n\n\n\n\n\n::: text-justify\nWith this chunk executed, R is now ready to run Python code from the designated virtual environment with the necessary libraries installed.\n:::\n\n## **Image Configuration and Setup using matplotlib & [Pillow](https://pypi.org/project/pillow/)**\n\n::: text-justify\nTo overcome issues with displaying Pillow images directly in Quarto, I used matplotlib.pyplot to render and show images in the document. This section decomposes main first steps in creating the Snowflake fractals; before 'completing' the figure. Air quotes here implying that technically the figure can go up to infinity in its decomposition into smaller fragments or segments and equilateral triangles. \n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom PIL import Image, ImageDraw\nimport matplotlib.pyplot as plt\nimport math\n\nwidth = 1748\nheight = 1240\nA0 = [1748 / 2 + 400, 800]\nB0 = [1748 / 2 - 400, 800]\n\ndef koch(A, B, n, figsize = (3, 3)):\n    vonkoch = Image.new('RGB', (width, height), (255, 255, 255))\n    draw = ImageDraw.Draw(vonkoch)\n    \n    if(n == 0):\n        draw.line((A, B), fill = (0, 0, 0), width = 2)\n        plt.figure(figsize = figsize)\n        plt.imshow(vonkoch)\n        plt.title('Initial AB segment (At Step n = 0)')\n        plt.axis('off')\n        plt.show()\n    \nkoch(A0, B0, 0)\n```\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-2-1.png){width=288}\n:::\n:::\n\n\n\n\n\n::: text-justify\nThe next step is when n is > 0 to start creating the pattern. The idea, [Von Koch's](https://nrich.maths.org/problems/von-koch-curve#:~:text=The%20Von%20Koch%20curve%20is,third%20of%20the%20original%20length.), is to split the segment into 4 parts, or segments: AM1, M1M2, M2M3, and M3B; almost forming a triangle M1M2M3, as shown below, with more steps involved including homothety and similarities \n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef koch(draw, A, B, n):\n    if(n == 0):\n        draw.line((A, B), fill = (0, 0, 0), width = 10)\n    else:\n        M1 = sim(A, B, alpha = 0, mu = 1/3)\n        M2 = sim(A, B, alpha = math.pi / 6, mu = 1/math.sqrt(3)) # alpha = 30° in radians, mu = scaling factor 1/√3\n        M3 = sim(A, B, alpha = 0, mu = 2/3) \n        koch(draw, A, M1, n - 1)\n        koch(draw, M1, M2, n - 1)\n        koch(draw, M2, M3, n - 1)\n        koch(draw, M3, B, n - 1)\n\ndef sim(A, B, alpha, mu):\n    C = [B[0] - A[0], B[1] - A[1]]\n    D = [\n        mu * (C[0] * math.cos(alpha) + C[1] * math.sin(alpha)),\n        mu * (-C[0] * math.sin(alpha) + C[1] * math.cos(alpha))\n    ]\n    return [A[0] + D[0], A[1] + D[1]]\n\ndef draw_koch_wrapper(A, B, n, figsize = (3, 3)):\n    image = Image.new('RGB', (width, height), (255, 255, 255))\n    draw = ImageDraw.Draw(image)\n    koch(draw, A, B, n)\n\n    plt.figure(figsize = figsize)\n    plt.imshow(image)\n    plt.title(f'At Step n = {n}')\n    plt.axis('off')\n    plt.show()\n\nfor step in range(1, 7):\n  draw_koch_wrapper(A0, B0, n = step)\n```\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-3.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-4.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-5.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-6.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-7.png){width=288}\n:::\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-3-8.png){width=288}\n:::\n:::\n\n\n\n\n\n## **Output Comment**\n::: text-justify\nI think there reaches a point where each smaller fragments/ fractals reaches the size of a pixel, it appears to be at step no. of 6 from above; we can tell essentially that step 5 and 6 are virtually identical, at least under the pixel/dimensions set. \n:::\n\n## **'Completing' the Snowflake ❄️**\n::: text-justify\nBelow we add the two missing sides of the initial equilateral triangle by computing the third vertex (via the `C0` rotation shown in the code) and recursively applying the Koch construction to all three edges, completing the full snowflake.\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef draw_koch_wrapper(A, B, n, figsize=(3, 3)):\n    image = Image.new('RGB', (width, height), (255, 255, 255))\n    draw = ImageDraw.Draw(image)\n\n    # third point of the equilateral triangle (point C0)\n    C0 = sim(B0, A0, alpha = math.pi / 3, mu = 1) # or a rotation of 60° and no homothety since we only want a mirror of what we have currently, no scaling needed\n    # draw the three recursive edges\n    koch(draw, A, B, n)\n    koch(draw, B, C0, n)\n    koch(draw, C0, A, n)\n    plt.figure(figsize = figsize)\n    plt.imshow(image)\n    plt.title(f'Koch Snowflake (n = {n})')\n    plt.axis('off')\n    plt.show()\n\ndraw_koch_wrapper(A0, B0, n = 6)\n```\n\n::: {.cell-output-display}\n![](koch_snowflake_fractals_files/figure-html/unnamed-chunk-4-15.png){width=288}\n:::\n:::\n\n\n\n\n\nOverall, I thought it was interesting, aesthetically if nothing else, to see how with a few lines of code, fairly intricate and cool-looking images get created. Thanks for reading !\n",
    "supporting": [
      "koch_snowflake_fractals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}