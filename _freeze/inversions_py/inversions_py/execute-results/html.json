{
  "hash": "906678ea08bc62be87619224916323cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: |\n  <div class=\"custom-title-block\" style=\"text-align: center;\">\n    <span style=\"color:#2c3e50; font-size: 1.4em; font-weight: bold;\">Exploring Inversions using Python</span><br>\n    <span style=\"font-size:.5em;\">Karim K. Kardous</span><br>\n    <a href=\"mailto:kardouskarim@gmail.com\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-envelope\"></i>\n    </a>\n    <a href=\"https://github.com/kkardousk\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-github\"></i>\n    </a>\n  </div>\nformat:  \n  html:\n    toc: true\n    toc-depth: 4\n    toc-expand: true\n    toc-title: 'Jump To'\n    number-depth: 2\n    fig-format: retina\n    fig-dpi: 300\n    code-link: true # requires both downlit and xml2 to be downloaded\n    code-fold: true\n    code-summary: '<i class=\"bi-code-slash\"></i> Show the code'\n    # code-overflow: wrap\n    code-tools:\n      toggle: true  # adds \"Show All / Hide All\"; also allows for all code copy (at once as quarto doc)\n    css: styles.css\n    highlight-style: github-dark\n    df-print: paged\n    page-layout: article\n    embed-resources: true\n    smooth-scroll: true\n    link-external-icon: false\n    link-external-newwindow: true\n    fontsize: 1.1em\n    linestretch: 0\n    linespace: 0\n    html-math-method: katex\n    linkcolor: '#D35400'\nexecute:\n  echo: true\n  warning: false\n  message: false\n  info: false\n  cache: false\n  freeze: auto\neditor: visual\n---\n\n\n\n\n\n## **Initial Setup** \n:::{.text-justify}\nsome text...\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\ninvisible(\n  capture.output({\n    Sys.setenv(RETICULATE_PYTHON = \"py_venv/bin/python3.9\")\n    reticulate::use_python(\"py_venv/bin/python3.9\", required = TRUE)\n    })\n)\n\ninvisible(\n  capture.output({\n  use_python(\"py_venv/bin/python3.9\", required = TRUE)\n  py_config()\n  py_install(c('matplotlib', 'pillow'), envname = \"py_venv\", pip = TRUE)\n  })\n)\n```\n:::\n\n\n\n\n\n## **Image configuration and setup using [Pillow](https://pypi.org/project/pillow/)**\n:::{.text-justify}\nUnfortunately, PIL and Image from pillow don't seem work too well in tandem with Quarto when rendering images, I'd have to first save the images 'locally' first to then show them in html output, so here matplotlib's pyplot is also used/loaded to bypass the local save first\n:::\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom PIL import Image \nimport matplotlib.pyplot as plt\nimport math\n\n# build a function to ease the plotting, reusable boilerplate basically with option to add additional arguments\ndef draw_figure(width=512, height=512, draw_func=None, title='Custom Board', figsize=(4, 4), background='white', **kwargs):\n    \n    board = Image.new('RGB', (width, height), background) \n    # apply function if provided\n    if draw_func:\n        draw_func(board, width, height, **kwargs)\n    \n    plt.figure(figsize=figsize)\n    plt.imshow(board)\n    plt.axis('off')\n    plt.title(title)\n    plt.show()\n    \n  \ndef solid_unicolor_board(board, width, height):\n  \n  for x in range(width):\n    for y in range(height):\n      board.putpixel( (x, y), (0, 0, 0))\n\n# define chess board pattern\ndef chess_pattern(board, width, height, square = 64, **kwargs):\n  \n  for x in range(width):\n    for y in range(height):\n      cx = x // square # or you can use math.floor(x / square) if index doesn't jstart at 0 \n      cy = y // square\n      color = ((cx + cy) % 2) * 255\n      board.putpixel((x, y), (color, color, color)) # black and white\n      \n# define an inversion \ndef inversion_pattern(board, width, height, R = 256, square = 64, **kwargs):\n\n  for x in range(width):\n    for y in range(height):\n      x0 = x - width / 2 + .5  # define a center for x and one for y with offsets by half a pixel as technically the center is at .5, .5\n      y0 = y - height / 2 + .5\n      f = R**2 / (x0**2 + y0**2) # inverse factor or the radius squared divided by distance to center; addition to avoid zero division\n      x1 = x0 * f\n      y1 = y0 * f\n      cx = math.floor(x1 / square)\n      cy = math.floor(y1 / square)\n      color = ((cx + cy) % 2) * 255\n      board.putpixel((x, y), (color, color, 0)) # black and yellow  \n\n# \ndraw_figure(draw_func = solid_unicolor_board, title = 'Solid Black Board')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-2-1.png){width=384}\n:::\n\n```{.python .cell-code}\ndraw_figure(draw_func = chess_pattern, title = 'Chess Board')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-2-2.png){width=384}\n:::\n\n```{.python .cell-code}\ndraw_figure(draw_func = inversion_pattern, square = 256, title = 'Initial inversion Board')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-2-3.png){width=384}\n:::\n:::\n\n\n\n\n\n:::{.text-justify}\nHighly pixelated as we can see from last figure drawn, especially when drawing towards the center, where pixel values can get actually smaller than the square values themselves; one way to improve that lazily is to just increase square size, so increasing resolution\n::: \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndraw_figure(draw_func = inversion_pattern, width = 512 * 2, height = 512 * 2, square = 256 * 2, R = 256 * 2, title = 'Initial inversion attempt')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-3-7.png){width=384}\n:::\n\n```{.python .cell-code}\n# # # trying a factor of 10 even as it appears to render fast\n# draw_figure(draw_func = inversion_pattern, width = 512 * 10, height = 512 * 10, square = 256 * 10, R = 256 * 10, title = 'Initial inversion attempt')\n# ok takes noticeably longer to render, but the resolution is clearly/visibly much better\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}