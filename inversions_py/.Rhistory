(9 + 2) % 2
(9 + 3) % 2
board = Image.new('RGB', (width, height), (255, 255, 255))
# draw a chess board
for x in range(width):
for y in range(height):
cx = math.floor(x / square)
cy = math.floor(y / square)
color = ((cx + cy) % 2) * 255 # if odd, then 1 * 255 = 255 which is color white, black otherwise
board.putpixel((x, y), (color, color, color))
plt.show()
board = Image.new('RGB', (width, height), (255, 255, 255))
# draw a chess board
for x in range(width):
for y in range(height):
cx = math.floor(x / square)
cy = math.floor(y / square)
color = ((cx + cy) % 2) * 255 # if odd, then 1 * 255 = 255 which is color white, black otherwise
board.putpixel((x, y), (color, color, color))
plt.show()
draw_figure(X = 500, Y = 500, square = 100, title = 'Chess Board'):
board = Image.new('RGB', (X, Y))
# draw a chess board
for x in range(X):
for y in range(Y):
cx = math.floor(x / square)
cy = math.floor(y / square)
color = ((cx + cy) % 2) * 255 # if odd, then 1 * 255 = 255 which is color white, black otherwise
board.putpixel((x, y), (color, color, color))
plt.figure(figsize = (4, 4))
plt.imshow(board)
plt.axis('off')
plt.title(title)
plt.show()
def draw_figure(width=500, height=500, draw_func=None, title='Custom Board', figsize=(4, 4), background='white', **kwargs):
board = Image.new('RGB', (width, height), background)
# Apply the drawing function if provided
if draw_func:
draw_func(board, width, height, **kwargs)
plt.figure(figsize=figsize)
plt.imshow(board)
plt.axis('off')
plt.title(title)
plt.show()
return board
reticulate::repl_python()
