[
  {
    "objectID": "tom-calver.html",
    "href": "tom-calver.html",
    "title": "\nReplication of below article’s Data and Visualizations “We keep pumping money into the NHS. Is it good value?”  By Tom Calver   Karim K. Kardous       \n",
    "section": "",
    "text": "Show the code\n#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\n# install pacman if it's not already installed\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n# install.packages(\"gdtools\", type = \"source\")\n\n## NOTE; potential steps on mac for registering then loading Roboto font into Quarto below\n\n## from terminal/shell\n# brew install cairo fontconfig freetype pkg-config\n# export PKG_CONFIG_PATH=\"/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig\"\n# export PKG_CFLAGS=\"-I/opt/homebrew/include\"\n# export PKG_LIBS=\"-L/opt/homebrew/lib\"\n\n## then from Rstudio\n# install.packages(\"gdtools\", type = \"source\")\n\n\n\n# Load or install packages\npacman::p_load(\n  gdtools,\n  tidyverse,\n  quarto,\n  chromote,\n  here,\n  tidycensus,\n  janitor,\n  purrr,\n  ggtext,\n  ggiraph,\n  gfonts,\n  showtext,\n  ggborderline,\n  shiny,\n  gt,\n  rsvg,\n  magick,\n  stringr,\n  ggimage\n)\n\n# Set theme and options\noptions(scipen = 999)\ntheme_set(theme_minimal())\n\nsuppressMessages({\n  gdtools::register_gfont(\"Roboto\", \"roboto\")\n  sysfonts::font_add_google(\"Roboto\", \"roboto\")\n  showtext_auto()\n  showtext_opts(dpi = 300)\n})\n\n\nData Import/Read: Lucky for us, the data is embedded in\n\n\n Show the code\n```{r}\n#| message: false\n#| output: false\n#| warning: false\nb &lt;- ChromoteSession$new()\nb$Page$navigate(\"https://www.thetimes.com/comment/columnists/article/we-keep-pumping-money-into-the-nhs-is-it-good-value-blq8bxc39\")\nSys.sleep(6) # allow some time for dynamic content to render\n\n# extract all iframe srcs (joined by || in this case)\niframes_html &lt;- b$Runtime$evaluate(\"Array.from(document.querySelectorAll('iframe')).map(el =&gt; el.src).join('||')\")$result$value\n# split and filter valid Datawrapper url's\nchart_urls &lt;- str_split(iframes_html, \"\\\\|\\\\|\")[[1]] |&gt;\n  str_subset(\"^https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+$\")\n\nall_data &lt;- purrr::map_dfr(chart_urls, function(url) {  \n  message(\"Navigating to: \", url)\n  b$Page$navigate(url)\n  Sys.sleep(3)\n  \n  html &lt;- b$Runtime$evaluate(\"document.documentElement.outerHTML\")$result$value\n  \n  # match visible chart values if any\n  pattern &lt;- 'aria-datavariables=\"year,\\\\s*([A-Z]+)\".*?aria-datavalues=\"([0-9]{4}),\\\\s*([0-9.]+)\"'\n  matches &lt;- str_match_all(html, pattern)[[1]]\n  \n  # match dataset.csv url as well \n  csv_pattern &lt;- \"https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+/dataset\\\\.csv\"\n  csv_link &lt;- str_extract(html, csv_pattern)\n  if (is.na(csv_link)) {\n    csv_link &lt;- str_glue(\"{url}/dataset.csv\")\n  }\n  \n  tibble(\n    chart_url = url,\n    country = if(nrow(matches)) matches[, 2] else NA,\n    year = if(nrow(matches)) as.integer(matches[, 3]) else NA,\n    value = if(nrow(matches)) as.numeric(matches[, 4]) else NA,\n    dataset_csv = csv_link\n  )\n})\n```\n\n\n\n\n Show the code\n# add a custom gt boilerplate -from {gt} package (great tables)-to reduce code redundancy (having to copy/paste same chunks of code every # time we turn a tibble into a gt object)\n\ngt_nyt_custom &lt;- function(x, title = '', subtitle = '', first_10_rows_only = TRUE){\n  \n  x &lt;- x |&gt; clean_names(case = 'title')\n  numeric_cols &lt;- x |&gt; select(where(is.double)) |&gt; names()\n  integer_cols &lt;- x |&gt; select(where(is.integer)) |&gt; names()\n  \n  title_fmt &lt;- if(title != \"\") glue::glue(\"**{title}**\") else \"\"\n  subtitle_fmt &lt;- if(subtitle != \"\") glue::glue(\"*{subtitle}*\") else \"\"\n  \n  x |&gt;\n    (\\(x) if (first_10_rows_only) slice_head(x, n = 10) else x)() |&gt;\n    gt() |&gt; \n    tab_header(\n      title = md(title_fmt),\n      subtitle = md(subtitle_fmt)\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#333333')\n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#CC6600', weight = 'bold')\n      ),\n      locations = cells_column_labels(everything())\n    ) |&gt; \n    fmt_number(\n      columns = c(numeric_cols),\n      decimals = 1\n    ) |&gt; \n    fmt_number(\n      columns = c(integer_cols),\n      decimals = 0\n    ) |&gt; \n    tab_options(\n      table.font.names = c(\"Merriweather\", \"Georgia\", \"serif\"),\n      table.font.size = 14,\n      heading.title.font.size = 18,\n      heading.subtitle.font.size = 14,\n      column_labels.font.weight = \"bold\",\n      column_labels.background.color = \"#eeeeee\",\n      table.border.top.color = \"#dddddd\",\n      table.border.bottom.color = \"#dddddd\",\n      data_row.padding = px(6),\n      row.striping.include_table_body = TRUE,\n      row.striping.background_color = \"#f9f9f9\"\n    )\n  \n}\nall_data |&gt; \n  count(url = chart_url, download_link = dataset_csv) |&gt; \n  select(-n) |&gt; \n  gt_nyt_custom(title = 'Dataset Ids') |&gt; \n  cols_label(\n    Url = \"Plot URL\",\n    `Download Link` = \"Link to CSV\"\n  )\n\n\n\n\n\n\n\n\nDataset Ids\n\n\n\n\n\nPlot URL\nLink to CSV\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Bxhol/4\nhttps://datawrapper.dwcdn.net/Bxhol/4/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/JH3Qn/1\nhttps://datawrapper.dwcdn.net/JH3Qn/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Mc3q2/2\nhttps://datawrapper.dwcdn.net/Mc3q2/2/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/eXQPs/1\nhttps://datawrapper.dwcdn.net/eXQPs/1/dataset.csv\n\n\n\n\n\n\n\n Show the code\nhealth_sat &lt;- \n  all_data |&gt; \n  drop_na() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n\nHealth service satisfaction (ESS Survey; European Social Survey)\n\n\n Show the code\n# now we can focus on building plot \nall_data |&gt; \n  gt_nyt_custom() |&gt; \n  tab_header(\n    title = md(\"**Chart Data Summary**\"),\n    subtitle = md(\"*Extracted from embedded datawrapper from the HTML Source page*\")\n  )\n\n\n\n\n\n\n\n\nChart Data Summary\n\n\nExtracted from embedded datawrapper from the HTML Source page\n\n\nChart Url\nCountry\nYear\nValue\nDataset Csv\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,002\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,004\n4.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,006\n4.4\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,008\n4.6\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,010\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,012\n5.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,014\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,016\n6.2\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,018\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,020\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\n\n\n\n\n\n\n\n Show the code\n# let's just go with smoothing \nextract_smooth_build &lt;- function(tibble, country = 'GB'){\n  \n  initial_pull &lt;- \n    all_data |&gt; \n    filter(country %in% {{country}}) |&gt; \n    ggplot(aes(x = year, y = value)) + \n    geom_smooth(method = 'loess')\n  \n  # fetch country abbs for ids, and ranges\n  country_ids &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n  country_max &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; max()\n  country_min &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; min()\n  \n  # access smoothed, include actual years to imputed/smoothed points, cap at min max per country/series\n  # and keep only columns of interest\n  smoothed_df &lt;- ggplot_build(initial_pull)[[1]] |&gt; as.data.frame() |&gt; as_tibble()\n  \n  complete_series &lt;- \n    smoothed_df |&gt; \n    select(year = x, value = y) |&gt; \n    mutate(country := country) |&gt; \n    bind_rows(\n      all_data |&gt; \n        filter(country == {{country}}) |&gt; \n        select(year, value) \n    ) |&gt; \n    mutate(\n      year = as.integer(year),\n      year_val_tie_breaker = if_else(is.na(country), 1, 0)\n    ) |&gt; \n    group_by(country, year) |&gt; \n    arrange(desc(year_val_tie_breaker)) |&gt; \n    mutate(ties = row_number()) |&gt; \n    filter(\n      if (n() &lt; 4) TRUE else ties + year_val_tie_breaker != 1 # make sure every year/country combo gets same no. of obs\n      # and that original values (only in the event a given year is even or survey year) take precedence over smoothed ones\n      # otherwise just pass/do nothing\n    ) |&gt; \n    ungroup() |&gt; \n    # ensuer smoothed values don't go below/beyond lower/upper bounds\n    mutate(\n      value = pmin(pmax(value, country_min), country_max)\n    ) |&gt; \n    arrange(year) |&gt; \n    fill(country, .direction = 'downup') |&gt;  # since every year starts with \n    select(year, country, value) \n  \n  return(complete_series)\n  \n}\n# country vector to loop thru\ncountry_name_abbs &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n# combine all series\nall_series &lt;- map_dfr(.x = country_name_abbs, ~extract_smooth_build(tibble = all_data, country = .x))\n\n# set contry 'switch; so that tooltip can change accordingly for odd numebred years\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n)\n\n# adding year as continuous variable (decimal years) so that points don't overlap but strech over whithin a year to year span\nall_series &lt;- \n  all_series |&gt; \n  mutate(\n    rn = row_number(), .by = c(country, year)\n  ) |&gt; \n  mutate(\n    decimal_year = if_else(rn == 1, year, year + rn / 8)\n  ) |&gt; \n  mutate(\n    year = decimal_year\n  ) |&gt; \n  select(-decimal_year)\n\n# also join on country full name mapping so we can generate a consolidate data_id that links the aestethics together (for interactive simultaneus highlighting, etc.)\nall_series &lt;- \n  all_series |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), \n    join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values)\n  ) |&gt; \n  select(-values) |&gt; \n  mutate(\n    country_name = str_sub(data_id, 3, 20)\n  )\n\n# also generate visible (and non visible years by exclusion) as they don't visually get the same properties; visible (even numbered years) get the country abb as a tooltip (and larger markers/circles), \n# while 'invisible' ones (odd numbered years along with year 2023) get their country names fully spelled out and get transparent marker/circle fill\nvisible_years &lt;- c(seq(2002, 2022, 2), 2023)\n\nvisible_points &lt;- \n  all_series |&gt; \n  filter(round(year) %in% visible_years & floor(year) == ceiling(year))\ninvisible_points &lt;- all_series |&gt; \n  filter(!round(year) %in% visible_years & floor(year) != ceiling(year))\n\n# final touchups\n# set color mappings\ncolor_map &lt;- expr(\n  case_when(\n    country %in% c('NO', 'Norway') ~ '#d43b45',\n    country %in% c('DE', 'Germany') ~ '#DCA825',\n    country %in% c('ES', 'Spain') ~ '#b01622',\n    country %in% c('FR', 'France') ~ '#487caa',\n    country %in% c('GB', 'UK') ~ '#264250',\n    country %in% c('IE', 'Ireland') ~ '#61A861',\n    country %in% c('PT', 'Portugal') ~ '#d27e4e',\n    TRUE ~ '#000000'\n  )\n)\n\n# set tooltip mappings\ntooltip_map &lt;- expr(\n  case_when(\n    !year %in% c(seq(2002, 2022, 2), 2023) & country %in% names(country_labels) ~ country_labels[country],\n    TRUE ~ country\n  )\n)\n\nlabel_data &lt;-\n  all_series |&gt;\n  group_by(country) |&gt;\n  arrange(desc(year)) |&gt; \n  filter(row_number() == 1) |&gt;\n  mutate(\n    y_offset = case_when(\n      country == 'ES' ~ value + .1,\n      country == 'FR' ~ value +  0,\n      country == 'DE' ~ value - .05,\n      country == 'GB' ~ value - .1,\n      country == 'PT' ~ value + .2,\n      TRUE ~ value)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    ),\n    country_color = case_when(\n      country %in% c(\"DE\", 'Germany') | country_name %in% 'Germany' ~ \"#9b6e00\",  # override DE/Germany label color here since curve color is different than country label color (only one)\n      country %in% c('NO', 'Norway') ~ '#d43b45',\n      country %in% c('ES', 'Spain') ~ '#b01622',\n      country %in% c('FR', 'France') ~ '#487caa',\n      country %in% c('GB', 'UK') ~ '#264250',\n      country %in% c('IE', 'Ireland') ~ '#61A861',\n      country %in% c('PT', 'Portugal') ~ '#d27e4e',\n      TRUE ~ '#000000'\n    )\n  ) |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values),\n    country = if_else(country == 'DE', 'Germany', country)\n  )\n# add caption to match Tom's\ncaption_text &lt;- \"&lt;span style='color:#232323;'&gt;0 = extremely bad, 10 = extremely good.&lt;/span&gt;&lt;br&gt;\n                 &lt;span style='color:#939293; font-weight: bold;'&gt;Chart: Tom Calver | The Times and The Sunday Times • Source: ESS/K. Kardous&lt;/span&gt;&lt;br&gt;\"\n\np &lt;- \n  all_series |&gt; distinct() |&gt; \n  ggplot(\n    aes(x = year, \n        y = value, \n        group = data_id, \n        color = country)\n  ) +\n  scale_color_manual(\n    values = c(\n      'NO' = \"#d43b45\",\n      'DE' = '#DCA825',\n      'ES' = '#b01622',\n      'FR' = '#487caa',\n      'GB' = '#264250',\n      'IE' = '#61A861',\n      'PT' = '#d27e4e')\n  ) +\n  scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0, 8)) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2023),\n    expand = c(0, 0.1)\n  ) + \n  theme(\n    legend.position = 'none',\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  geom_smooth_interactive(\n    data = all_series,\n    aes(x = year, y = value, data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE,\n    linewidth = 3.5, # thick line acts as the 'border'\n    alpha = 1,\n    show.legend = FALSE,\n    color = \"white\"\n  ) +\n  # colored interactive smooth line\n  geom_smooth_interactive(data = all_series |&gt; filter(!country %in% 'IE'),\n                          aes(data_id = paste0(country, country_name)),\n                          method = \"loess\", \n                          se = FALSE, \n                          linewidth = 0.9, \n                          fill = NA\n  ) +\n  geom_smooth_interactive(data = all_series |&gt; filter(country %in% 'IE'),\n                          aes(data_id = paste0(country, country_name)),\n                          method = \"loess\", se = FALSE, linewidth = 0.9, fill = NA\n  ) +\n  scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0, 8)) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2024),\n    expand = c(0, 0.1)\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    caption = caption_text\n  ) +\n  # final touchoups before interactive rendering thru girafe()\n  theme(\n    panel.spacing = unit(20, 'cm'),\n    plot.margin = margin(l = 5, b = 10), # leave some space/margin at the bottom for caption 'room to breathe'\n    legend.position = 'none',\n    axis.text = element_text(face = \"bold\"), # axis tick labels\n    strip.text = element_text(face = \"bold\"), # facet labels\n    panel.grid.major.x = element_blank(),\n    axis.text.x = element_text(margin = margin(b = 9, t = -9)),\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    plot.caption = element_markdown(\n      hjust = 0,\n      size = 9,\n      lineheight = 1.4,\n      family = \"roboto\",\n      face = 'bold',\n      margin = margin(l = -10, t = 5)\n    ) \n  ) +\n  geom_segment(aes(x = 2002, xend = 2023, y = 0, yend = 0), color = 'black')\n\np_interactive &lt;- p +\n  geom_point_interactive(\n    data = visible_points,\n    aes(\n      x = year,\n      y = value, \n      color = country,\n      data_id = paste0(country, country_name)\n    ),\n    alpha = 0.1, fill = 'white', show.legend = FALSE\n  ) +\n  geom_point_interactive(\n    data = \n      all_series |&gt; \n      mutate(\n        point_size = if_else(country %in% c('NO', 'Norway', 'PT', 'Portugal'), 3, 1.5),\n        point_stroke = point_size\n      ),\n    aes(\n      x = year, \n      y = value,\n      data_id = paste0(country, country_name),\n      tooltip = paste0(\n        \"&lt;div style='text-align:\", \n        if_else(year &lt;= 2015.250, \"left\", \"right\"), \n        \"; line-height: 1.1;'&gt;\", # tightens spacing\n        \"&lt;div style='font-weight:bold; font-size:16px; color:\",\n        if_else(country_name == \"Germany\", \"#9b6e00\", eval(color_map)), \n        \";'&gt;\", \n        eval(tooltip_map), \n        \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(year, 0), \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(value, 2), \"&lt;/div&gt;\",\n        \"&lt;/div&gt;\"\n      )\n    ),\n    color = 'white', fill = 'white', shape = 21, alpha = 0, show.legend = FALSE\n  ) +\n  geom_rect(\n    inherit.aes = FALSE,\n    aes(xmin = 2024, xmax = Inf, ymin = -Inf, ymax = Inf),\n    color = NA, fill = \"white\", \n  ) +\n  geom_label_interactive(\n    data = all_series |&gt; slice_max(year) |&gt; mutate(country_name = str_sub(data_id, 3, 20)),\n    aes(\n      x = year,\n      y = value,\n      group = paste0(country, country_name),\n      label = country_name,\n      data_id = paste0(country, country_name)\n    ),\n    label.size = NA,\n    fill = NA,\n    size = 2.2,\n    hjust = 0,\n    fontface = 'bold',\n    inherit.aes = TRUE,\n    alpha = 1\n  ) +\n  scale_color_manual(\n    breaks = c(\"GB\", \"FR\", \"IE\", \"PT\", \"ES\", \"NO\", 'DE', 'Germany'), # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n    values = c(\"#264250\", \"#487caa\", \"#61A861\", \"#d27e4e\", \"#b01622\", \"#d43b45\", '#DCA825', '#9b6e00') # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n  ) +\n  # scale_color_identity() +  # correctly apply the country color to the label's font\n  coord_cartesian(xlim = c(2002, 2024.5)) +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  # add persistent white circle that follows mouse (via selection); one to cover all data points is simply assigning data to country.year combo\n  geom_point_interactive(\n    data = all_series,\n    aes(\n      x = year,\n      y = value,\n      group = paste0(year, country_name)\n    ),\n    shape = 21,\n    size = 0.4,\n    stroke = 1,\n    fill = 'white',\n    color = \"grey85\",\n    alpha = 0\n  ) \n# render interactive plot thru girafe() engine\ngirafe(\n  ggobj = p_interactive,\n  options = list(\n    opts_tooltip(\n      css = \"\n      background: transparent;\n      border: none;\n      box-shadow: none;\n      font-family: sans-serif;\n      text-shadow:\n      0 0 4px rgba(234, 255, 255, 1),\n      0 0 4px rgba(234, 255, 255, 1),\n      0 0 4px rgba(255, 255, 255, 1);\n      border-radius: none;\n      transform: translate(-50%, 20px);\n      transition: all 0.2s ease-in-out;\",\n      delay_mouseover = 300,\n      delay_mouseout = 500\n    ),\n    opts_hover(\n      css = \"stroke-width: 3; stroke-opacity: 0.9; fill-opacity: 0.9; opacity: 1;\",\n      nearest_distance = 30,\n      reactive = FALSE\n    ),\n    opts_hover_inv(\n      css = \"stroke-opacity: 0.2; fill-opacity: 0.2; opacity: 0.4;\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\nRoom to improve\n\n\n Show the code\n# generate the data\np3_prep &lt;-\n  tribble(\n    ~Current,  ~Potential,  ~Country,\n    78.9,      84.1,       \"United States\",\n    78.1,      83.8,       \"Germany\",\n    80.9,      80.9,       \"Poland\",\n    81.1,      83.8,       \"United Kingdom\",\n    81.6,      84.1,       \"Ireland\",\n    81.4,      83.8,       \"Finland\",\n    82.0,      84.1,       \"Norway\",\n    82.3,      84.1,       \"France\",\n    82.4,      84.1,       \"Sweden\",\n    81.4,      82.6,       \"Portugal\",\n    83.0,      84.1,       \"Australia\",\n    83.0,      83.2,       \"Italy\",\n    81.7,      81.7,       \"Greece\",\n    83.1,      83.1,       \"Spain\",\n    84.1,      84.1,       \"Japan\"\n  ) |&gt; \n  select(last_col(), everything()) |&gt; \n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15)\n\n# create country abb names (fetched from one of the html nodes within the original plot) and build urls/per flag\ncountry_abbs &lt;- c('us', 'de', 'pl', 'gb', 'ie', 'fi', 'no', 'fr', 'se', 'pt', 'au', 'it', 'gr', 'es', 'jp')\nflag_urls &lt;- str_glue(\"https://static.dwcdn.net/css/flag-icons/flags/4x3/{country_abbs}.svg\")\n\n# loop thru svg's and convert to png's\nflag_paths &lt;- map(\n  flag_urls, function(url) {\n\n    svg_path &lt;- tempfile(fileext = \".svg\")\n    png_path &lt;- tempfile(fileext = \".png\")\n    \n    download.file(url, svg_path, mode = \"wb\")\n    rsvg::rsvg_png(svg_path, png_path)\n    \n    return(png_path)\n  }\n) \nflag_paths &lt;- setNames(flag_paths, country_abbs)\n\n\n# add the 2 additional columns back to p3\np3_data &lt;- p3_prep |&gt; \n  bind_cols(\n    flag_paths |&gt; unlist() |&gt; stack() |&gt; rename(flag_pngs = values, country_abbs = ind)\n  ) |&gt; \n  select(Country, country_abbs, Current, Potential, flag_pngs)\n\n# also add html code straight into p3_data but first abbreviate country names\np3_data &lt;- \n  p3_data |&gt; \n  # abbreviated United States and United Kingdom because i noticed the blanks/two or more words can throw off element markdown, especially\n  # when embedding svg's; while not perfectly replicating here, in the context of country names, 'US' and 'UK' are universally reconized, especially\n  # if flag images are appended to them \n  mutate(\n    Country = if_else(\n      Country == 'United Kingdom', 'UK',\n      if_else(Country == 'United States', 'US', Country)\n      ),\n    flag_html = sprintf(\"&lt;img src='%s' width='25' height='15'&gt; %s\", flag_pngs, Country)\n    )\n# we will also preserve html flags as a single charazcter string in the event we create an independ plot and stack it (veritically)\n# alongside progress plot (for Current vs. Potential arrow chart)\n# flag_html &lt;- str_c(\n#   map2(rep(flag_paths, each = 2), p3_data_prep$Country,\n#            ~ sprintf(\"&lt;img src='%-s' width='20' height='15'&gt; %-s\", .x, .y)),\n#   collapse = \"&lt;br&gt;\"\n# )\n\n# we have to turb this from wide to long; to get a tracking per country (current -&gt; potential)\np3_data_prep &lt;- \n  p3_data |&gt; \n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15) |&gt; \n  pivot_longer(\n    -c(seq, Country, country_abbs, flag_pngs, flag_html), names_to = 'progress'\n  ) |&gt; \n  mutate(\n    # add color codes (different for UK compared to rest)\n    # for greece, default arrow shows a recession, but in Tom's plot, it's '&gt;', it's the same value for current and for potential for Greece, so we \n    # artificially add + 0.001 to the Greek score for potential for force '&gt;' arrow direction\n    # value = if_else(Country == 'Greece' & progress == 'Potential', value + 0.0001, value),\n    hex_codes = if_else(Country == 'UK', '#73a3d3', '#264250'), # UK gets its own color\n    arrow_end_angle = if_else(Country %in% c('Spain', 'Japan'), 90, 70)) |&gt; \n  arrange(desc(seq)) # for some reason, below plot was reversing order, so we reverse order here so that plot arranges countries properly\n\n# since arrow() wouldn't natively recoznied arrow_end_angle,\n# we create an variable in the global env. to call it within arrow() later on\np3 &lt;- p3_data_prep |&gt; \n  ggplot(aes(y = fct_reorder(Country, -seq), x = value, color = hex_codes)) +  \n  geom_path(arrow = arrow(\n    type = \"open\", \n    angle = c(rep(90, 3), rep(60, 27)), \n    length = unit(3, 'pt')), \n    linewidth = .8\n  ) +\n  geom_label(\n    data = p3_data_prep |&gt; filter(progress == 'Current'),\n    aes(label = value, hjust = 1.2, family = \"roboto\"),\n    size = 2, fill = 'white', label.size = NA\n  ) +\n  geom_text(\n    data = p3_data_prep |&gt; filter(progress == 'Potential'),\n    aes(label = value, hjust = -.3, family = \"roboto\"),\n    size = 2\n  ) + \n  geom_text(\n    aes(x = 78.9, y = 15, label = '\\nCurrent\\n', family = 'roboto'), \n    size = 1.9, nudge_y = .5, nudge_x = -.2\n  ) + \n  geom_text(\n    aes(x = 84.1, y = 15, label = '\\nPotential\\n', family = 'roboto'), \n    size = 1.9, nudge_y = .5, nudge_x = .1\n  ) + \n  scale_color_identity() +  \n  scale_y_discrete(\n    labels = p3_data_prep |&gt; filter(progress == \"Current\") |&gt; pull(flag_html)\n  ) +\n  theme(\n    axis.text.y = element_markdown(inherit.blank = FALSE, family = \"roboto\", size = 4, hjust = 0, face = 'bold'),  \n    axis.text.x = element_text(family = \"roboto\", size = 4),  \n    axis.title.x = element_text(size = 7),  \n    axis.title.y = element_text(size = 7), \n    panel.grid.minor.x = element_blank()\n    # plot.margin = margin(r = 30)\n  ) + \n  labs(x = NULL, y = NULL) + \n  theme(legend.position = 'none') + \n  geom_segment(\n    aes(x = 78.9, xend = 78.9, y = 15.1, yend = 15.3), \n    color = \"grey70\", linewidth = 0.1, inherit.aes = FALSE\n  ) + \n  geom_segment(\n    aes(x = 84.1, xend = 84.1, y = 15.1, yend = 15.3), \n    color = 'grey70', linewidth = 0.1, inherit.aes = FALSE\n  ) \n\n# add plot caption to match what Tom has \ncaption_text &lt;- \"&lt;span style='color:#989799; font-weight:bold;'&gt;Chart: The Times And The Sunday Times • Source&lt;/span&gt; \n                 &lt;span style='color:#232323; font-weight:bold;'&gt;Zarulli et al.&lt;/span&gt;\"\n\np3 &lt;- p3 + \n  labs(caption = caption_text) + \n  theme(\n    plot.caption = element_markdown(inherit.blank = TRUE,\n                                    hjust = -0.18,  \n                                    size = 4.7,\n                                    lineheight = 1.2,\n                                    family = \"roboto\"\n    )\n  )\np3\n\n\n\n\n\n\n\n\n\n\n\nValue for money (Excludes 2020-22 given the high COVID spend)\n\n\n Show the code\ncountry_labels &lt;- tribble(\n  ~country, ~year, ~spend, ~life_expectancy, ~xnudge, ~ynudge,\n  \"France\", 2023,  5014,   83.3,             500,       0,\n  \"Germany\",2023,  5971,   81.4,             600,       0,\n  \"UK\",     2023,  4444,   81.3,             350,       0,\n  \"Italy\",  2023,  3249,   83.7,             0,       0.55,\n  \"Canada\", 2023,  5307,   82.6,             550,       0,\n  \"Japan\",  2023,  4874,   84.7,             500,       0,\n  \"US\",     2023, 10827,   79.3,             0,       0.5\n)\n\n\ndata &lt;- \n  read_tsv(\"https://datawrapper.dwcdn.net/Bxhol/9/dataset.csv\") |&gt; \n  mutate(last_year = year == 2023) |&gt;  # this is done because most recent year gets a black fill/border while antecedent years get a white one\n  arrange(country, year) |&gt; \n  mutate(\n    country_tooltip = if_else(year == 2023, country, paste(country, year, sep = ', '))\n  ) |&gt; \n  mutate(\n    country_fill = case_when(\n      str_detect(country_tooltip, \"US\") ~ \"US\",\n      str_detect(country_tooltip, \"France\") ~ \"France\",\n      str_detect(country_tooltip, \"Italy\") ~ \"Italy\",\n      str_detect(country_tooltip, \"Germany\") ~ \"Germany\",\n      str_detect(country_tooltip, \"Canada\") ~ \"Canada\",\n      str_detect(country_tooltip, \"Japan\") ~ \"Japan\",\n      str_detect(country_tooltip, \"UK\") ~ \"UK\",\n      TRUE ~ country_tooltip\n    )\n  ) |&gt; \n  # make sure to hide tooltips for most recent years as they will get an explicit data label there anywyas\n  mutate(\n    country_tooltip = if_else(year == 2023, '', country_tooltip)\n  ) |&gt; \n  mutate(\n    country = factor(country, levels = c(\"Canada\", \"France\", \"Germany\", \"Japan\", \"Italy\", \"UK\", \"US\"))\n  )\n\np2 &lt;- data |&gt; \n  ggplot(aes(x = spend, y = le, color = last_year, fill = country_fill, group = country_fill)) +\n  geom_point_interactive(\n    aes(size = size, data_id = country_fill, tooltip = country_tooltip), \n    shape = 21, alpha = 1\n  ) +\n  geom_text_interactive(\n    data = data |&gt; slice_max(year) |&gt; distinct(country_fill, .keep_all = TRUE), \n    aes(\n      text = country_fill, \n      label = country_fill, \n      data_id = country_fill, \n      tooltip = country_tooltip\n    ), \n    hjust = -0.3, vjust = 0, alpha = 1\n  ) +\n  scale_fill_manual(\n    breaks = c(\"US\", \"France\", \"Italy\", \"Germany\", \"Canada\", \"Japan\", \"UK\"),\n    values = c(\"#4076A4\", \"#80B1E2\", \"#61A961\", \"#F5C55E\", \"#FFAEA9\", \"#DACFC0\", \"#E94F55\")\n  ) +\n  scale_color_manual(\n    breaks = c(FALSE, TRUE),\n    values = c('white', 'black')\n  ) +\n  theme(\n    plot.title = element_markdown(size = 12, lineheight = 1.2, linewidth = 1.5),\n    plot.subtitle = element_markdown(size = 12, lineheight = 1.2)\n  ) + \n  labs(\n    title = '**Value for money**',\n    subtitle = \"How life expectancy and per-capita healthcare spend have changed since 2000.&lt;br&gt; \n               &lt;span style='background-color:#e94f55; color:white; padding:2px 4px;'&gt;**UK**&lt;/span&gt; spending is rising, but life expectancy has stalled.\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(\n    breaks = seq(3000, 11000, 1000),\n    labels = c(format(seq(3000, 10000, 1000), big.mark = \",\", trim = TRUE), \"$11,000\")\n  ) +\n  coord_cartesian(\n    xlim = c(2100, 11300),\n    ylim = c(77, 86), \n    expand = FALSE, \n    clip = 'off'\n  ) +\n  # add caption for p2\n  labs(\n    caption = \"&lt;span style='color:#232323; font-weight:bold;'&gt;In US Dollars, adjusted for purchasing power and inflation. Excludes 2020-22.&lt;/span&gt;  &lt;br&gt;\n             &lt;span style='color:#989799; font-weight:bold;'&gt;Chart: Tom Calver | The Times and The Sunday Times&lt;/span&gt;\"\n  ) +\n  theme(\n    text = element_text(family = 'roboto'), element_text(color = 'black', face = 'bold'),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major = element_line(size = 0.3, color = \"grey80\"),\n    axis.line = element_line(color = \"black\", size = 0.3),\n    legend.position = 'none',\n    plot.caption = element_markdown(\n      size = 10, \n      hjust = 0, \n      lineheight = 1.2\n    )\n  ) +\n  annotate(\n    geom = 'rect', \n    xmin = 2075,\n    xmax = 2345,\n    ymax = 86.5,\n    ymin = 86.15, \n    fill = '#e94f55'\n  ) + \n  # we also need to annotate the years 2000 and 2023 with Germany's yellow hex code (to match what Tom has)\n  # not so much for Germany but for reference in general to the range of years for the plot\n  # 2000 persistent text geom; for 2023 we use text geom; for 2000, we use label with no borders to bring forward '2000'\n  annotate( \n    geom = 'label', \n    label = '2000',\n    x = 4250,\n    y = 77.97,\n    color = '#F5C55E',\n    fill = 'white',\n    label.size = NA,\n    fontface = \"bold\" \n  ) +\n  # 2023 persistent text geom\n  annotate(\n    geom = 'text', \n    label = '2023',\n    x = 6400,\n    y = 81.2,\n    color = '#F5C55E',\n    fontface = \"bold\" \n  ) + \n  # add x and y axes titles (within the plot itself)\n  # y axis\n  annotate(\n    geom = 'text', \n    label = 'Life expectancy',\n    x = 2685,\n    y = 85.8,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15\n  ) +\n  # x axis\n  annotate(\n    geom = 'text', \n    label = 'Per-capita\\n  spend',\n    x = 11200,\n    y = 77.5,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15,\n    hjust = .9,\n    vjust = .6\n  ) \n\ngirafe(\n  ggobj = p2,\n  width_svg = 10, height_svg = 6, \n  options = list(\n    opts_tooltip(\n      css = \"background: white;\n             border: 1px solid #ddd;\n             border-radius: 4px;\n             padding: 6px;\n             font-family: 'Roboto', sans-serif;\n             font-size: 14px;\n             font-weight: bold;\n             color: #232323;\n             text-align: left;\n             box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);\"\n    ),\n    opts_hover(\n      css = \"stroke-opacity: 1; fill-opacity: 1; color: #232323; font-size: 12px; alpha: 1;\"\n    ),\n    opts_hover_inv(\n      css = \"fill-opacity: 0.01; stroke-opacity: 0.01; color: transparent; font-size: 0.1px;\"\n    )\n  )\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello! I’m a data scientist/enthusiast with a passion for analyzing and visualizing information to uncover meaningful insights. My background spans across data science, statistics, and research methodologies.\nOn this website, I share various data projects I’ve worked on, focusing particularly on:\n\nData replications of interesting studies and articles\nVisualizations that help tell stories through data\nAnalysis of topics related to economics, healthcare, and social sciences\n\n\nMy Approach\nI believe in transparent, reproducible data analysis. When working on projects, I strive to:\n\nClearly document my methodology and thought process\nShare code and data sources when possible\nPresent findings in accessible, visually appealing formats\nAcknowledge limitations and potential biases in my analysis\n\n\n\nConnect With Me\nI’m always interested in connecting with fellow data enthusiasts, researchers, and curious minds. Feel free to reach out through GitHub or connect with me on other platforms.",
    "crumbs": [
      "Navigation",
      "About"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Where Data Meets Curiosity",
    "section": "",
    "text": "In a nutshell, I share code and thoughts while replicating data and data visualizations that I find interesting online (mostly data-driven news articles) along with analyses I like to do in my spare time. Feel free to connect with me if you have any questions or suggestions !",
    "crumbs": [
      "Navigation",
      "Home"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html",
    "href": "tom-calver-article-NHS.html",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: Tom uses a combination of sources to make his point → while not a bottom ‘performer’; especially compared to the US, UK’s National Health Service (NHS) did not wait for the COVID crisis to show its limits and harbor increasing consumer dissatisfaction. That downward trend can be traced back to the early 2010’s; and that comes from the service running lean - too lean - but also inefficiently,  For more detail on the sources, feel free to visit the actual article with link embedded at the top of the page in the author’s name. If you like to download the data, feel free to use urls here.\nOverall Strategy for building first plot: The data for first plot is smoothed out/interpolated data; this is usually done to ‘well smooth’ the data and delineate clearer trends over time; in this case select European countries’ survey takers’ scores on their overall satisfaction level towards their respective countries’ public health services (ESS - European Social Survey). In this case, there is an additional reason the author smoothed the data; it is to ‘complete’ the years given that the ESS is done once every two years; note that I am assuming here but it’s not an outrageous assumption to make. So in order to match that smoothing, I go with geom_smooth() from ggplot2 and keep span at default; after a few iterations; the data points (for non survey years) match highly to what Tom displays in the first graph. Finally, since the graph is interactive, I use ggiraph package to emulate said interactivity; a JS based R package that lets you add tooltips/hover/highlight upon hover/downplay non-hovered, etc. all the usual things one expects from an interactive plot; without having to build a Shiny app; which for this exercise/first plot (and the rest); would be like building a Gatling gun to aim at an ant.\nSteps taken:  While I try to be as detailed in my comments as possible; it’s still helpful to lay out the step by step process as a numbered list to get the overall chain of what the code is supposed to do on a high level - without having to go into the nitty gritty- the comments in the code chunks and in that regard should hopefully help:\n\nFound the source of the data from HTML Source Page; clicked on Network tab after hovering on the plot panel; refreshed the page; and found ‘dataset’ under ‘datawrapper’.\nThe data was wide in structure (from raw csv):  17 columns (1 column for year, 8 hex-coded columns with imputed/smoothed values, and 8 columns for country abbreviations with survey data for even years, NULL otherwise).\nDiscovered the hex columns and country columns didn’t align in a straightforward way. Columns were randomly ordered within each set, requiring a ranking approach rather than pairwise matching (one hex column to the symmetrical position of the country labeled column).\nImplemented a solution by sorting satisfaction scores per year, which helped group values by country through proximity of their scores. This approach works well since the values are interpolated through smoothing, making them very close to one another from row to row. This might not work in other cases, but it does here.\nCombined two sorted datasets: year + hex columns, and year + country columns to create a properly aligned mapping, joined facts data (with scores/values) on newly created mapped long datasets (converted from wide- almost always much harder to work with) to then finalize the dataset for visualization. More detail on ‘finalized the dataset’ can be found in the comments of the actual code.  Prepared the final clean dataset for interactive plotting with ggiraph.",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Where Data Meets Curiosity",
    "section": "Recent Projects",
    "text": "Recent Projects\n\nIs NHS Good Value?\nReplication of a data-driven article/analysis of the UK’s healthcare systems among other countries; by British editor Tom Calver\nView Project\n\n\nHas International Travel Into the U.S declined ?\nReplication of a data-driven article/analysis of the impact (if any) of President Trump and his administration on international tourism into the United States; by Josh Holder et. al\nView Project",
    "crumbs": [
      "Navigation",
      "Home"
    ]
  },
  {
    "objectID": "index.html#about-this-site",
    "href": "index.html#about-this-site",
    "title": "Where Data Meets Curiosity",
    "section": "About This Site",
    "text": "About This Site\nThis personal website serves as a repository for my replications of interesting studies/articles, analysis, and explorations of topics that spark my curiosity. As a data enthusiast, I enjoy diving into datasets, uncovering insights, and sharing my methods/findings in as many coding languages as I possibly can.\nOn Replications: There has been a clear increase in the use of data ubiquitously and over recent years, news articles are therefore no exception. Embedded in news articles these days you can, and without much effort, find anything from simple tables to fairly involved/advanced visualizations. But of course, you seldom find the exact methodology the author(s) used in presenting said visualizations to their readers. The purpose here then becomes to reverse-engineer the final article output to generate a clear path to each ‘element’ that is required to make said output - almost like reconstructing a puzzle.\n“Where there is a will, there is a way”; similarly, where there is HTML, there is its source page- less poetic but equally true. This will be the leitmotif for most data extraction from articles I work on replicating; unless they are behind a paywall (where an account has to be created first -with or without a paid subscription); or JS is intentionally set to not redirect; not allowing for the actual data to be revealed under the hood.\nAlong the way, I hope I do a good job explaining why I went with one method over another based on high certainty; meaning that this is what the author did as well; or purely making an educated guess, and then seeing how well the guessed method’s output matches the article’s. I find the exercise interesting for multiple reasons, one of which being thinking the same way the author thought so that both outputs align; that can be a useful learning experience for me and hopefully for you as well !\nIn terms of coding choices; I will mostly be using R in tandem with Quarto along with python and potentially explore additional languages/frameworks along the way.\nOn Analysis: Once things get streamlined and time to publish additional replication projects shrinks, I will most likely begin devoting time to dive into articles or more generally online sources that I will either support or critique. This will be relying more on the analytical side of things in making my point of whether or not I think the article/piece drives home their point with rigor; and if not, suggest concrete improvements; be it on the choice of methods and/or how the message is conveyed visually.\nOn Opinion: This section will really focus more on (potentially pompous) philosophical and metaphysical takes (I warned you) to take a step back and some hindsight into deciphering the speed with which things are evolving, tackling many topics..more to come on that section !",
    "crumbs": [
      "Navigation",
      "Home"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#overall-strategy-for-building-first-plot",
    "href": "tom-calver-article-NHS.html#overall-strategy-for-building-first-plot",
    "title": "\nReplication of below article’s Data and Visualizations “We keep pumping money into the NHS. Is it good value?”  By Tom Calver   Karim K. Kardous       \n",
    "section": "##Overall Strategy for building first plot:",
    "text": "##Overall Strategy for building first plot:\n\nds\nds\n\n\n##About the data: - ds - ds\n##Steps taken: 1 2 3",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#about-the-data",
    "href": "tom-calver-article-NHS.html#about-the-data",
    "title": "\nReplication of below article’s Data and Visualizations “We keep pumping money into the NHS. Is it good value?”  By Tom Calver   Karim K. Kardous       \n",
    "section": "About the data:",
    "text": "About the data:\n\nds\nds",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#steps-taken-1-2-3",
    "href": "tom-calver-article-NHS.html#steps-taken-1-2-3",
    "title": "\nReplication of below article’s Data and Visualizations “We keep pumping money into the NHS. Is it good value?”  By Tom Calver   Karim K. Kardous       \n",
    "section": "Steps taken: 1 2 3",
    "text": "Steps taken: 1 2 3",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#health-service-satisfaction",
    "href": "tom-calver-article-NHS.html#health-service-satisfaction",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Health Service Satisfaction",
    "text": "Health Service Satisfaction\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n# check if the required package 'emo' is installed;\n# if not, it might mean your renv environment is not fully restored.\n# running `renv::restore()` will install all necessary packages\n# to ensure consistent package versions for building this quarto document,\n# effectively 'containerizing' your project and protecting it from future package changes.\nif (!requireNamespace(\"emo\", quietly = TRUE)) {\n  message(\"\\nIt looks like your environment might not be restored.\\nRun `renv::restore()` to install required packages.\\n\")\n}\n\n# load packages\nlibrary(xml2)\nlibrary(downlit)\nlibrary(gdtools)\nlibrary(tidyverse)\nlibrary(quarto)\nlibrary(chromote)\nlibrary(here)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(ggtext)\nlibrary(ggshadow)\nlibrary(ggiraph)\nlibrary(gfonts)\nlibrary(showtext)\nlibrary(ggborderline)\nlibrary(patchwork)\nlibrary(shiny)\nlibrary(gt)\nlibrary(rsvg)\nlibrary(magick)\nlibrary(stringr)\nlibrary(ggimage)\nlibrary(emo)\n\n\ntheme_set_custom &lt;- function() {\n  \n  # load google fonts \n  sysfonts::font_add_google(\"Roboto\", \"Roboto\")\n  sysfonts::font_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\n  showtext::showtext_auto()\n\n  # apply ggplot2 theme; can always be overwritten\n  ggplot2::theme_set(\n    ggplot2::theme_minimal() +\n      ggplot2::theme(\n        text = element_text(family = \"Roboto\", size = 11),\n        plot.title = element_text(family = \"Roboto\", face = \"bold\", size = 16),\n        plot.subtitle = element_text(family = \"Roboto\", size = 12),\n        axis.text = element_text(family = \"Roboto\", size = 10),\n        axis.title = element_text(family = \"Roboto Condensed\", size = 11)\n      )\n  )\n}\n\ntheme_set_custom()\n\n\nWhile above took care of importing required libraries and setting general options such as plot theme and text font to be used; below is the start of data related tasks; from initial pull, to wrangling, to finally output the visualizations.\nData Pull\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|eval: false\n\ninvisible({\n  b &lt;- ChromoteSession$new()\n  b$Page$navigate(\"https://www.thetimes.com/comment/columnists/article/we-keep-pumping-money-into-the-nhs-is-it-good-value-blq8bxc39\")\n  Sys.sleep(3) # allow some time for dynamic content to render\n})\n\n# extract all iframe srcs (joined by || in this case)\niframes_html &lt;- b$Runtime$evaluate(\"Array.from(document.querySelectorAll('iframe')).map(el =&gt; el.src).join('||')\")$result$value\n# split and filter valid Datawrapper url's\nchart_urls &lt;- str_split(iframes_html, \"\\\\|\\\\|\")[[1]] |&gt;\n  str_subset(\"^https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+$\")\n\nall_data &lt;- purrr::map_dfr(chart_urls, function(url) {  \n  message(\"Navigating to: \", url)\n  b$Page$navigate(url)\n  Sys.sleep(3)\n  \n  html &lt;- b$Runtime$evaluate(\"document.documentElement.outerHTML\")$result$value\n  \n  # match visible chart values if any\n  pattern &lt;- 'aria-datavariables=\"year,\\\\s*([A-Z]+)\".*?aria-datavalues=\"([0-9]{4}),\\\\s*([0-9.]+)\"'\n  matches &lt;- str_match_all(html, pattern)[[1]]\n  \n  # match dataset.csv url as well \n  csv_pattern &lt;- \"https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+/dataset\\\\.csv\"\n  csv_link &lt;- str_extract(html, csv_pattern)\n  if (is.na(csv_link)) {\n    csv_link &lt;- str_glue(\"{url}/dataset.csv\")\n  }\n  \n  tibble(\n    chart_url = url,\n    country = if(nrow(matches)) matches[, 2] else NA,\n    year = if(nrow(matches)) as.integer(matches[, 3]) else NA,\n    value = if(nrow(matches)) as.numeric(matches[, 4]) else NA,\n    dataset_csv = csv_link\n  )\n})\n\n# add a custom gt boilerplate -from {gt} package (great tables)-to reduce code redundancy (having to copy/paste same chunks of code every # time we turn a tibble into a gt object)\ngt_nyt_custom &lt;- function(x, title = '', subtitle = '', first_10_rows_only = TRUE){\n  \n  x &lt;- x |&gt; clean_names(case = 'title')\n  numeric_cols &lt;- x |&gt; select(where(is.double)) |&gt; names()\n  integer_cols &lt;- x |&gt; select(where(is.integer)) |&gt; names()\n  \n  title_fmt &lt;- if(title != \"\") glue::glue(\"**{title}**\") else \"\"\n  subtitle_fmt &lt;- if(subtitle != \"\") glue::glue(\"*{subtitle}*\") else \"\"\n  \n  x |&gt;\n    (\\(x) if (first_10_rows_only) slice_head(x, n = 10) else x)() |&gt;\n    gt() |&gt; \n    tab_header(\n      title = md(title_fmt),\n      subtitle = md(subtitle_fmt)\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#333333')\n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#CC6600', weight = 'bold')\n      ),\n      locations = cells_column_labels(everything())\n    ) |&gt; \n    fmt_number(\n      columns = c(numeric_cols),\n      decimals = 1\n    ) |&gt; \n    fmt_number(\n      columns = c(integer_cols),\n      decimals = 0\n    ) |&gt; \n    tab_options(\n      table.font.names = c(\"Merriweather\", \"Georgia\", \"serif\"),\n      table.font.size = 14,\n      heading.title.font.size = 18,\n      heading.subtitle.font.size = 14,\n      column_labels.font.weight = \"bold\",\n      column_labels.background.color = \"#eeeeee\",\n      table.border.top.color = \"#dddddd\",\n      table.border.bottom.color = \"#dddddd\",\n      data_row.padding = px(6),\n      row.striping.include_table_body = TRUE,\n      row.striping.background_color = \"#f9f9f9\"\n    )\n  \n}\n\n\nMetadata\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\n# reveal dataset urls/csvs\nall_data |&gt;\n  count(\n    url = chart_url, download_link = dataset_csv\n  ) |&gt;\n  select(-n) |&gt;\n  gt_nyt_custom(\n    title = 'Dataset Ids'\n  ) |&gt;\n  cols_label(\n    Url = \"Plot URL\",\n    `Download Link` = \"Link to CSV\"\n  ) |&gt; \n  tab_footnote(\n    \"In the event you download the links yourself and run your own script,\n    the third and last should be treated as tsv files, otherwise csv's\"\n  ) \n\n\n\n\n\n\nDataset Ids\n\n\n\n\n\nPlot URL\nLink to CSV\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Bxhol/4\nhttps://datawrapper.dwcdn.net/Bxhol/4/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/JH3Qn/1\nhttps://datawrapper.dwcdn.net/JH3Qn/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Mc3q2/2\nhttps://datawrapper.dwcdn.net/Mc3q2/2/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/eXQPs/1\nhttps://datawrapper.dwcdn.net/eXQPs/1/dataset.csv\n\n\n\nIn the event you download the links yourself and run your own script, the third and last should be treated as tsv files, otherwise csv's\n\n\n\n\n\nData Sample\n\n Show the code# reveal data sample for year 2004 as an example\nall_data |&gt; \n  filter(year == 2004) |&gt;\n  select(2:last_col()) |&gt; \n  gt_nyt_custom() |&gt; \n  tab_header(\n    title = md(\"**Chart Data Summary**\"),\n    subtitle = md(\"*Extracted from embedded datawrapper in the HTML*\")\n  )\n\n\n\n\n\n\nChart Data Summary\n\n\nExtracted from embedded datawrapper in the HTML\n\n\nCountry\nYear\nValue\nDataset Csv\n\n\n\n\nDE\n2,004\n4.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nPT\n2,004\n3.5\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nIE\n2,004\n4.1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nNO\n2,004\n5.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nFR\n2,004\n5.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nES\n2,004\n5.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nGB\n2,004\n5.4\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\n\n\n\n\nData Wrangling\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\n# for easier referencing, assign file types (csv where appropriate, tsv otherwise) \nfile_info &lt;- tibble(\n  path = unique(all_data$dataset_csv),\n  name = c(\"health_service_sat:csv\", \"value_for_money:csv\", \n           \"room_to_improve:tsv\", \"barely_beds:csv\", \"budget_breakdowns:tsv\")\n  ) |&gt; \n  separate(\n    name, into = c('dataset_name', 'file_type'), sep = \"\\\\:\"\n  )\n\n# loop thru datasets, read them in, and then assign them to the global environment\ninvisible({\n  file_info |&gt;\n    mutate(\n      data = pmap(\n        list(path, file_type),\n        \\(path, file_type) if(file_type == \"csv\") read_csv(path) else read_tsv(path)\n      )\n    ) |&gt;\n    select(dataset_name, data) |&gt;\n    deframe() |&gt;\n    list2env(envir = .GlobalEnv)\n}\n)\n\n# set country 'switch'; so that tooltip can reflect full country name (spelled out) accordingly for imputed values (non survey years smoothed values)\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\", \n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n  )\ncountry_label_tibble &lt;- c(\n    NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n    FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n  ) |&gt; \n  enframe()\n\n# clean the first dataset: health_service_sat, to prep for plotting.\n# it has 17 columns: 1 year column, 8 hex-coded columns (imputed/smoothed values), \n# and 8 columns for country abbreviations (survey data, even years).\n# initially assumed hex columns align pairwise with country columns; but it was not the case.s\n# columns are randomly ordered within each set, so we use ranking instead.\n# sorting by satisfaction score per year helps group values by country (via proximity of their scores).\n# we then combine two sorted datasets: year + hex columns, and year + country columns\n# note that this might not always be the go-to solution but in this case, \n# and given that the values are interpolated (through smoothing), we can safely bet that the values will be very close to one another\n# from one row to the next\n\nhex_to_country_mapping &lt;- health_service_sat |&gt; \n  pivot_longer(\n    -year\n  ) |&gt; \n  slice_max(year) |&gt; \n  filter(\n    str_starts(name, '\\\\#') & !str_detect(name, 'A9FF') # looking at last values from article curves, we can infer this is Italy so \n  ) |&gt; \n  arrange(value) |&gt; \n  bind_cols(\n    health_service_sat |&gt; \n      pivot_longer(\n        -year\n      ) |&gt; \n      slice_max(year) |&gt; \n      filter(\n        !str_starts(name, '\\\\#') & !str_detect(name, 'IT')\n      ) |&gt; \n      arrange(value)\n  ) |&gt; \n  select(\n    years = 1, hex_code = 2, second_to_last_val = 3, \n    years_max = 4, country_abb = 5, last_val = 6\n  ) |&gt; \n  mutate(\n    val_diff = abs(last_val - second_to_last_val)\n  ) |&gt; \n  arrange(val_diff) |&gt; \n  select(\n    hex_code, country_abb\n  ) |&gt; \n  # also join to country_label_tibble to get full country names for future use\n  inner_join(\n    country_label_tibble, \n    join_by(country_abb == name)\n    )\n# now we can map the randomly assigned hex value labels to the actual columns/countries, and create 8 series,\n# one for each country\nhealth_service_sat &lt;- health_service_sat |&gt; \n  pivot_longer(\n    -year\n  ) |&gt; \n  left_join(\n    hex_to_country_mapping, \n    join_by(name == hex_code)\n  ) |&gt;\n  mutate(\n    country_abb = coalesce(country_abb, name)\n  ) |&gt; \n  inner_join(\n    hex_to_country_mapping, \n    join_by(country_abb == country_abb)\n  ) |&gt; \n  select(\n    year, \n    country_abb,\n    country = value,\n    value = value.x\n  ) |&gt; \n  drop_na() \n\nextract_smooth_build &lt;- function(tibble, country = 'GB'){\n  \n  initial_pull &lt;- \n    all_data |&gt; \n    filter(country %in% {{country}}) |&gt; \n    ggplot(aes(x = year, y = value)) + \n    geom_smooth(method = 'loess')\n  \n  # fetch country abbs for ids, and ranges\n  country_ids &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n  country_max &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; max()\n  country_min &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; min()\n  \n  # access smoothed, include actual years to imputed/smoothed points, cap at min max per country/series\n  # and keep only columns of interest\n  smoothed_df &lt;- ggplot_build(initial_pull)[[1]] |&gt; as.data.frame() |&gt; as_tibble()\n  \n  complete_series &lt;- \n    smoothed_df |&gt; \n    select(year = x, value = y) |&gt; \n    mutate(country := country) |&gt; \n    bind_rows(\n      all_data |&gt; \n        filter(country == {{country}}) |&gt; \n        select(year, value) \n    ) |&gt; \n    mutate(\n      year = as.integer(year),\n      year_val_tie_breaker = if_else(is.na(country), 1, 0)\n    ) |&gt; \n    group_by(country, year) |&gt; \n    arrange(desc(year_val_tie_breaker)) |&gt; \n    mutate(ties = row_number()) |&gt; \n    filter(\n      if (n() &lt; 4) TRUE else ties + year_val_tie_breaker != 1 # make sure every year/country combo gets same no. of obs\n      # and that original values (only in the event a given year is even or survey year) take precedence over smoothed ones\n      # otherwise just pass/do nothing\n    ) |&gt; \n    ungroup() |&gt; \n    # ensuer smoothed values don't go below/beyond lower/upper bounds\n    mutate(\n      value = pmin(pmax(value, country_min), country_max)\n    ) |&gt; \n    arrange(year) |&gt; \n    fill(country, .direction = 'downup') |&gt;  # since every year starts with \n    select(year, country, value) \n  \n  return(complete_series)\n  \n}\n# country vector to loop thru\ncountry_name_abbs &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n# combine all series\nall_series &lt;- map_dfr(.x = country_name_abbs, ~extract_smooth_build(tibble = all_data, country = .x))\n\n# set contry 'switch; so that tooltip can change accordingly for odd numebred years\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n)\n\n# adding year as continuous variable (decimal years) so that points don't overlap but strech over whithin a year to year span\nall_series &lt;- \n  all_series |&gt; \n  mutate(\n    rn = row_number(), .by = c(country, year)\n  ) |&gt; \n  mutate(\n    decimal_year = if_else(rn == 1, year, year + rn / 8)\n  ) |&gt; \n  mutate(\n    year = decimal_year\n  ) |&gt; \n  select(-decimal_year)\n\n# also join on country full name mapping so we can generate a consolidate data_id that links the aestethics together (for interactive simultaneus highlighting, etc.)\nall_series &lt;- \n  all_series |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), \n    join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values)\n  ) |&gt; \n  select(-values) |&gt; \n  mutate(\n    country_name = str_sub(data_id, 3, 20)\n  )\n\n# also generate visible (and non visible years by exclusion) as they don't visually get the same properties; visible (even numbered years) get the country abb as a tooltip (and larger markers/circles), \n# while 'invisible' ones (odd numbered years along with year 2023) get their country names fully spelled out and get transparent marker/circle fill\nvisible_years &lt;- c(seq(2002, 2022, 2), 2023)\n\nvisible_points &lt;- \n  all_series |&gt; \n  filter(round(year) %in% visible_years & floor(year) == ceiling(year))\ninvisible_points &lt;- all_series |&gt; \n  filter(!round(year) %in% visible_years & floor(year) != ceiling(year))\n\n# final touchups\n# set color mappings\ncolor_map &lt;- expr(\n  case_when(\n    country %in% c('NO', 'Norway') ~ '#d43b45',\n    country %in% c('DE', 'Germany') ~ '#DCA825',\n    country %in% c('ES', 'Spain') ~ '#b01622',\n    country %in% c('FR', 'France') ~ '#487caa',\n    country %in% c('GB', 'UK') ~ '#264250',\n    country %in% c('IE', 'Ireland') ~ '#61A861',\n    country %in% c('PT', 'Portugal') ~ '#d27e4e',\n    TRUE ~ '#000000'\n  )\n)\n\n# set tooltip mappings\ntooltip_map &lt;- expr(\n  case_when(\n    !year %in% c(seq(2002, 2022, 2), 2023) & country %in% names(country_labels) ~ country_labels[country],\n    TRUE ~ country\n  )\n)\n\nlabel_data &lt;-\n  all_series |&gt;\n  group_by(country) |&gt;\n  arrange(desc(year)) |&gt; \n  filter(row_number() == 1) |&gt;\n  mutate(\n    y_offset = case_when(\n      country == 'ES' ~ value + .1,\n      country == 'FR' ~ value +  0,\n      country == 'DE' ~ value - .05,\n      country == 'GB' ~ value - .1,\n      country == 'PT' ~ value + .2,\n      TRUE ~ value)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    ),\n    country_color = case_when(\n      country %in% c(\"DE\", 'Germany') | country_name %in% 'Germany' ~ \"#9b6e00\",  # override DE/Germany label color here since curve color is different than country label color (only one)\n      country %in% c('NO', 'Norway') ~ '#d43b45',\n      country %in% c('ES', 'Spain') ~ '#b01622',\n      country %in% c('FR', 'France') ~ '#487caa',\n      country %in% c('GB', 'UK') ~ '#264250',\n      country %in% c('IE', 'Ireland') ~ '#61A861',\n      country %in% c('PT', 'Portugal') ~ '#d27e4e',\n      TRUE ~ '#000000'\n    )\n  ) |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values),\n    country = if_else(country == 'DE', 'Germany', country)\n  )\n\n# add caption to match Tom's\ncaption_text &lt;- \"&lt;span style='color:#232323;'&gt;0 = extremely bad, 10 = extremely good&lt;/span&gt;&lt;br&gt;&lt;span style='color:#939291; font-weight: normal;'&gt;Chart: Tom Calver | The Times and The Sunday Times • Source: ESS/K. Kardous&lt;/span&gt;\"\n\np &lt;- \n  all_series |&gt; distinct() |&gt; \n  ggplot(\n    aes(x = year, \n        y = value, \n        group = data_id,\n        color = country)\n  ) +\n  scale_color_manual(\n    values = c(\n      'NO' = \"#d43b45\",\n      'DE' = '#DCA825',\n      'ES' = '#b01622',\n      'FR' = '#487caa',\n      'GB' = '#264250',\n      'IE' = '#61A861',\n      'PT' = '#d27e4e')\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 7, 1), limits = c(0, 8)\n    ) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2025),\n    expand = c(0, 0.1)\n  ) + \n  theme(\n    legend.position = 'none',\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  geom_smooth_interactive(\n    data = all_series,\n    aes(x = year, y = value, data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE,\n    linewidth = 3.5, # thick line acts as the 'border'\n    alpha = 1,\n    show.legend = FALSE,\n    color = \"white\"\n  ) +\n  # colored interactive smooth line\n  geom_smooth_interactive(\n    data = all_series |&gt; filter(!country %in% 'IE'),\n    aes(data_id = paste0(country, country_name)),\n    method = \"loess\", \n    se = FALSE, \n    linewidth = 0.9, \n    fill = NA,\n    show.legend = FALSE\n  ) +\n  geom_smooth_interactive(\n    data = all_series |&gt; filter(country %in% 'IE'),\n    aes(data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE, \n    linewidth = 0.9, \n    fill = NA, \n    show.legend = FALSE\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 7, 1), limits = c(0, 8)\n    ) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2025),\n    expand = c(0, 0.1)\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    caption = caption_text\n  ) +\n  # final touchoups before interactive rendering thru girafe()\n  theme(\n    panel.spacing = unit(20, 'cm'),\n    plot.margin = margin(l = 5, b = 10), # leave some space/margin at the bottom for caption 'room to breathe'\n    axis.text = element_text(face = \"bold\"), # axis tick labels\n    strip.text = element_text(face = \"bold\"), # facet labels\n    panel.grid.major.x = element_blank(),\n    axis.text.x = element_text(margin = margin(b = 10, t = -10)),\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    axis.ticks.x = element_blank(),\n    plot.caption = element_markdown(\n      family = \"Roboto\",\n      face = 'bold'\n      ) \n  ) \n\np_interactive &lt;- p +\n  geom_point_interactive(\n    data = visible_points,\n    aes(\n      x = year,\n      y = value, \n      color = country,\n      data_id = paste0(country, country_name)\n    ),\n    alpha = 0.1, fill = 'white', show.legend = FALSE\n  ) +\n  geom_point_interactive(\n    data = \n      all_series |&gt; \n      mutate(\n        point_size = if_else(country %in% c('NO', 'Norway', 'PT', 'Portugal'), 3, 1.5),\n        point_stroke = point_size\n      ),\n    aes(\n      x = year, \n      y = value,\n      data_id = paste0(country, country_name),\n      tooltip = paste0(\n        \"&lt;div style='text-align:\", \n        if_else(year &lt;= 2015.250, \"left\", \"right\"), \n        \"; line-height: 1.1;'&gt;\", # tightens spacing\n        \"&lt;div style='font-weight:bold; font-size:16px; color:\",\n        if_else(country_name == \"Germany\", \"#9b6e00\", eval(color_map)), \n        \";'&gt;\", \n        eval(tooltip_map), \n        \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(year, 0), \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(value, 2), \"&lt;/div&gt;\",\n        \"&lt;/div&gt;\"\n      )\n    ),\n    color = 'white',\n    fill = 'white', \n    shape = 21, \n    alpha = 0\n  ) +\n  geom_rect(\n    inherit.aes = FALSE,\n    aes(xmin = 2024, xmax = Inf, ymin = -Inf, ymax = Inf),\n    color = NA, \n    fill = \"white\"\n  ) +\n  scale_color_manual(\n    breaks = c(\"GB\", \"FR\", \"IE\", \"PT\", \"ES\", \"NO\", 'DE', 'Germany'), # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n    values = c(\"#264250\", \"#487caa\", \"#61A861\", \"#d27e4e\", \"#b01622\", \"#d43b45\", '#DCA825', '#9b6e00') # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n  ) +\n  # scale_color_identity() +  # correctly apply the country color to the label's font\n  # coord_cartesian(xlim = c(2002, 2024.5)) +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  # add persistent white circle that follows mouse (via selection); one to cover all data points is simply assigning data to country.year combo\n  geom_point_interactive(\n    data = all_series,\n    aes(\n      x = year,\n      y = value,\n      group = paste0(year, country_name)\n    ),\n    shape = 21,\n    size = 0.4,\n    stroke = 1,\n    fill = 'white',\n    color = \"grey85\",\n    alpha = 0,\n    show.legend = FALSE\n  ) \n\n\nData Visualization\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\np_ggraph_ready &lt;- \n  p_interactive + \n  theme_minimal() +  \n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.position = 'none'\n  ) + \n  labs(\n    caption = caption_text\n  ) + \n  theme(\n    plot.caption = element_markdown(\n      lineheight = 1.2,\n      hjust = -0.01,\n      margin = margin(t = 10, l = -7, r = 1),\n      halign = 0\n    ),\n    axis.text.x = element_text(margin = margin(t = -7, l = 3, b = 7, r = -3))  \n  ) +\n  geom_segment(\n    aes(x = 2002, xend = 2023, y = 0, yend = 0), \n    color = 'black', \n    linewidth = .1\n  ) + \n    geom_label_interactive(\n    data = \n      all_series |&gt; \n      bind_rows(\n        all_series |&gt;\n          slice_max(year) |&gt;\n          arrange(desc(value)) |&gt; \n          mutate(\n            country_name = str_sub(data_id, 3, 20),\n            year = 2024,\n            value = c(c(7, 5.8), c(5.7, 5.4, 5.1, 4.8, 4.5) - .3)\n            )\n        )\n     |&gt; \n      slice_max(year) |&gt; \n      mutate(year = 2023.4),\n    aes(\n      x = year,\n      y = value,\n      group = paste0(country, country_name),\n      label =  c(\"Norway\", \"Spain\", \"France\", \"Germany\", \"UK\", \"Ireland\", \"Portugal\"),\n      data_id = paste0(country, country_name)\n    ),\n    label.size = NA,\n    fill = NA,\n    color = c(\"#d43b45\", \"#b01622\", \"#487caa\", \"#9b6e00\", \"#264250\", \"#61A861\", \"#d27e4e\"),\n    size = 3.3,\n    hjust = 0,\n    vjust = -.2,\n    # fontface = 'bold',\n    inherit.aes = FALSE,\n    alpha = 1\n  ) \n\ngirafe(\n    ggobj = p_ggraph_ready,\n    options = list(\n        opts_tooltip(\n        css = \"\n        background: transparent;\n        border: none;\n        box-shadow: none;\n        font-family: sans-serif;\n        text-shadow:\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(255, 255, 255, 1);\n        line-shadow:\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(255, 255, 255, 1);\n        border-radius: none;\n        transform: translate(-50%, 20px);\n        transition: all 0.3s ease-in-out;\",\n        delay_mouseover = 300,\n        delay_mouseout = 200\n        ),\n        opts_hover(\n          css = \"stroke-width: 3; stroke-opacity: 0.9; fill-opacity: 0.9; opacity: 1; transition: all 0.3s ease-in-out;\",\n          nearest_distance = 10,\n          reactive = FALSE\n        ),\n        opts_hover_inv(\n          css = \"stroke-width: .2; stroke-opacity: 0.2; fill-opacity: 0.2; opacity: 0.4;transition: all 0.3s ease-in-out;\"\n        )\n    )\n)\n\n\n\n\n\n\nNotes on Above Plot: This graph looks deceptively simple at first glance; but was in fact by far the hardest to replicate out of all five. \nHollow Circles/Markers: I’m not sure what software Tom uses to render the interactive plots, but it was much harder than expected to replicate the persistent hollow circle marker that moves along each curve and ‘links’ the tooltip to the marker using a small vertical tick. It wasn’t for a lack of trying but I believe current ggiraph framework (I might be wrong) doesn’t natively support said functionality.\nWhite Glow around Curve Borders: Another feature I wanted to implement/match with Tom’s original is the subtle white glow around the curves. Two functions (at least) derived from packages allow for this; geom_glowline() & geom_borderline() from the ggshadow & ggborderline packages, respectively; both of which ‘get disabled’ when being called in a ggiraph framework.\nHovering on a Curve vs. a Point: Upon hovering on a curve, original attenuates the points that make up the curve to a maximum, to only display the curve (devoid of any points shown); mine, while making other curves go far in the background, doesn’t completely eliminate the points that make up the said hovered curve because both points and curve roll up to the same data_id; an added layer from the ggplot2 extension in ggiraph which links in this case said points to the curve (and country labels together). There might be a way for that uncoupling (between points and their curves) to happen after the fact, after the hover; but after trying arduously, I did not find it. Feel free to reach out or do a pull request to suggest an improvement (here or otherwise).  Having said all that, I believe the rest remains faithful to the original throughout.",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#health-service-satisfaction-and-general-prelude",
    "href": "tom-calver-article-NHS.html#health-service-satisfaction-and-general-prelude",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: Tom uses a combination of sources to make his point → while not a bottom ‘performer’; especially compared to the US, UK’s National Health Service (NHS) did not wait for the COVID crisis to show its limits and harbor increasing consumer dissatisfaction. That downward trend can be traced back to the early 2010’s; and that comes from the service running lean - too lean, among other reasons. For more detail on the sources, feel free to visit the actual article with link embedded at the top of the page in to author’s name. If you like to download the data, feel free to use urls here.\nOverall Strategy for building first plot: The data for first plot is smoothed out/interpolated data; this is usually done to ‘well smooth’ the data and delineate clearer trends over time; in this case select European countries’ survey takers’ scores on their overall satisfaction level towards their respective countries’ public health services (ESS - European Social Survey). In this case, there is an additional reason the author smoothed the data; it is to ‘complete’ the years given that the ESS is done once every two years; note that I am assuming here but it’s not an outrageous assumption to make. So in order to match that smoothing, I go with geom_smooth() from ggplot2 and keep span at default; after a few iterations; the data points (for non survey years) match highly to what Tom displays in the first graph. Finally, since the graph is interactive, I use ggiraph package to emulate said interactivity; a JS based R package that lets you add tooltips/hover/highlight upon hover/downplay non-hovered, etc. all the usual things one expects from an interactive plot; without having to build a Shiny app; which for this exercise/first plot (and the rest); would be like building a Gatling gun to aim at an ant.\nSteps taken:  While I try to be as detailed in my comments as possible; it’s still helpful to lay out the step by step process as a numbered list to get the overall chain of what each code is supposed to do:\n\nFound the source of the data from HTML Source Page; clicked on Network tab after hovering on the plot panel; refreshed the page; and found ‘dataset’ under ‘datawrapper’.\nThe data was wide in structure (from raw csv):  17 columns (1 column for year, 8 hex-coded columns with imputed/smoothed values, and 8 columns for country abbreviations with survey data for even years, NULL otherwise).\nDiscovered the hex columns and country columns didn’t align in a straightforward way. Columns were randomly ordered within each set, requiring a ranking approach rather than pairwise matching (one hex column to the symmetrical position of the country labeled column).\nImplemented a solution by sorting satisfaction scores per year, which helped group values by country through proximity of their scores. This approach works well since the values are interpolated through smoothing, making them very close to one another from row to row. This might not work in other cases, but it does here.\nCombined two sorted datasets: year + hex columns, and year + country columns to create a properly aligned mapping, joined facts data (with scores/values) on newly created mapped long datasets (converted from wide- almost always much harder to work with) to then finalize the dataset for visualization. More detail on ‘finalized the dataset’ can be found in the comments of the actual code.  Prepared the final clean dataset for interactive plotting with ggiraph.",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#data-pull",
    "href": "tom-calver-article-NHS.html#data-pull",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Data Pull",
    "text": "Data Pull\n\n Show the codeb &lt;- ChromoteSession$new()\nb$Page$navigate(\"https://www.thetimes.com/comment/columnists/article/we-keep-pumping-money-into-the-nhs-is-it-good-value-blq8bxc39\")\n\n$frameId\n[1] \"DFDB3706C2FB7D09C51CD504B64201EC\"\n\n$loaderId\n[1] \"CDE89B18679160688C55039F366C9072\"\n\n Show the codeSys.sleep(6) # allow some time for dynamic content to render\n\n# extract all iframe srcs (joined by || in this case)\niframes_html &lt;- b$Runtime$evaluate(\"Array.from(document.querySelectorAll('iframe')).map(el =&gt; el.src).join('||')\")$result$value\n# split and filter valid Datawrapper url's\nchart_urls &lt;- str_split(iframes_html, \"\\\\|\\\\|\")[[1]] |&gt;\n  str_subset(\"^https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+$\")\n\nall_data &lt;- purrr::map_dfr(chart_urls, function(url) {  \n  message(\"Navigating to: \", url)\n  b$Page$navigate(url)\n  Sys.sleep(3)\n  \n  html &lt;- b$Runtime$evaluate(\"document.documentElement.outerHTML\")$result$value\n  \n  # match visible chart values if any\n  pattern &lt;- 'aria-datavariables=\"year,\\\\s*([A-Z]+)\".*?aria-datavalues=\"([0-9]{4}),\\\\s*([0-9.]+)\"'\n  matches &lt;- str_match_all(html, pattern)[[1]]\n  \n  # match dataset.csv url as well \n  csv_pattern &lt;- \"https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+/dataset\\\\.csv\"\n  csv_link &lt;- str_extract(html, csv_pattern)\n  if (is.na(csv_link)) {\n    csv_link &lt;- str_glue(\"{url}/dataset.csv\")\n  }\n  \n  tibble(\n    chart_url = url,\n    country = if(nrow(matches)) matches[, 2] else NA,\n    year = if(nrow(matches)) as.integer(matches[, 3]) else NA,\n    value = if(nrow(matches)) as.numeric(matches[, 4]) else NA,\n    dataset_csv = csv_link\n  )\n})\n\n# add a custom gt boilerplate -from {gt} package (great tables)-to reduce code redundancy (having to copy/paste same chunks of code every # time we turn a tibble into a gt object)\ngt_nyt_custom &lt;- function(x, title = '', subtitle = '', first_10_rows_only = TRUE){\n  \n  x &lt;- x |&gt; clean_names(case = 'title')\n  numeric_cols &lt;- x |&gt; select(where(is.double)) |&gt; names()\n  integer_cols &lt;- x |&gt; select(where(is.integer)) |&gt; names()\n  \n  title_fmt &lt;- if(title != \"\") glue::glue(\"**{title}**\") else \"\"\n  subtitle_fmt &lt;- if(subtitle != \"\") glue::glue(\"*{subtitle}*\") else \"\"\n  \n  x |&gt;\n    (\\(x) if (first_10_rows_only) slice_head(x, n = 10) else x)() |&gt;\n    gt() |&gt; \n    tab_header(\n      title = md(title_fmt),\n      subtitle = md(subtitle_fmt)\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#333333')\n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#CC6600', weight = 'bold')\n      ),\n      locations = cells_column_labels(everything())\n    ) |&gt; \n    fmt_number(\n      columns = c(numeric_cols),\n      decimals = 1\n    ) |&gt; \n    fmt_number(\n      columns = c(integer_cols),\n      decimals = 0\n    ) |&gt; \n    tab_options(\n      table.font.names = c(\"Merriweather\", \"Georgia\", \"serif\"),\n      table.font.size = 14,\n      heading.title.font.size = 18,\n      heading.subtitle.font.size = 14,\n      column_labels.font.weight = \"bold\",\n      column_labels.background.color = \"#eeeeee\",\n      table.border.top.color = \"#dddddd\",\n      table.border.bottom.color = \"#dddddd\",\n      data_row.padding = px(6),\n      row.striping.include_table_body = TRUE,\n      row.striping.background_color = \"#f9f9f9\"\n    )\n  \n}\nall_data |&gt; \n  gt_nyt_custom() |&gt; \n  tab_header(\n    title = md(\"**Chart Data Summary**\"),\n    subtitle = md(\"*Extracted from embedded datawrapper from the HTML Source page*\")\n  )\n\n\n\n\n\n\nChart Data Summary\n\n\nExtracted from embedded datawrapper from the HTML Source page\n\n\nChart Url\nCountry\nYear\nValue\nDataset Csv\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,002\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,004\n4.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,006\n4.4\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,008\n4.6\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,010\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,012\n5.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,014\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,016\n6.2\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,018\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,020\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#health-service-and-general-prelude",
    "href": "tom-calver-article-NHS.html#health-service-and-general-prelude",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: Tom uses a combination of sources to make his point → while not a bottom ‘performer’; especially compared to the US, UK’s National Health Service (NHS) did not wait for the COVID crisis to show its limits and harbor increasing consumer dissatisfaction. That downward trend can be traced back to the early 2010’s; and that comes from the service running lean - too lean - but also inefficiently,  For more detail on the sources, feel free to visit the actual article with link embedded at the top of the page in the author’s name. If you like to download the data, feel free to use urls here.\nOverall Strategy for building first plot: The data for first plot is smoothed out/interpolated data; this is usually done to ‘well smooth’ the data and delineate clearer trends over time; in this case select European countries’ survey takers’ scores on their overall satisfaction level towards their respective countries’ public health services (ESS - European Social Survey). In this case, there is an additional reason the author smoothed the data; it is to ‘complete’ the years given that the ESS is done once every two years; note that I am assuming here but it’s not an outrageous assumption to make. So in order to match that smoothing, I go with geom_smooth() from ggplot2 and keep span at default; after a few iterations; the data points (for non survey years) match highly to what Tom displays in the first graph. Finally, since the graph is interactive, I use ggiraph package to emulate said interactivity; a JS based R package that lets you add tooltips/hover/highlight upon hover/downplay non-hovered, etc. all the usual things one expects from an interactive plot; without having to build a Shiny app; which for this exercise/first plot (and the rest); would be like building a Gatling gun to aim at an ant.\nSteps taken:  While I try to be as detailed in my comments as possible; it’s still helpful to lay out the step by step process as a numbered list to get the overall chain of what the code is supposed to do on a high level - without having to go into the nitty gritty- the comments in the code chunks and in that regard should hopefully help:\n\nFound the source of the data from HTML Source Page; clicked on Network tab after hovering on the plot panel; refreshed the page; and found ‘dataset’ under ‘datawrapper’.\nThe data was wide in structure (from raw csv):  17 columns (1 column for year, 8 hex-coded columns with imputed/smoothed values, and 8 columns for country abbreviations with survey data for even years, NULL otherwise).\nDiscovered the hex columns and country columns didn’t align in a straightforward way. Columns were randomly ordered within each set, requiring a ranking approach rather than pairwise matching (one hex column to the symmetrical position of the country labeled column).\nImplemented a solution by sorting satisfaction scores per year, which helped group values by country through proximity of their scores. This approach works well since the values are interpolated through smoothing, making them very close to one another from row to row. This might not work in other cases, but it does here.\nCombined two sorted datasets: year + hex columns, and year + country columns to create a properly aligned mapping, joined facts data (with scores/values) on newly created mapped long datasets (converted from wide- almost always much harder to work with) to then finalize the dataset for visualization. More detail on ‘finalized the dataset’ can be found in the comments of the actual code.  Prepared the final clean dataset for interactive plotting with ggiraph.",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "test_qmd.html",
    "href": "test_qmd.html",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: Tom uses a combination of sources to make his point → while not a bottom ‘performer’; especially compared to the US, UK’s National Health Service (NHS) did not wait for the COVID crisis to show its limits and harbor increasing consumer dissatisfaction. That downward trend can be traced back to the early 2010’s; and that comes from the service running lean - too lean, among other reasons. For more detail on the sources, feel free to visit the actual article with link embedded at the top of the page in to author’s name. If you like to download the data, feel free to use urls here.\nOverall Strategy for building first plot: The data for first plot is smoothed out/interpolated data; this is usually done to ‘well smooth’ the data and delineate clearer trends over time; in this case select European countries’ survey takers’ scores on their overall satisfaction level towards their respective countries’ public health services (ESS - European Social Survey). In this case, there is an additional reason the author smoothed the data; it is to ‘complete’ the years given that the ESS is done once every two years; note that I am assuming here but it’s not an outrageous assumption to make. So in order to match that smoothing, I go with geom_smooth() from ggplot2 and keep span at default; after a few iterations; the data points (for non survey years) match highly to what Tom displays in the first graph. Finally, since the graph is interactive, I use ggiraph package to emulate said interactivity; a JS based R package that lets you add tooltips/hover/highlight upon hover/downplay non-hovered, etc. all the usual things one expects from an interactive plot; without having to build a Shiny app; which for this exercise/first plot (and the rest); would be like building a Gatling gun to aim at an ant.\nSteps taken:  While I try to be as detailed in my comments as possible; it’s still helpful to lay out the step by step process as a numbered list to get the overall chain of what each code is supposed to do:\n\nFound the source of the data from HTML Source Page; clicked on Network tab after hovering on the plot panel; refreshed the page; and found ‘dataset’ under ‘datawrapper’.\nThe data was wide in structure (from raw csv):  17 columns (1 column for year, 8 hex-coded columns with imputed/smoothed values, and 8 columns for country abbreviations with survey data for even years, NULL otherwise).\nDiscovered the hex columns and country columns didn’t align in a straightforward way. Columns were randomly ordered within each set, requiring a ranking approach rather than pairwise matching (one hex column to the symmetrical position of the country labeled column).\nImplemented a solution by sorting satisfaction scores per year, which helped group values by country through proximity of their scores. This approach works well since the values are interpolated through smoothing, making them very close to one another from row to row. This might not work in other cases, but it does here.\nCombined two sorted datasets: year + hex columns, and year + country columns to create a properly aligned mapping, joined facts data (with scores/values) on newly created mapped long datasets (converted from wide- almost always much harder to work with) to then finalize the dataset for visualization. More detail on ‘finalized the dataset’ can be found in the comments of the actual code.  Prepared the final clean dataset for interactive plotting with ggiraph."
  },
  {
    "objectID": "test_qmd.html#health-service-and-general-prelude",
    "href": "test_qmd.html#health-service-and-general-prelude",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: Tom uses a combination of sources to make his point → while not a bottom ‘performer’; especially compared to the US, UK’s National Health Service (NHS) did not wait for the COVID crisis to show its limits and harbor increasing consumer dissatisfaction. That downward trend can be traced back to the early 2010’s; and that comes from the service running lean - too lean, among other reasons. For more detail on the sources, feel free to visit the actual article with link embedded at the top of the page in to author’s name. If you like to download the data, feel free to use urls here.\nOverall Strategy for building first plot: The data for first plot is smoothed out/interpolated data; this is usually done to ‘well smooth’ the data and delineate clearer trends over time; in this case select European countries’ survey takers’ scores on their overall satisfaction level towards their respective countries’ public health services (ESS - European Social Survey). In this case, there is an additional reason the author smoothed the data; it is to ‘complete’ the years given that the ESS is done once every two years; note that I am assuming here but it’s not an outrageous assumption to make. So in order to match that smoothing, I go with geom_smooth() from ggplot2 and keep span at default; after a few iterations; the data points (for non survey years) match highly to what Tom displays in the first graph. Finally, since the graph is interactive, I use ggiraph package to emulate said interactivity; a JS based R package that lets you add tooltips/hover/highlight upon hover/downplay non-hovered, etc. all the usual things one expects from an interactive plot; without having to build a Shiny app; which for this exercise/first plot (and the rest); would be like building a Gatling gun to aim at an ant.\nSteps taken:  While I try to be as detailed in my comments as possible; it’s still helpful to lay out the step by step process as a numbered list to get the overall chain of what each code is supposed to do:\n\nFound the source of the data from HTML Source Page; clicked on Network tab after hovering on the plot panel; refreshed the page; and found ‘dataset’ under ‘datawrapper’.\nThe data was wide in structure (from raw csv):  17 columns (1 column for year, 8 hex-coded columns with imputed/smoothed values, and 8 columns for country abbreviations with survey data for even years, NULL otherwise).\nDiscovered the hex columns and country columns didn’t align in a straightforward way. Columns were randomly ordered within each set, requiring a ranking approach rather than pairwise matching (one hex column to the symmetrical position of the country labeled column).\nImplemented a solution by sorting satisfaction scores per year, which helped group values by country through proximity of their scores. This approach works well since the values are interpolated through smoothing, making them very close to one another from row to row. This might not work in other cases, but it does here.\nCombined two sorted datasets: year + hex columns, and year + country columns to create a properly aligned mapping, joined facts data (with scores/values) on newly created mapped long datasets (converted from wide- almost always much harder to work with) to then finalize the dataset for visualization. More detail on ‘finalized the dataset’ can be found in the comments of the actual code.  Prepared the final clean dataset for interactive plotting with ggiraph."
  },
  {
    "objectID": "test_qmd.html#health-service-satisfaction",
    "href": "test_qmd.html#health-service-satisfaction",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Health Service Satisfaction",
    "text": "Health Service Satisfaction\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\n# install pacman if it's not already installed\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n# install.packages(\"gdtools\", type = \"source\")\n\n## NOTE; potential (might not be needed) steps on mac for registering then loading Roboto font into Quarto below\n\n## from terminal/shell\n# brew install cairo fontconfig freetype pkg-config\n# export PKG_CONFIG_PATH=\"/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig\"\n# export PKG_CFLAGS=\"-I/opt/homebrew/include\"\n# export PKG_LIBS=\"-L/opt/homebrew/lib\"\n\n## then from Rstudio\n# install.packages(\"gdtools\", type = \"source\")\n\n\npacman::p_load(\n  xml2,\n  downlit,\n  gdtools,\n  tidyverse,\n  quarto,\n  chromote,\n  here,\n  tidycensus,\n  janitor,\n  purrr,\n  ggtext,\n  ggiraph,\n  gfonts,\n  showtext,\n  ggborderline,\n  shiny,\n  gt,\n  rsvg,\n  magick,\n  stringr,\n  ggimage\n)\n\nshowtext::showtext_auto(enable = FALSE)\n\n# Load fonts properly - using simpler approach\nlibrary(systemfonts)\nlibrary(showtext)\n\n# roboto font properly\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n# ggplot theme set\ntheme_set(\n  theme_minimal() +\n  theme(text = element_text(family = \"roboto\", \"Roboto\"))\n)\n\n\nWhile above took care of importing required libraries and setting general options such as plot theme and text font to be used; below is the start of data related tasks; from initial pull, to wrangling, to finally output the visualizations.\nData Pull\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|eval: false\n\ninvisible({\n  b &lt;- ChromoteSession$new()\n  b$Page$navigate(\"https://www.thetimes.com/comment/columnists/article/we-keep-pumping-money-into-the-nhs-is-it-good-value-blq8bxc39\")\n  Sys.sleep(3) # allow some time for dynamic content to render\n})\n\n# extract all iframe srcs (joined by || in this case)\niframes_html &lt;- b$Runtime$evaluate(\"Array.from(document.querySelectorAll('iframe')).map(el =&gt; el.src).join('||')\")$result$value\n# split and filter valid Datawrapper url's\nchart_urls &lt;- str_split(iframes_html, \"\\\\|\\\\|\")[[1]] |&gt;\n  str_subset(\"^https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+$\")\n\nall_data &lt;- purrr::map_dfr(chart_urls, function(url) {  \n  message(\"Navigating to: \", url)\n  b$Page$navigate(url)\n  Sys.sleep(3)\n  \n  html &lt;- b$Runtime$evaluate(\"document.documentElement.outerHTML\")$result$value\n  \n  # match visible chart values if any\n  pattern &lt;- 'aria-datavariables=\"year,\\\\s*([A-Z]+)\".*?aria-datavalues=\"([0-9]{4}),\\\\s*([0-9.]+)\"'\n  matches &lt;- str_match_all(html, pattern)[[1]]\n  \n  # match dataset.csv url as well \n  csv_pattern &lt;- \"https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+/dataset\\\\.csv\"\n  csv_link &lt;- str_extract(html, csv_pattern)\n  if (is.na(csv_link)) {\n    csv_link &lt;- str_glue(\"{url}/dataset.csv\")\n  }\n  \n  tibble(\n    chart_url = url,\n    country = if(nrow(matches)) matches[, 2] else NA,\n    year = if(nrow(matches)) as.integer(matches[, 3]) else NA,\n    value = if(nrow(matches)) as.numeric(matches[, 4]) else NA,\n    dataset_csv = csv_link\n  )\n})\n\n# add a custom gt boilerplate -from {gt} package (great tables)-to reduce code redundancy (having to copy/paste same chunks of code every # time we turn a tibble into a gt object)\ngt_nyt_custom &lt;- function(x, title = '', subtitle = '', first_10_rows_only = TRUE){\n  \n  x &lt;- x |&gt; clean_names(case = 'title')\n  numeric_cols &lt;- x |&gt; select(where(is.double)) |&gt; names()\n  integer_cols &lt;- x |&gt; select(where(is.integer)) |&gt; names()\n  \n  title_fmt &lt;- if(title != \"\") glue::glue(\"**{title}**\") else \"\"\n  subtitle_fmt &lt;- if(subtitle != \"\") glue::glue(\"*{subtitle}*\") else \"\"\n  \n  x |&gt;\n    (\\(x) if (first_10_rows_only) slice_head(x, n = 10) else x)() |&gt;\n    gt() |&gt; \n    tab_header(\n      title = md(title_fmt),\n      subtitle = md(subtitle_fmt)\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#333333')\n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#CC6600', weight = 'bold')\n      ),\n      locations = cells_column_labels(everything())\n    ) |&gt; \n    fmt_number(\n      columns = c(numeric_cols),\n      decimals = 1\n    ) |&gt; \n    fmt_number(\n      columns = c(integer_cols),\n      decimals = 0\n    ) |&gt; \n    tab_options(\n      table.font.names = c(\"Merriweather\", \"Georgia\", \"serif\"),\n      table.font.size = 14,\n      heading.title.font.size = 18,\n      heading.subtitle.font.size = 14,\n      column_labels.font.weight = \"bold\",\n      column_labels.background.color = \"#eeeeee\",\n      table.border.top.color = \"#dddddd\",\n      table.border.bottom.color = \"#dddddd\",\n      data_row.padding = px(6),\n      row.striping.include_table_body = TRUE,\n      row.striping.background_color = \"#f9f9f9\"\n    )\n  \n}\n\n\nMetadata\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\n# reveal dataset urls/csvs\nall_data |&gt;\n  count(\n    url = chart_url, download_link = dataset_csv\n  ) |&gt;\n  select(-n) |&gt;\n  gt_nyt_custom(\n    title = 'Dataset Ids'\n  ) |&gt;\n  cols_label(\n    Url = \"Plot URL\",\n    `Download Link` = \"Link to CSV\"\n  ) |&gt; \n  tab_footnote(\n    \"In the event you download the links yourself and run your own script,\n    the third and last should be treated as tsv files, otherwise csv's\"\n  ) \n\n\n\n\n\n\nDataset Ids\n\n\n\n\n\nPlot URL\nLink to CSV\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Bxhol/4\nhttps://datawrapper.dwcdn.net/Bxhol/4/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/JH3Qn/1\nhttps://datawrapper.dwcdn.net/JH3Qn/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Mc3q2/2\nhttps://datawrapper.dwcdn.net/Mc3q2/2/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/eXQPs/1\nhttps://datawrapper.dwcdn.net/eXQPs/1/dataset.csv\n\n\n\nIn the event you download the links yourself and run your own script, the third and last should be treated as tsv files, otherwise csv's\n\n\n\n\n\nData Sample\n\n Show the code# reveal data sample for year 2004 as an example\nall_data |&gt; \n  filter(year == 2004) |&gt;\n  select(2:last_col()) |&gt; \n  gt_nyt_custom() |&gt; \n  tab_header(\n    title = md(\"**Chart Data Summary**\"),\n    subtitle = md(\"*Extracted from embedded datawrapper in the HTML*\")\n  )\n\n\n\n\n\n\nChart Data Summary\n\n\nExtracted from embedded datawrapper in the HTML\n\n\nCountry\nYear\nValue\nDataset Csv\n\n\n\n\nDE\n2,004\n4.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nPT\n2,004\n3.5\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nIE\n2,004\n4.1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nNO\n2,004\n5.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nFR\n2,004\n5.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nES\n2,004\n5.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nGB\n2,004\n5.4\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\n\n\n\n\nData Wrangling\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\n# for easier referencing, assign file types (csv where appropriate, tsv otherwise) \nfile_info &lt;- tibble(\n  path = unique(all_data$dataset_csv),\n  name = c(\"health_service_sat:csv\", \"value_for_money:csv\", \n           \"room_to_improve:tsv\", \"barely_beds:csv\", \"budget_breakdowns:tsv\")\n  ) |&gt; \n  separate(\n    name, into = c('dataset_name', 'file_type'), sep = \"\\\\:\"\n  )\n\n# loop thru datasets, read them in, and then assign them to the global environment\ninvisible({\n  file_info |&gt;\n    mutate(\n      data = pmap(\n        list(path, file_type),\n        \\(path, file_type) if(file_type == \"csv\") read_csv(path) else read_tsv(path)\n      )\n    ) |&gt;\n    select(dataset_name, data) |&gt;\n    deframe() |&gt;\n    list2env(envir = .GlobalEnv)\n}\n)\n\n# set country 'switch'; so that tooltip can reflect full country name (spelled out) accordingly for imputed values (non survey years smoothed values)\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\", \n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n  )\ncountry_label_tibble &lt;- c(\n    NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n    FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n  ) |&gt; \n  enframe()\n\n# clean the first dataset: health_service_sat, to prep for plotting.\n# it has 17 columns: 1 year column, 8 hex-coded columns (imputed/smoothed values), \n# and 8 columns for country abbreviations (survey data, even years).\n# initially assumed hex columns align pairwise with country columns; but it was not the case.s\n# columns are randomly ordered within each set, so we use ranking instead.\n# sorting by satisfaction score per year helps group values by country (via proximity of their scores).\n# we then combine two sorted datasets: year + hex columns, and year + country columns\n# note that this might not always be the go-to solution but in this case, \n# and given that the values are interpolated (through smoothing), we can safely bet that the values will be very close to one another\n# from one row to the next\n\nhex_to_country_mapping &lt;- health_service_sat |&gt; \n  pivot_longer(\n    -year\n  ) |&gt; \n  slice_max(year) |&gt; \n  filter(\n    str_starts(name, '\\\\#') & !str_detect(name, 'A9FF') # looking at last values from article curves, we can infer this is Italy so \n  ) |&gt; \n  arrange(value) |&gt; \n  bind_cols(\n    health_service_sat |&gt; \n      pivot_longer(\n        -year\n      ) |&gt; \n      slice_max(year) |&gt; \n      filter(\n        !str_starts(name, '\\\\#') & !str_detect(name, 'IT')\n      ) |&gt; \n      arrange(value)\n  ) |&gt; \n  select(\n    years = 1, hex_code = 2, second_to_last_val = 3, \n    years_max = 4, country_abb = 5, last_val = 6\n  ) |&gt; \n  mutate(\n    val_diff = abs(last_val - second_to_last_val)\n  ) |&gt; \n  arrange(val_diff) |&gt; \n  select(\n    hex_code, country_abb\n  ) |&gt; \n  # also join to country_label_tibble to get full country names for future use\n  inner_join(\n    country_label_tibble, \n    join_by(country_abb == name)\n    )\n# now we can map the randomly assigned hex value labels to the actual columns/countries, and create 8 series,\n# one for each country\nhealth_service_sat &lt;- health_service_sat |&gt; \n  pivot_longer(\n    -year\n  ) |&gt; \n  left_join(\n    hex_to_country_mapping, \n    join_by(name == hex_code)\n  ) |&gt;\n  mutate(\n    country_abb = coalesce(country_abb, name)\n  ) |&gt; \n  inner_join(\n    hex_to_country_mapping, \n    join_by(country_abb == country_abb)\n  ) |&gt; \n  select(\n    year, \n    country_abb,\n    country = value,\n    value = value.x\n  ) |&gt; \n  drop_na() \n\nextract_smooth_build &lt;- function(tibble, country = 'GB'){\n  \n  initial_pull &lt;- \n    all_data |&gt; \n    filter(country %in% {{country}}) |&gt; \n    ggplot(aes(x = year, y = value)) + \n    geom_smooth(method = 'loess')\n  \n  # fetch country abbs for ids, and ranges\n  country_ids &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n  country_max &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; max()\n  country_min &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; min()\n  \n  # access smoothed, include actual years to imputed/smoothed points, cap at min max per country/series\n  # and keep only columns of interest\n  smoothed_df &lt;- ggplot_build(initial_pull)[[1]] |&gt; as.data.frame() |&gt; as_tibble()\n  \n  complete_series &lt;- \n    smoothed_df |&gt; \n    select(year = x, value = y) |&gt; \n    mutate(country := country) |&gt; \n    bind_rows(\n      all_data |&gt; \n        filter(country == {{country}}) |&gt; \n        select(year, value) \n    ) |&gt; \n    mutate(\n      year = as.integer(year),\n      year_val_tie_breaker = if_else(is.na(country), 1, 0)\n    ) |&gt; \n    group_by(country, year) |&gt; \n    arrange(desc(year_val_tie_breaker)) |&gt; \n    mutate(ties = row_number()) |&gt; \n    filter(\n      if (n() &lt; 4) TRUE else ties + year_val_tie_breaker != 1 # make sure every year/country combo gets same no. of obs\n      # and that original values (only in the event a given year is even or survey year) take precedence over smoothed ones\n      # otherwise just pass/do nothing\n    ) |&gt; \n    ungroup() |&gt; \n    # ensuer smoothed values don't go below/beyond lower/upper bounds\n    mutate(\n      value = pmin(pmax(value, country_min), country_max)\n    ) |&gt; \n    arrange(year) |&gt; \n    fill(country, .direction = 'downup') |&gt;  # since every year starts with \n    select(year, country, value) \n  \n  return(complete_series)\n  \n}\n# country vector to loop thru\ncountry_name_abbs &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n# combine all series\nall_series &lt;- map_dfr(.x = country_name_abbs, ~extract_smooth_build(tibble = all_data, country = .x))\n\n# set contry 'switch; so that tooltip can change accordingly for odd numebred years\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n)\n\n# adding year as continuous variable (decimal years) so that points don't overlap but strech over whithin a year to year span\nall_series &lt;- \n  all_series |&gt; \n  mutate(\n    rn = row_number(), .by = c(country, year)\n  ) |&gt; \n  mutate(\n    decimal_year = if_else(rn == 1, year, year + rn / 8)\n  ) |&gt; \n  mutate(\n    year = decimal_year\n  ) |&gt; \n  select(-decimal_year)\n\n# also join on country full name mapping so we can generate a consolidate data_id that links the aestethics together (for interactive simultaneus highlighting, etc.)\nall_series &lt;- \n  all_series |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), \n    join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values)\n  ) |&gt; \n  select(-values) |&gt; \n  mutate(\n    country_name = str_sub(data_id, 3, 20)\n  )\n\n# also generate visible (and non visible years by exclusion) as they don't visually get the same properties; visible (even numbered years) get the country abb as a tooltip (and larger markers/circles), \n# while 'invisible' ones (odd numbered years along with year 2023) get their country names fully spelled out and get transparent marker/circle fill\nvisible_years &lt;- c(seq(2002, 2022, 2), 2023)\n\nvisible_points &lt;- \n  all_series |&gt; \n  filter(round(year) %in% visible_years & floor(year) == ceiling(year))\ninvisible_points &lt;- all_series |&gt; \n  filter(!round(year) %in% visible_years & floor(year) != ceiling(year))\n\n# final touchups\n# set color mappings\ncolor_map &lt;- expr(\n  case_when(\n    country %in% c('NO', 'Norway') ~ '#d43b45',\n    country %in% c('DE', 'Germany') ~ '#DCA825',\n    country %in% c('ES', 'Spain') ~ '#b01622',\n    country %in% c('FR', 'France') ~ '#487caa',\n    country %in% c('GB', 'UK') ~ '#264250',\n    country %in% c('IE', 'Ireland') ~ '#61A861',\n    country %in% c('PT', 'Portugal') ~ '#d27e4e',\n    TRUE ~ '#000000'\n  )\n)\n\n# set tooltip mappings\ntooltip_map &lt;- expr(\n  case_when(\n    !year %in% c(seq(2002, 2022, 2), 2023) & country %in% names(country_labels) ~ country_labels[country],\n    TRUE ~ country\n  )\n)\n\nlabel_data &lt;-\n  all_series |&gt;\n  group_by(country) |&gt;\n  arrange(desc(year)) |&gt; \n  filter(row_number() == 1) |&gt;\n  mutate(\n    y_offset = case_when(\n      country == 'ES' ~ value + .1,\n      country == 'FR' ~ value +  0,\n      country == 'DE' ~ value - .05,\n      country == 'GB' ~ value - .1,\n      country == 'PT' ~ value + .2,\n      TRUE ~ value)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    ),\n    country_color = case_when(\n      country %in% c(\"DE\", 'Germany') | country_name %in% 'Germany' ~ \"#9b6e00\",  # override DE/Germany label color here since curve color is different than country label color (only one)\n      country %in% c('NO', 'Norway') ~ '#d43b45',\n      country %in% c('ES', 'Spain') ~ '#b01622',\n      country %in% c('FR', 'France') ~ '#487caa',\n      country %in% c('GB', 'UK') ~ '#264250',\n      country %in% c('IE', 'Ireland') ~ '#61A861',\n      country %in% c('PT', 'Portugal') ~ '#d27e4e',\n      TRUE ~ '#000000'\n    )\n  ) |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values),\n    country = if_else(country == 'DE', 'Germany', country)\n  )\n\np &lt;- \n  all_series |&gt; distinct() |&gt; \n  ggplot(\n    aes(x = year, \n        y = value, \n        group = data_id,\n        color = country)\n  ) +\n  scale_color_manual(\n    values = c(\n      'NO' = \"#d43b45\",\n      'DE' = '#DCA825',\n      'ES' = '#b01622',\n      'FR' = '#487caa',\n      'GB' = '#264250',\n      'IE' = '#61A861',\n      'PT' = '#d27e4e')\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 7, 1), limits = c(0, 8)\n    ) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2023),\n    expand = c(0, 0.1)\n  ) + \n  theme(\n    legend.position = 'none',\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  geom_smooth_interactive(\n    data = all_series,\n    aes(x = year, y = value, data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE,\n    linewidth = 3.5, # thick line acts as the 'border'\n    alpha = 1,\n    show.legend = FALSE,\n    color = \"white\"\n  ) +\n  # colored interactive smooth line\n  geom_smooth_interactive(\n    data = all_series |&gt; filter(!country %in% 'IE'),\n    aes(data_id = paste0(country, country_name)),\n    method = \"loess\", \n    se = FALSE, \n    linewidth = 0.9, \n    fill = NA,\n    show.legend = FALSE\n  ) +\n  geom_smooth_interactive(\n    data = all_series |&gt; filter(country %in% 'IE'),\n    aes(data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE, \n    linewidth = 0.9, \n    fill = NA, \n    show.legend = FALSE\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 7, 1), limits = c(0, 8)\n    ) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2024),\n    expand = c(0, 0.1)\n  ) +\n  labs(\n    x = NULL,\n    y = NULL\n  ) +\n  # final touchoups before interactive rendering thru girafe()\n  theme(\n    panel.spacing = unit(20, 'cm'),\n    plot.margin = margin(l = 5, b = 10), # leave some space/margin at the bottom for caption 'room to breathe'\n    axis.text = element_text(face = \"bold\"), # axis tick labels\n    strip.text = element_text(face = \"bold\"), # facet labels\n    panel.grid.major.x = element_blank(),\n    axis.text.x = element_text(margin = margin(b = 9, t = -9)),\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    axis.ticks.x = element_blank()\n  ) +\n  geom_segment(aes(x = 2002, xend = 2023, y = 0, yend = 0), color = 'black') \n\np_interactive &lt;- p +\n  geom_point_interactive(\n    data = visible_points,\n    aes(\n      x = year,\n      y = value, \n      color = country,\n      data_id = paste0(country, country_name)\n    ),\n    alpha = 0.1, fill = 'white', show.legend = FALSE\n  ) +\n  geom_point_interactive(\n    data = \n      all_series |&gt; \n      mutate(\n        point_size = if_else(country %in% c('NO', 'Norway', 'PT', 'Portugal'), 3, 1.5),\n        point_stroke = point_size\n      ),\n    aes(\n      x = year, \n      y = value,\n      data_id = paste0(country, country_name),\n      tooltip = paste0(\n        \"&lt;div style='text-align:\", \n        if_else(year &lt;= 2015.250, \"left\", \"right\"), \n        \"; line-height: 1.1;'&gt;\", # tightens spacing\n        \"&lt;div style='font-weight:bold; font-size:16px; color:\",\n        if_else(country_name == \"Germany\", \"#9b6e00\", eval(color_map)), \n        \";'&gt;\", \n        eval(tooltip_map), \n        \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(year, 0), \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(value, 2), \"&lt;/div&gt;\",\n        \"&lt;/div&gt;\"\n      )\n    ),\n    color = 'white',\n    fill = 'white', \n    shape = 21, \n    alpha = 0\n  ) +\n  geom_rect(\n    inherit.aes = FALSE,\n    aes(xmin = 2024, xmax = Inf, ymin = -Inf, ymax = Inf),\n    color = NA, \n    fill = \"white\"\n  ) +\n  geom_label_interactive(\n    data = all_series |&gt; slice_max(year) |&gt; mutate(country_name = str_sub(data_id, 3, 20)),\n    aes(\n      x = year,\n      y = value,\n      group = paste0(country, country_name),\n      label = country_name,\n      data_id = paste0(country, country_name)\n    ),\n    label.size = NA,\n    fill = NA,\n    size = 3.2,\n    hjust = 0,\n    fontface = 'bold',\n    inherit.aes = TRUE,\n    alpha = 1\n  ) +\n  scale_color_manual(\n    breaks = c(\"GB\", \"FR\", \"IE\", \"PT\", \"ES\", \"NO\", 'DE', 'Germany'), # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n    values = c(\"#264250\", \"#487caa\", \"#61A861\", \"#d27e4e\", \"#b01622\", \"#d43b45\", '#DCA825', '#9b6e00') # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n  ) +\n  # scale_color_identity() +  # correctly apply the country color to the label's font\n  # coord_cartesian(xlim = c(2002, 2024.5)) +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  # add persistent white circle that follows mouse (via selection); one to cover all data points is simply assigning data to country.year combo\n  geom_point_interactive(\n    data = all_series,\n    aes(\n      x = year,\n      y = value,\n      group = paste0(year, country_name)\n    ),\n    shape = 21,\n    size = 0.4,\n    stroke = 1,\n    fill = 'white',\n    color = \"grey85\",\n    alpha = 0,\n    show.legend = FALSE\n  ) \n\np_ggraph_ready &lt;- \n  p_interactive + \n  theme_minimal() +  \n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    legend.position = 'none'\n  ) + \n  labs(\n    caption = NULL\n  )\n\np_ggraph_ready\n\n\n\n\n\n\n\nData Visualization\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\n# render interactive plot thru girafe() engine\ngirafe(\n    ggobj = p_ggraph_ready,\n    options = list(\n        opts_tooltip(\n        css = \"\n        background: transparent;\n        border: none;\n        box-shadow: none;\n        font-family: sans-serif;\n        text-shadow:\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(234, 255, 255, 1),\n        0 0 4px rgba(255, 255, 255, 1);\n        border-radius: none;\n        transform: translate(-50%, 20px);\n        transition: all 0.2s ease-in-out;\",\n        delay_mouseover = 300,\n        delay_mouseout = 500\n        ),\n        opts_hover(\n          css = \"stroke-width: 3; stroke-opacity: 0.9; fill-opacity: 0.9; opacity: 1;\",\n          nearest_distance = 30,\n          reactive = FALSE\n          ),\n        opts_hover_inv(\n          css = \"stroke-opacity: 0.2; fill-opacity: 0.2; opacity: 0.4;\"\n          )\n        )\n    )"
  },
  {
    "objectID": "tom-calver-article-NHS.html#value-for-money",
    "href": "tom-calver-article-NHS.html#value-for-money",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Value for Money",
    "text": "Value for Money\nData Sample\nBelow is a sample of data showing the relationship between healthcare spending and life expectancy across seven countries—five of them European, with the US and Japan representing the West and East, respectively.\nThe data excludes spending from 2020 to 2022 (but includes 2023), as the author believes COVID-related expenditures would distort the results. This seems reasonable, although one could argue that the distortion would affect all countries similarly. Still, since changes in life expectancy tend to progress at a snail’s pace, including a short-term global health crisis like the pandemic would not make sense.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\nvalue_for_money |&gt; \n  drop_na(country) |&gt;\n  filter(\n    !country %in% c('Norway', 'Australia')\n    ) |&gt;\n  arrange(year) |&gt;\n  slice_max(year) |&gt; \n  gt_nyt_custom(\n    title = 'Data Sample of Value for Money Dataset',\n    subtitle = 'Showing in this case only most recent year (2023)'\n    )\n\n\n\n\n\n\nData Sample of Value for Money Dataset\n\n\nShowing in this case only most recent year (2023)\n\n\nCountry\nYear\nSpend\nLe\nLabel\nSize\n\n\n\n\nFrance\n2,023.0\n5,014.5\n83.3\nFrance\n576.0\n\n\nGermany\n2,023.0\n5,971.3\n81.4\nGermany\n576.0\n\n\nUK\n2,023.0\n4,443.7\n81.3\nUK\n576.0\n\n\nItaly\n2,023.0\n3,248.7\n83.7\nItaly\n576.0\n\n\nCanada\n2,023.0\n5,306.8\n82.6\nCanada\n576.0\n\n\nJapan\n2,023.0\n4,873.6\n84.7\nJapan\n576.0\n\n\nUS\n2,023.0\n10,827.5\n79.3\nUS\n576.0\n\n\n\n\n\n\nData Visualization\nNotes on the plot: Overall, I really liked this plot, and its replication. If I am being nitpicky, I am not a fan of the US values going outside of the plot panel (for older years; first three years); but that’s the only negative thing I have to say honestly about this plot. So other than that, I think this is a powerful visualization that has the merit, among others, to clearly display essentially how well/intelligently does a country allocate funds do health as a service.  One thing I couldn’t quite replicate is the idea is the ‘go to back’ country labels of non-hovered elements, which I can’t really explain since the data_id is not shared from country to country and each country is unique; so while values of non hovered countries fade maximally into the white background (so this part works); country labels fail to do so; this might be a bug from the package and I might open an issue through github to shed light on said bug. I also like the red highlighting action that red fills “UK”in the title with the white color font in bold. It provides instantly where the country of focus should/will be. In R, one way to apply that customization is by using element_markdown() function from the ggtext package - which can read in css as argument, in this case to wrap the word “UK” in css to indicate both color, fill, and font face. Overall, I believe below plot remains highly faithful to the original.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\ntheme_set_custom()\n\ndata &lt;- \n  value_for_money |&gt; \n  drop_na(country) |&gt; \n  filter(\n    !country %in% c('Norway', 'Australia')\n  ) |&gt; \n  mutate(\n    last_year = year == 2023,\n    country_tooltip = paste(country, year, sep = ', ')\n  ) |&gt;\n  arrange(country, year) |&gt;\n  mutate(\n    country_fill = case_when(\n      str_detect(country_tooltip, \"US\") ~ \"US\",\n      str_detect(country_tooltip, \"France\") ~ \"France\",\n      str_detect(country_tooltip, \"Italy\") ~ \"Italy\",\n      str_detect(country_tooltip, \"Germany\") ~ \"Germany\",\n      str_detect(country_tooltip, \"Canada\") ~ \"Canada\",\n      str_detect(country_tooltip, \"Japan\") ~ \"Japan\",\n      str_detect(country_tooltip, \"UK\") ~ \"UK\",\n      TRUE ~ country_tooltip\n    ),\n    country = factor(country, levels = c(\"Canada\", \"France\", \"Germany\", \"Japan\", \"Italy\", \"UK\", \"US\"))\n  )\n\n# adding a tibble for hjsut/vjust values as country label position is not uniform across all countries\nhjust_vjust_tibble &lt;- \n  data |&gt;  \n  slice_max(year) |&gt; \n  distinct(country_fill, .keep_all = TRUE) |&gt; \n  mutate(\n    hjust_vals = if_else(country %in% c('Italy', 'US'), .5, -.25),\n    vjust_vals = if_else(country %in% c('Italy', 'US'), -1.5, 0.5),\n    hjust_vals = if_else(country %in% 'UK', -.7, hjust_vals)\n  )\n\np2 &lt;- data |&gt;\n  ggplot(\n    aes(x = spend, y = le, color = last_year, fill = country_fill)\n  ) +\n  geom_point_interactive(\n    aes(size = size, data_id = country_fill, tooltip = country_tooltip),\n    shape = 21, alpha = 1\n  ) +\n  geom_text_interactive(\n    data = data |&gt; \n      slice_max(year) |&gt; \n      distinct(country_fill, .keep_all = TRUE),\n    aes(\n      label = country_fill,\n      tooltip = country_tooltip\n    ),\n    hjust = hjust_vjust_tibble$hjust_vals, \n    vjust = hjust_vjust_tibble$vjust_vals, \n    alpha = 1, \n    color = '#7B7B7B', \n    fontface = 'bold'\n  ) +\n  scale_fill_manual( \n    breaks = c(\"US\", \"France\", \"Italy\", \"Germany\", \"Canada\", \"Japan\", \"UK\"),\n    values = c(\"#4076A4\", \"#80B1E2\", \"#61A961\", \"#F5C55E\", \"#FFAEA9\", \"#DACFC0\", \"#E94F55\")\n  ) +\n  scale_color_manual(\n    breaks = c(FALSE, TRUE),\n    values = c('white', 'black')\n  ) +\n  labs(\n    title = '**Value for money**',\n    subtitle = \n      \"How life expectancy and per-capita healthcare spend have changed since 2000.&lt;br&gt;\n     &lt;span style='background-color:#e94f55; color:white; padding:2px 4px; font-weight:normal;'&gt;**UK**&lt;/span&gt; spending is rising, but life\n     expectancy has stalled\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(\n    breaks = seq(3000, 11000, 1000),\n    labels = c(format(seq(3000, 10000, 1000), big.mark = \",\", trim = TRUE), \"$11,000\")\n  ) +\n  coord_cartesian(\n    xlim = c(2100, 11300),\n    ylim = c(77, 86),\n    expand = FALSE,\n    clip = 'off'\n  ) +\n  # add caption for p2\n  labs(\n    caption = \"&lt;span style='color:#232323; font-weight:plain;'&gt;In US Dollars, adjusted for purchasing power and inflation. Excludes 2020-22.&lt;/span&gt;  &lt;br&gt;\n  &lt;span style='color:#939291; font-weight:bold;'&gt;Chart: Tom Calver | The Times and The Sunday Times&lt;/span&gt;\"\n  ) +\n  theme(\n    text = element_text(family = 'Roboto', color = 'black', face = 'bold'),\n    plot.title = element_markdown(size = 12, lineheight = 1.2, linewidth = 1.5, margin = margin(b = 10, l = -15, r = 20)),\n    plot.subtitle = element_markdown(size = 12, lineheight = 1.2, face = 'plain', margin = margin(b = 10, l = -15, r = 20)),\n    axis.text.x = element_text(margin = margin(t = 5, b = -5)),\n    panel.grid.major = element_line(size = 0.3, color = \"#e8e8e8\"),\n    axis.line = element_line(color = \"black\", size = 0.3),\n    legend.position = 'none',\n    plot.caption = element_markdown(\n      size = 10,\n      hjust = 0,\n      lineheight = 1.2,\n      margin = margin(t = 20, r = 20, l = -15),\n      face = 'plain'\n    ),\n  ) +\n  annotate(\n    geom = 'rect',\n    xmin = 1880,\n    xmax = 2130,\n    ymax = 86.7,\n    ymin = 86.27,\n    fill = '#e94f55'\n  ) +\n  # we also need to annotate the years 2000 and 2023 with Germany's yellow hex code (to match what Tom has)\n  # not so much for Germany but for reference in general to the range of years for the plot\n  # 2000 persistent text geom; for 2023 we use text geom; for 2000, we use label with no borders to bring forward '2000'\n  annotate(\n    geom = 'label',\n    label = '2000',\n    x = 4250,\n    y = 77.97,\n    color = '#E0AB26',\n    fill = 'white',\n    label.size = NA,\n    fontface = \"bold\"\n  ) +\n  # 2023 persistent text geom\n  annotate(\n    geom = 'text',\n    label = '2023',\n    x = 6400,\n    y = 81,\n    color = '#E0AB26',\n    fontface = \"bold\"\n  ) +\n  # add x and y axes titles (within the plot itself)\n  # y axis\n  annotate(\n    geom = 'text',\n    label = 'Life expectancy',\n    x = 2685,\n    y = 85.8,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15\n  ) +\n  # x axis; i couldn't get the text to right justify for x axis title 'Per Capita\\n spend' even after using hjust = 1, so i split that text in two lines and that works/matches Tom's \n  annotate(\n    geom = 'text',\n    label = 'Per-capita',\n    x = 11200,\n    y = 77.5,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15,\n    hjust = 1,\n    vjust = .6\n  ) + \n  annotate(\n    geom = 'text',\n    label = 'spend',\n    x = 11200,\n    y = 77.2,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15,\n    hjust = 1,\n    vjust = .6\n  )\n\ngirafe(\n  ggobj = p2,\n  width_svg = 10, height_svg = 6,\n  options = list(\n    opts_tooltip(\n      css = \"background: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 6px;\n            font-size: 14px;\n            font-family: Roboto;\n            font-weight: bold;\n            color: #232323;\n            text-align: left;\n            transform: translate(-50%, 20px);\n            transition: all 0.1s ease-in-out;\"\n    ),\n    opts_hover(\n      css = \"stroke-opacity: 1; fill-opacity: 1; opacity: 1;\"\n    ),\n    opts_hover_inv(\n      css = \"fill-opacity: 0 !important;\n            stroke-opacity: 0 !important;\n            opacity: 0 !important;\n            color: white;\n            text { display: none !important; }\"\n    )\n  )\n)",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#room-to-improve",
    "href": "tom-calver-article-NHS.html#room-to-improve",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Room to Improve",
    "text": "Room to Improve\nDataset\nUnlike previous sections, below is the full dataset (only 13 rows by 3 column) showing the room to improve for countries; the potential of each country’s health service to improve without the need to increase current spend; this piece/section of the article borrows from Zarulli et al.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n  \n# map(room_to_improve$Country |&gt; word(1) |&gt; str_remove_all('\\\\:')[-5], emo::ji)\n\nroom_to_improve |&gt; \n  gt_nyt_custom(\n    title = 'Room to Improve Dataset', \n    subtitle = str_glue(\n    \"Notice the first column consists of country names preceded by emoji shortcodes per country so that for instance\n    Spain can have \", md(emo::ji('es')), \" as a prefix\"\n    )\n  )\n\n\n\n\n\n\nRoom to Improve Dataset\n\n\nNotice the first column consists of country names preceded by emoji shortcodes per country so that for instance Spain can have 🇪🇸 as a prefix\n\n\nCountry\nLife Expectancy at Birth\nPotential\n\n\n\n\n:jp: Japan\n84.1\n84.1\n\n\n:gb: United Kingdom\n81.1\n83.8\n\n\n:it: Italy\n83.0\n83.2\n\n\n:de: Germany\n80.9\n84.1\n\n\n:gr: Greece\n81.7\n81.7\n\n\n:us: United States\n78.9\n84.1\n\n\n:ie: Ireland\n81.6\n84.1\n\n\n:pl: Poland\n78.1\n80.9\n\n\n:es: Spain\n83.1\n83.1\n\n\n:pt: Portugal\n81.4\n82.6\n\n\n\n\n\n\nData Wrangling\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\ntheme_set_custom()\n\n# first isolate country names from first column values (using regex), then join on jis (emoji dataset) and filter to \n# subgroup == 'country-flag', then re-join (sef join) to capture only countries of interest's flag emojis\nroom_to_improve &lt;- \n  room_to_improve |&gt;\n  mutate(\n    country_names = room_to_improve$Country |&gt; \n      word(2, sep = \"[a-z]\\\\: \") \n  ) |&gt;  \n  inner_join(\n    jis |&gt; \n      filter(\n        subgroup == 'country-flag'\n        ) |&gt; \n      select(emoji, name, aliases) |&gt; \n      unnest(aliases) |&gt; \n      mutate_if(is.character, str_to_lower) |&gt; \n      distinct() |&gt; \n      inner_join(\n        tibble(\n          room_to_improve$Country |&gt; \n            word(2, sep = \"[a-z]\\\\: \") |&gt;\n            str_to_lower() |&gt; \n            enframe(name = NULL, value = 'name') |&gt;\n            select(name) \n            )\n      ) |&gt; \n      mutate(\n        country_names = str_to_title(name)\n      ) \n  ) |&gt; \n  select(-c(aliases, name, Country)) |&gt; \n  distinct()\n\n\n\nBelow is how the rendering looks like, now unfortunately, and because the plot uses Roboto throughout, the flag emojis weren’t rendering correctly. Also because flags are compound glyphs (made from regional indicators), and most R graphics devices don’t support fonts like “Apple Color Emoji” that can display them properly.\nSo since ggplot2 doesn’t allow font fallback within axis labels, I switched to embedding SVG flag images using element_markdown() and  tags instead. This is better anyways in the sense that SVG’s are by design more scalable (in dimensions/sizing) and can be a good input/template/boiler plate for me and for you in the event embedding flag images into a future script/project is needed.\n\n\n Show the coderoom_to_improve |&gt; \n  gt_nyt_custom(\n    title = 'Room to Improve Dataset with added and rendered flags'\n  )\n\n\n\n\n\n\nRoom to Improve Dataset with added and rendered flags\n\n\n\n\n\nLife Expectancy at Birth\nPotential\nCountry Names\nEmoji\n\n\n\n\n84.1\n84.1\nJapan\n🇯🇵\n\n\n81.1\n83.8\nUnited Kingdom\n🇬🇧\n\n\n83.0\n83.2\nItaly\n🇮🇹\n\n\n80.9\n84.1\nGermany\n🇩🇪\n\n\n81.7\n81.7\nGreece\n🇬🇷\n\n\n78.9\n84.1\nUnited States\n🇺🇸\n\n\n81.6\n84.1\nIreland\n🇮🇪\n\n\n78.1\n80.9\nPoland\n🇵🇱\n\n\n83.1\n83.1\nSpain\n🇪🇸\n\n\n81.4\n82.6\nPortugal\n🇵🇹\n\n\n\n\n\n\n\nI found flag SVG urls using ‘https://static.dwcdn.net/css/flag-icons/flags/4x3/’ and then only appended at the end are the respective country abbreviations which are looped through below.\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\ntheme_set_custom()\n# generate the data\np3_prep &lt;-\n  tribble(\n    ~Current,  ~Potential,  ~Country,\n    78.9,      84.1,       \"United States\",\n    80.9,      84.1,       \"Germany\",\n    78.1,      80.9,       \"Poland\",\n    81.1,      83.8,       \"United Kingdom\",\n    81.6,      84.1,       \"Ireland\",\n    81.4,      83.8,       \"Finland\",\n    82.0,      84.1,       \"Norway\",\n    82.3,      84.1,       \"France\",\n    82.4,      84.1,       \"Sweden\",\n    81.4,      82.6,       \"Portugal\",\n    83.0,      84.1,       \"Australia\",\n    83.0,      83.2,       \"Italy\",\n    81.7,      81.7,       \"Greece\",\n    83.1,      83.1,       \"Spain\",\n    84.1,      84.1,       \"Japan\"\n  ) |&gt;\n  select(last_col(), everything()) |&gt;\n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15)\n\n# create country abb names (fetched from one of the html nodes within the original plot) and build urls/per flag\ncountry_abbs &lt;- c('us', 'de', 'pl', 'gb', 'ie', 'fi', 'no', 'fr', 'se', 'pt', 'au', 'it', 'gr', 'es', 'jp')\nflag_urls &lt;- str_glue(\"https://static.dwcdn.net/css/flag-icons/flags/4x3/{country_abbs}.svg\")\n\n# loop thru svg's and convert to png's\nflag_paths &lt;- map(\n  flag_urls, function(url) {\n    \n    svg_path &lt;- tempfile(fileext = \".svg\")\n    png_path &lt;- tempfile(fileext = \".png\")\n    \n    download.file(url, svg_path, mode = \"wb\")\n    rsvg::rsvg_png(svg_path, png_path)\n    \n    return(png_path)\n  }\n)\nflag_paths &lt;- setNames(flag_paths, country_abbs)\n\n# add the 2 additional columns back to p3\np3_data &lt;- p3_prep |&gt;\n  bind_cols(\n    flag_paths |&gt; unlist() |&gt; stack() |&gt; rename(flag_pngs = values, country_abbs = ind)\n  ) |&gt;\n  select(Country, country_abbs, Current, Potential, flag_pngs)\n\n# also add html code straight into p3_data but first abbreviate country names\np3_data &lt;-\n  p3_data |&gt;\n  # abbreviated United States and United Kingdom because i noticed the blanks/two or more words can throw off element markdown, especially\n  # when embedding svg's; while not perfectly replicating here, in the context of country names, 'US' and 'UK' are universally reconized, especially\n  # if flag images are appended to them\n  mutate(\n    Country = if_else(\n      Country == 'United Kingdom', 'UK',\n      if_else(Country == 'United States', 'US', Country)\n    ),\n    flag_html = paste0(\"&lt;img src='\", flag_pngs, \"' width='25' height='15'&gt; &lt;span style='font-family: Roboto;'&gt;\", \" \", \" \", Country, \"&lt;/span&gt;\")\n  )\n\n# we have to turb this from wide to long; to get a tracking per country (current -&gt; potential)\np3_data_prep &lt;-\n  p3_data |&gt;\n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15) |&gt;\n  pivot_longer(\n    -c(seq, Country, country_abbs, flag_pngs, flag_html), names_to = 'progress'\n  ) |&gt;\n  mutate(\n    # add color codes (different for UK compared to rest)\n    # for greece, default arrow shows a recession, but in Tom's plot, it's '&gt;', it's the same value for current and for potential for Greece, so we\n    # artificially add + 0.001 to the Greek score for potential for force '&gt;' arrow direction\n    # value = if_else(Country == 'Greece' & progress == 'Potential', value + 0.0001, value),\n    hex_codes = if_else(Country == 'UK', '#73a3d3', '#264250'), # UK gets its own color\n    arrow_end_angle = if_else(Country %in% c('Spain', 'Japan'), 90, 70)) |&gt;\n    arrange(desc(seq)) # for some reason, below plot was reversing order, so we reverse order here so that plot arranges countries properly\n\n# prepare plot caption\nplot_caption &lt;- \"&lt;span style='color:#939292; font-weight:bold;'&gt;Chart: The Times and The Sunday Times | Source: &lt;span style='color:#254251; text-decoration:underline;'&gt;Zarulli et al.&lt;/span&gt;&lt;/span&gt;\"\n\n# since arrow() wouldn't natively recognized arrow_end_angle,\n# we create an variable in the global env. to call it within arrow() later on\np3 &lt;- \n  p3_data_prep |&gt;\n  ggplot(aes(y = fct_reorder(Country, -seq), x = value, color = hex_codes)) +\n  geom_path(\n    arrow = arrow(type = \"open\", angle = c(rep(90, 3), rep(60, 27)), length = unit(5, 'pt')),\n    linewidth = 1,\n    lineend = 'round'\n  ) +\n  geom_label(\n    data = p3_data_prep |&gt; filter(progress == 'Current'),\n    aes(label = value, hjust = 1.2),\n    family = \"Roboto\",\n    size = 4,\n    fill = 'white', \n    label.size = NA,\n    fontface = 'bold'\n  ) +\n  geom_text(\n    data = p3_data_prep |&gt; filter(progress == 'Potential'),\n    aes(label = value, hjust = -.3),\n    family = \"Roboto\", \n    size = 4,\n    fontface = 'bold'\n  ) +\n  geom_text(\n    aes(x = 78.7, y = 15, label = '\\nCurrent\\n'),\n    family = 'Roboto',\n    size = 4, \n    nudge_y = .75, \n    nudge_x = -.2, \n    color = '#232323',\n    margin = margin(t = -10, b = 5)\n  ) +\n  geom_text(\n    aes(x = 84.1, y = 15, label = '\\nPotential\\n'),\n    family = 'roboto',\n    size = 4, \n    nudge_y = .75,\n    nudge_x = .1, \n    color = '#232323',\n    margin = margin(t = -10, b = 5)\n  ) +\n  scale_color_identity() +\n  scale_y_discrete(\n    labels = p3_data_prep |&gt; filter(progress == \"Current\") |&gt; pull(flag_html)\n  ) +\n  theme(\n    axis.text.y = element_markdown(family = \"Roboto\", size = 10, hjust = 0, face = 'plain', colour = '#232323'),\n    axis.text.x = element_text(family = \"Roboto\", size = 10, face = 'bold'),\n    axis.title.x = element_text(size = 12, family = \"Roboto Condensed\"),\n    axis.title.y = element_text(size = 12, family = \"Roboto Condensed\"),\n    panel.grid.minor.x = element_blank(),\n    legend.position = 'none'\n  ) +\n  labs(x = NULL, y = NULL) +\n  geom_segment(\n    aes(x = 78.85, xend = 78.85, y = 15.25, yend = 15.4),\n    color = \"grey70\", linewidth = .2, inherit.aes = FALSE\n  ) +\n  geom_segment(\n    aes(x = 84.1, xend = 84.1, y = 15.25, yend = 15.4),\n    color = 'grey70', linewidth = .2, inherit.aes = FALSE\n  ) +\n  labs(caption = plot_caption) +\n  theme(\n    plot.caption = element_markdown(\n      hjust = -.45,\n      size = 9,\n      family = \"Roboto\", \n      face = 'bold',\n      margin = margin(t = 10)\n    ),\n    axis.text.x = element_text(margin = margin(t = 10, b = 10))\n  ) + \n  coord_cartesian(\n  xlim = c(77, 85),\n  expand = FALSE,\n  clip = 'off'\n  ) + \n  scale_x_continuous(breaks = seq(78, 84, 2)) \n\np3\n\n\n\n\n\n\n\n\nOverall, I like this type of plot (typically called arrow plots); which more often than not shows spread between one value to another (so 2 values total) per group; in this case per country. The reason I like it is because it scales very well; meaning in this case we could have ‘gotten away’ with adding 5 more countries within fairly similar plot panel dimensions while not sacrificing 5 times the readability.  A couple of things I couldn’t replicate perfectly is the centering on the country labels, but that may be a limitation from ggtext as it doesn’t fully support all types of css tags including align center since I tried multiple ways to achieve that - to no avail. Finally, while I was able to embed link to the source cited in the caption (Zaruli et al.); it would have taken more work (more than I deemed necessary) to make said link clickable.",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#barely-beds",
    "href": "tom-calver-article-NHS.html#barely-beds",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Barely Beds",
    "text": "Barely Beds\nDataset\n\nThis below shows the dataset for the barely bed section of the article; by far the easiest to replicate. It shows hospital beds availability across countries, normalized by considering no. of beds per 1,000 people.\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\nbarely_beds |&gt; \n  gt_nyt_custom(\n    title = 'Barely Beds Dataset', \n    subtitle = 'We can clearly see the dearth of hospital beds for the UK'\n  )\n\n\n\n\n\n\nBarely Beds Dataset\n\n\nWe can clearly see the dearth of hospital beds for the UK\n\n\nCountry\nBeds\n\n\n\n\nJapan\n12.8\n\n\nGermany\n7.9\n\n\nAustria\n7.2\n\n\nFrance\n5.8\n\n\nBelgium\n5.6\n\n\nGreece\n4.2\n\n\nAustralia\n3.8\n\n\nPortugal\n3.5\n\n\nFinland\n3.4\n\n\nItaly\n3.2\n\n\n\n\n\n\nData Visualization\nNot the most exciting visualization but sometimes, you just need a good old bar plot !\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n\ntheme_set_custom()\n\nbarely_beds &lt;- \n  barely_beds |&gt; \n  select(\n    country = Country,  Beds_per_1000 = Beds\n    ) |&gt; \n  mutate(\n    country = factor(country, levels = rev(country)),\n    bar_color_code = if_else(country != 'UK', '#264250', '#7fb1e2'),\n    label_color_code = if_else(country != 'UK', 'white', 'black'),\n    font_face = if_else(country != 'UK', 'bold', 'plain')\n  ) \n\np4 &lt;- ggplot(barely_beds, aes(x = country, y = Beds_per_1000, fill = bar_color_code)) +\n    geom_col(width = .8) +\n    scale_fill_identity() + \n    coord_flip() +\n    labs(x = NULL, y = NULL) + \n    theme(\n        axis.line.x = element_blank(), axis.line.y = element_blank(),\n        axis.text.x = element_blank(), axis.ticks = element_blank(),\n        axis.text.y = element_text(size = 8, hjust = 0, colour = 'black')\n    ) + \n    scale_y_discrete(expand = expansion(mult = c(0, 0.1))) +\n    geom_label(\n        aes(label = Beds_per_1000), \n        label.size = NA, \n        size = 4,\n        fill = NA, \n        hjust = 1, \n        vjust = .6,\n        nudge_x = .1, \n        fontface = barely_beds$font_face,\n        colour = barely_beds$label_color_code\n        ) + \n    labs(\n        caption = \"&lt;span style='color:#939292; font-weight:bold; text-align: left; white-space: nowrap;'&gt;Chart: The Times and The Sunday Times • Source: OECD.&lt;/span&gt;\"\n    ) +\n    theme(\n        plot.caption = element_markdown(\n            size = 8,\n            hjust = -.225,\n            family = \"Roboto\", \n            face = 'bold'\n        )\n    ) + \n    ggtitle(\n      label = md(\"**Barely beds**\"),\n      subtitle = \"Hospital beds per 1,000 people\"\n      ) + \n    theme(\n        plot.title = element_markdown(size = 8, hjust = -.1265),\n        plot.subtitle = element_markdown(size = 8, hjust = -.155),\n        plot.margin = margin(l = 5, t = 0, r = 10, b = 10),\n        panel.grid = element_blank()\n    )\np4",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#room-to-improve-1",
    "href": "tom-calver-article-NHS.html#room-to-improve-1",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Room to Improve",
    "text": "Room to Improve\nDataset\nUnlike previous",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "tom-calver-article-NHS.html#budget-breakdowns",
    "href": "tom-calver-article-NHS.html#budget-breakdowns",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "Budget Breakdowns",
    "text": "Budget Breakdowns\nDataset\n\nBelow is a breakdown of how the budget is allocated across different cost categories in each country. There are eight categories in total, with Hospitals, unsurprisingly, accounting for the lion share in every country. The data has been normalized (same currency and per-person basis) for comparability.  The UK ranks second to last in terms of budget allocated to Medical goods and equipment, just ahead of Italy, which implies that UK’s NHS is starved on a crucial budget.\n\n\n Show the codebudget_breakdowns |&gt; \n  mutate(\n    Ancillary = coalesce(Ancillary, 0)\n  ) |&gt; \n  mutate_if(is.numeric, as.integer) |&gt; \n  rename(country = Category) |&gt; \n  gt_nyt_custom(\n    title = \"Budget Allocation on Health Services per person\",\n    subtitle = \"Ancillary spend for the US was NULL or NA, so I replaced it with 0 since all other spends have non-empty values, it's likely that there is no such spend for this category for the US\"\n  ) |&gt; \n  tab_style(\n    style = cell_fill(color = '#fff5ec'), \n    locations = cells_body(rows = 8)\n  ) |&gt; \n  fmt_currency(everything(), decimals = 0)\n\n\n\n\n\n\nBudget Allocation on Health Services per person\n\n\nAncillary spend for the US was NULL or NA, so I replaced it with 0 since all other spends have non-empty values, it’s likely that there is no such spend for this category for the US\n\n\nCountry\nHospitals\nResidential Long Term Care\nAmbulance\nAncillary\nMedicines\nPreventive Care\nAdmin and Finance\nRest of Economy\n\n\n\n\nUS\n$3,393\n$479\n$3,315\n$0\n$1,473\n$524\n$836\n$40\n\n\nGermany\n$1,718\n$573\n$1,968\n$104\n$1,130\n$261\n$305\n$310\n\n\nNorway\n$2,468\n$980\n$1,809\n$64\n$618\n$179\n$112\n$92\n\n\nAustralia\n$2,414\n$382\n$1,288\n$346\n$742\n$250\n$220\n$122\n\n\nCanada\n$1,413\n$782\n$1,561\n$83\n$915\n$335\n$176\n$11\n\n\nFrance\n$1,998\n$577\n$1,148\n$168\n$860\n$71\n$256\n$56\n\n\nJapan\n$1,948\n$445\n$1,339\n$27\n$804\n$172\n$72\n$1\n\n\nUK\n$1,986\n$557\n$1,067\n$91\n$424\n$152\n$79\n$161\n\n\nItaly\n$1,416\n$187\n$800\n$160\n$494\n$131\n$57\n$5\n\n\n\n\n\n\nData Wrangling & Visualization\n\nThe first step was to make the data as shown above go from wide (a typically very hard to work with structure) to long, so that each country name repeats 8 times, each time for a different spend category. Second was to control how many labels would be displayed on the each segment per bar. Third was turning spend categories into a factor variable for easier sorting, matching Tom’s sorting/order of bars. Forth was creating a tibble/dataframe for tooltips; this will activate upon hover and will be specially useful for small-width segments as data label won’t be explicitly displayed. Fifth step was to include a separate plot which serves as a legend that will stack (vertically) on main bar plot. This allows for easier customization and since it’s written using a function to generate each box (per category) along with labels to the right of each bar, it makes it more modular/generalizeable to other scripts in the future where needed. I used {pathwork} (p1 / p2) in this case meaning legend (p1) to go over the bar plot.  Finally, this consolidated both plots into one, before being rendered via ggiraph for interactivity.\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\ncountry_budget_breakdowns &lt;-\n  budget_breakdowns |&gt; \n  pivot_longer(\n    -Category, \n    names_to = 'spend_category',\n    values_to = 'budget'\n  ) |&gt; \n  select(country = 1, everything()) |&gt; \n  mutate(\n    spend_category = case_when(spend_category == 'Ambulance' ~ 'Community',\n                               spend_category == 'Medicines' ~ 'Medical Goods & Equip.',\n                               .default = spend_category),\n    spend_budget_factor = factor(spend_category, levels = rev(unique(spend_category))),\n    total_spend = sum(budget), .by = country\n  ) |&gt; \n  mutate(\n    # for data labels/budget, the original only prints out values &gt; $914 or values for below budgets so I create a variable for later reference/use \n    data_labels = case_when(\n      budget &gt;= 915 ~ scales::dollar(budget),\n      (budget %in% c(782, 800, 804, 836, 860)) ~ scales::dollar(budget),\n      TRUE ~ \"\"\n    ),\n    data_labels_color = case_when(\n      (spend_category %in% 'Medical Goods & Equip.' | budget %in% c(980, 782)) ~ 'black', \n      TRUE ~ 'white'\n    ),\n    data_labels_font_face = case_when(\n     data_labels_color == 'white' ~ 'bold',\n     TRUE ~ 'plain'\n    ),\n    spend_budget_factor = factor(spend_category, levels = c(\n      'Hospitals',\n      'Residential long-term care',\n      'Community',\n      'Ancillary',\n      'Medical Goods & Equip.',\n      'Preventive care',\n      'Admin and finance',\n      'Rest of economy')\n    )\n  ) |&gt; \n  arrange(desc(total_spend), spend_budget_factor) \n\ntooltip_texts &lt;- country_budget_breakdowns |&gt;\n  group_by(country, spend_category) |&gt;\n  summarise(\n    tooltip = paste0(\n      spend_category, \"\\n\", \n      paste0(country, \": \", scales::dollar(budget), collapse = \"\\n\")\n    ),\n    .groups = \"drop\"\n  )\n\ncountry_budget_breakdowns &lt;- country_budget_breakdowns |&gt;\n  left_join(\n    tooltip_texts, \n    join_by(country == country, spend_category == spend_category)\n  )\n\np2 &lt;- country_budget_breakdowns |&gt; \n  ggplot(\n    aes(\n      x = reorder(country, total_spend), \n      y = as.numeric(as.character(budget)), \n      fill = fct_rev(spend_budget_factor), \n      data_id = spend_category\n      )\n  ) +\n  geom_col_interactive(\n    aes(\n      fill = fct_rev(spend_budget_factor),\n      data_id = spend_category,\n      tooltip = tooltip\n      )\n    ) +\n  geom_text_interactive(\n    aes(label = data_labels, y = budget), \n    position = position_stack(vjust = 0.04), \n    hjust = 0,                               # keeps text left-aligned, starting at the segment's beginning (after coord_flip)\n    size = 5,\n    family = \"Roboto\",\n    fontface = country_budget_breakdowns$data_labels_font_face,\n    color = country_budget_breakdowns$data_labels_color\n    ) +\n  scale_y_continuous(breaks = seq(0, 10e3, 2e3), position = 'right', labels = scales::dollar_format()) + \n  coord_flip() + \n  scale_x_discrete(position = \"bottom\") +\n  labs(x = NULL, y = NULL) + \n  theme_classic() +\n  theme(\n    axis.line.x = element_blank(), \n    axis.line.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.x.top = element_text(family = 'Roboto', face = 'bold', size = 12, color = 'black'), \n    axis.text.x = element_blank(),\n    legend.position = 'none'\n  ) +\n  scale_fill_manual_interactive(\n    values = c(\n      'Hospitals' = \"#264250\",\n      'Residential long-term care' = '#7fb1e2',\n      'Community' = '#61a961',\n      'Ancillary' = '#3392a5',\n      'Medical Goods & Equip.' = '#e0ab26',\n      'Preventive care' = '#dacfc2',\n      'Admin and finance' = '#b01622',\n      'Rest of economy' = '#95807a')\n  ) +\n  geom_hline_interactive(yintercept = seq(0, 10e3, 2e3), color = 'white', linewidth = 0.2, linetype = \"solid\") +\n  # The ylim, expand, and clip arguments for coord_flip should ideally be consolidated into the main coord_flip() call\n  # For example: coord_flip(ylim = c(0, 11000), expand = FALSE, clip = 'off')\n  # However, based on your provided p2 snippet, the limits are primarily controlled by scale_y_continuous.\n  # Ensure consistency if you have multiple coord_flip() or limit-setting calls.\n  theme(\n    plot.margin = margin(l = 20, r = -20),\n    axis.text.y = element_text(\n      hjust = 0,              \n      family = 'Roboto',\n      face = 'bold',\n      size = 12,\n      margin = margin(r = 10))\n  )\n\nlegend_box &lt;- \n  tribble(\n    ~spend_category,  ~colors,\n    'Hospitals',  \"#264250\",\n    'Residential long-term care',  '#7fb1e2',\n    'Community',  '#61a961',\n    'Ancillary',  '#3392a5',\n    'Medical Goods & Equip.', '#e0ab26',\n    'Preventive care',  '#dacfc2',\n    'Admin and finance', '#b01622',\n    'Rest of economy', '#95807a'\n  )\n\n# function to create tiled legend to serve as first row of a two plot wrapper (stacked veritically)\nlegend_tile_plot &lt;- function(label, color) {\n  \n  ggplot() +\n    geom_rect_interactive(\n      aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1),  # 1x1 squares/tiles\n      fill = color,\n      data_id = label,\n      tooltip = label\n    ) +\n    # move labels to the right of tiles\n    annotate_interactive(\n      \"text\", \n      x = 1.2, y = .6,  # position to the right of the box\n      label = label,\n      data_id = label,\n      hjust = 0,  # left-align text\n      size = 5,\n      color = 'black',\n      family = \"Roboto\",\n      face = \"bold\") +\n    coord_fixed(ratio = 1) +  \n    xlim(0, 20) +  # useful for lengthier words, such as 'Medical Goods & Equip.'\n    ylim(-1.4, 1.1) +\n    theme_void() +\n    theme(\n      plot.margin = margin(0, 0, 0, 0)  # reduce margins for better plot values fit \n    )\n}\n\nlegend_plots &lt;- map2(\n  legend_box$spend_category, \n  legend_box$colors,\n  legend_tile_plot\n)\n\n# reduce spacing within p1\np1 &lt;- wrap_plots(\n  legend_plots, \n  nrow = 2, \n  ncol = 4, \n  heights = 1.2,\n  widths = .6\n) \n\n# reduce spacing not within but between p1 and p2 using plot_layout heights\ngirafe(\n  ggobj = (p1 / p2) + plot_layout(heights = c(0.4, 3), widths = c(1, 3)),  # reduced p1 height and widths\n  width_svg = 12, height_svg = 7,\n  options = list(\n    opts_tooltip(\n      css = \"background: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 6px;\n            font-size: 14px;\n            font-family: Roboto;\n            font-weight: bold;\n            color: #232323;\n            text-align: left;\n            transform: translate(-50%, 20px);\n            transition: all 0.3 ease-in-out;\"\n    ),\n    opts_hover(\n      css = \"stroke-opacity: 1; fill-opacity: 1; opacity: 1; transition: all 0.3s ease-in-out;\"\n    ),\n    opts_hover_inv(\n      css = \"fill-opacity: 0.3 !important;\n            stroke-opacity: 0.3 !important;\n            opacity: 0.6 !important;\n            transition: all 0.2s ease-in-out;\n            color: white;\n            text { display: none !important; }\"\n    )\n  )\n)\n\n\n\n\n\n\nOverall, I liked this plot - it took a fair amount of effort to replicate. The only part I wasn’t a fan of was the y-axis scale from $0 to $10,000. It can be a bit misleading: for example, the U.S. hospital spend of around 3,400 falls below the $2,000 mark. I would have removed the intermediate axis (that goes from 0 to $10,000) ticks and kept only the $10,000 label to avoid this potential confusion. Another difference where I actually deviated from the plot is the structure of the legend; where Tom uses one block across which you will find boxes along with their respective spend categories from left to right whereas I decided to just go for 2x4 where each row contains 4 spend categories (total of 8). I think this hopefully gives clearer separation and I think can be more than often useful especially for even number of categories like it’s the case in here.\nOne feature I couldn’t replicate was the hover interaction where small segments (like Ancillary spend) trigger the display of all corresponding values across countries. Achieving that would require a deeper dive into CSS -assuming ggiraph even supports that level of dynamic interaction. That said, for small segments like ‘Residential long-term care’, a few values are already visible without interaction, which gives a reasonable sense of the scale for the rest. For all those reasons, I didn’t think the extra complexity was worth the additional time investment.\nThanks for taking the time to read this and hopefully, if nothing else, you have enjoyed it, more to come !",
    "crumbs": [
      "Navigation",
      "Is NHS Good Value? (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html",
    "href": "holder-chokshi-granados-article-TravelToUS.html",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: This New York Times article, backed by numbers from government agencies for the US & Canada, attempts to show whether International Travel into the US has dipped as a result of President Trump’s administration and policies relating to broad tariffs, tight border control, etc.  The main takeaway is that while travel originating from Asia into the United States has timidly increased, that from Europe has stalled, meanwhile that of Canada has sharply decreased, especially when it comes to car crossings into the US; relative to air travel. Despite a drastic drop for US bound travel from Canada, overall, travel into the United States has remained fairly undisturbed.\nIf you like to give the original article a read, you can find it here.\nOverall Strategy for building first plot: One way to recreate the first visual; which shows in a report-card style the % change in flight bookings into the US comparing (Jan 1st through April 26, 2024) to (same period this year), and looking at 1) overall (International), 2) European, 3) Asian, and 4) Canadian inbound travel; is to generate 4 tiles with a subtle vertical tick/separator between each of those said 4 percentages. The time frame of visits for both years covers Summer; which allows for ‘apples to apples’ comparisons but also focuses on an upcoming period of the year - very near future, meaning that said bookings are more likely than not to be definitive for a vast majority of them.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n# check if the required package 'emo' is installed;\n# if not, it might mean your renv environment is not fully restored.\n# running `renv::restore()` will install all necessary packages\n# to ensure consistent package versions for building this quarto document,\n# effectively 'containerizing' your project and protecting it from future package changes.\nif (!requireNamespace(\"emo\", quietly = TRUE)) {\n  message(\"\\nIt looks like your environment might not be restored.\\nRun `renv::restore()` to install required packages.\\n\")\n}\n\n# load packages\nlibrary(xml2)\nlibrary(downlit)\nlibrary(gdtools)\nlibrary(tidyverse)\nlibrary(quarto)\nlibrary(chromote)\nlibrary(here)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(ggtext)\nlibrary(ggshadow)\nlibrary(ggiraph)\nlibrary(gfonts)\nlibrary(showtext)\nlibrary(ggborderline)\nlibrary(grid)\nlibrary(patchwork)\nlibrary(shiny)\nlibrary(rvest)\nlibrary(htmltools)\nlibrary(gt)\nlibrary(rsvg)\nlibrary(magick)\nlibrary(stringr)\nlibrary(ggimage)\nlibrary(qs)\nlibrary(emo)\n\n\nfont_add(family = \"franklin-medium\", regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\") \n\ntheme_set_custom &lt;- function() {\n  \n  # loading google Fonts\n  sysfonts::font_add_google(\"Libre Franklin\", \"franklin\")\n  sysfonts::font_add(\n    family = \"franklin-medium\", \n    regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\"\n  )\n  showtext::showtext_auto()\n\n  # applying ggplot2 theme\n  ggplot2::theme_set(\n    ggplot2::theme_minimal(base_family = \"franklin\") +\n      ggplot2::theme(\n        panel.background = ggplot2::element_rect(fill = \"#F9F9F9\", color = NA),\n        plot.background = ggplot2::element_rect(fill = \"#F9F9F9\", color = NA)\n      )\n  )\n}\n\ntheme_set_custom()",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#health-service-and-general-prelude",
    "href": "holder-chokshi-granados-article-TravelToUS.html#health-service-and-general-prelude",
    "title": "\nReplication of below article’s Data and Visualizations“We keep pumping money into the NHS. Is it good value? By Tom Calver”  Karim K. Kardous       \n",
    "section": "",
    "text": "Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n# check if the required package 'emo' is installed;\n# if not, it might mean your renv environment is not fully restored.\n# running `renv::restore()` will install all necessary packages\n# to ensure consistent package versions for building this quarto document,\n# effectively 'containerizing' your project and protecting it from future package changes.\nif (!requireNamespace(\"emo\", quietly = TRUE)) {\n  message(\"\\nIt looks like your environment might not be restored.\\nRun `renv::restore()` to install required packages.\\n\")\n}\n\n# load packages\nlibrary(xml2)\nlibrary(downlit)\nlibrary(gdtools)\nlibrary(tidyverse)\nlibrary(quarto)\nlibrary(chromote)\nlibrary(here)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(ggtext)\nlibrary(ggshadow)\nlibrary(ggiraph)\nlibrary(gfonts)\nlibrary(showtext)\nlibrary(ggborderline)\nlibrary(patchwork)\nlibrary(shiny)\nlibrary(gt)\nlibrary(rsvg)\nlibrary(magick)\nlibrary(stringr)\nlibrary(ggimage)\nlibrary(emo)\n\n\ntheme_set_custom &lt;- function() {\n  \n  # load google fonts \n  sysfonts::font_add_google(\"Roboto\", \"Roboto\")\n  sysfonts::font_add_google(\"Roboto Condensed\", \"Roboto Condensed\")\n  showtext::showtext_auto()\n\n  # apply ggplot2 theme; can always be overwritten\n  ggplot2::theme_set(\n    ggplot2::theme_minimal() +\n      ggplot2::theme(\n        text = element_text(family = \"Roboto\", size = 11),\n        plot.title = element_text(family = \"Roboto\", face = \"bold\", size = 16),\n        plot.subtitle = element_text(family = \"Roboto\", size = 12),\n        axis.text = element_text(family = \"Roboto\", size = 10),\n        axis.title = element_text(family = \"Roboto Condensed\", size = 11)\n      )\n  )\n}\n\ntheme_set_custom()\n\n\nWhile above took care of importing required libraries and setting general options such as plot theme and text font to be used; below is the start of data related tasks; from initial pull, to wrangling, to finally output the visualizations.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|\niris |&gt; \n  ggplot(aes(x = Sepal.Length, Sepal.Width)) + \n  geom_point()"
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#section",
    "href": "holder-chokshi-granados-article-TravelToUS.html#section",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel to the U.S. Really Collapsed? By Josh Holder, Niraj Chokshi and Samuel Granados”  Karim K. Kardous       \n",
    "section": "",
    "text": "Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n# check if the required package 'emo' is installed;\n# if not, it might mean your renv environment is not fully restored.\n# running `renv::restore()` will install all necessary packages\n# to ensure consistent package versions for building this quarto document,\n# effectively 'containerizing' your project and protecting it from future package changes.\nif (!requireNamespace(\"emo\", quietly = TRUE)) {\n  message(\"\\nIt looks like your environment might not be restored.\\nRun `renv::restore()` to install required packages.\\n\")\n}\n\n# load packages\nlibrary(xml2)\nlibrary(downlit)\nlibrary(gdtools)\nlibrary(tidyverse)\nlibrary(quarto)\nlibrary(chromote)\nlibrary(here)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(ggtext)\nlibrary(ggshadow)\nlibrary(ggiraph)\nlibrary(gfonts)\nlibrary(showtext)\nlibrary(ggborderline)\nlibrary(grid)\nlibrary(patchwork)\nlibrary(shiny)\nlibrary(gt)\nlibrary(rsvg)\nlibrary(magick)\nlibrary(stringr)\nlibrary(ggimage)\nlibrary(emo)\n\n\nfont_add(family = \"franklin-medium\", regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\") \n\ntheme_set_custom &lt;- function() {\n  \n  # load google fonts \n  sysfonts::font_add_google(\"Libre Franklin\", \"franklin\") # libre franklin is a solid free alternative to an otherwise proprietary nyt-franklin\n  # local font; for rare cases where requiring midway bettween plain and bold\n  sysfonts::font_add(family = \"franklin-medium\", regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\") # this is a closer match to plot subtitles for first visual\n  showtext::showtext_auto()\n\n  # apply ggplot2 theme; can always be overwritten\n  ggplot2::theme_set(\n    ggplot2::theme_minimal()\n    )\n}\n\ntheme_set_custom()"
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#international-travel-into-the-us-prelude",
    "href": "holder-chokshi-granados-article-TravelToUS.html#international-travel-into-the-us-prelude",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "",
    "text": "About the data/article in a nutshell: This New York Times article, backed by numbers from government agencies for the US & Canada, attempts to show whether International Travel into the US has dipped as a result of President Trump’s administration and policies relating to broad tariffs, tight border control, etc.  The main takeaway is that while travel originating from Asia into the United States has timidly increased, that from Europe has stalled, meanwhile that of Canada has sharply decreased, especially when it comes to car crossings into the US; relative to air travel. Despite a drastic drop for US bound travel from Canada, overall, travel into the United States has remained fairly undisturbed.\nIf you like to give the original article a read, you can find it here.\nOverall Strategy for building first plot: One way to recreate the first visual; which shows in a report-card style the % change in flight bookings into the US comparing (Jan 1st through April 26, 2024) to (same period this year), and looking at 1) overall (International), 2) European, 3) Asian, and 4) Canadian inbound travel; is to generate 4 tiles with a subtle vertical tick/separator between each of those said 4 percentages. The time frame of visits for both years covers Summer; which allows for ‘apples to apples’ comparisons but also focuses on an upcoming period of the year - very near future, meaning that said bookings are more likely than not to be definitive for a vast majority of them.\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n# check if the required package 'emo' is installed;\n# if not, it might mean your renv environment is not fully restored.\n# running `renv::restore()` will install all necessary packages\n# to ensure consistent package versions for building this quarto document,\n# effectively 'containerizing' your project and protecting it from future package changes.\nif (!requireNamespace(\"emo\", quietly = TRUE)) {\n  message(\"\\nIt looks like your environment might not be restored.\\nRun `renv::restore()` to install required packages.\\n\")\n}\n\n# load packages\nlibrary(xml2)\nlibrary(downlit)\nlibrary(gdtools)\nlibrary(tidyverse)\nlibrary(quarto)\nlibrary(chromote)\nlibrary(here)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(ggtext)\nlibrary(ggshadow)\nlibrary(ggiraph)\nlibrary(gfonts)\nlibrary(showtext)\nlibrary(ggborderline)\nlibrary(grid)\nlibrary(patchwork)\nlibrary(shiny)\nlibrary(rvest)\nlibrary(htmltools)\nlibrary(gt)\nlibrary(rsvg)\nlibrary(magick)\nlibrary(stringr)\nlibrary(ggimage)\nlibrary(qs)\nlibrary(emo)\n\n\nfont_add(family = \"franklin-medium\", regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\") \n\ntheme_set_custom &lt;- function() {\n  \n  # loading google Fonts\n  sysfonts::font_add_google(\"Libre Franklin\", \"franklin\")\n  sysfonts::font_add(\n    family = \"franklin-medium\", \n    regular = \"renv/library/macos/R-4.5/aarch64-apple-darwin20/sysfonts/fonts/Libre_Franklin/static/LibreFranklin-Medium.ttf\"\n  )\n  showtext::showtext_auto()\n\n  # applying ggplot2 theme\n  ggplot2::theme_set(\n    ggplot2::theme_minimal(base_family = \"franklin\") +\n      ggplot2::theme(\n        panel.background = ggplot2::element_rect(fill = \"#F9F9F9\", color = NA),\n        plot.background = ggplot2::element_rect(fill = \"#F9F9F9\", color = NA)\n      )\n  )\n}\n\ntheme_set_custom()",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#confidence-by-warning-signs",
    "href": "holder-chokshi-granados-article-TravelToUS.html#confidence-by-warning-signs",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "Confidence by Warning Signs",
    "text": "Confidence by Warning Signs\nFor the below visualization, I opted to use gt() from gt package as it naturally comes to mind when trying to build ‘great tables’, yes pun intended. A few things to mention here to explain my thought process along with pointing out a couple of minor things that slightly fell short from original. s First, one thing that stands out is that\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|results: 'asis' \n\ngt_table_custom_ &lt;- function(hex, direction, title = NULL) {\n  \n  title_ &lt;- title\n  hex_to_pass_in_fn &lt;- hex\n  dir_to_pass_in_fn &lt;- direction\n  \n  individual_country_changes |&gt; \n    filter(groupings == {{direction}}) |&gt; \n    select(1:3) |&gt; \n    gt() |&gt; \n    text_transform(\n      locations = cells_body(columns = perc_change_num),\n      fn = function(x) {\n        x_num &lt;- as.numeric(x)\n        max_val &lt;- max(abs(x_num), na.rm = TRUE)\n        if(max_val == 0) max_val &lt;- 1 \n        widths_for_glue &lt;- abs(x_num) / max_val * if (dir_to_pass_in_fn == 2) 8 else 100 # default scaling may look misleaading for 'no change' countries, so massively reduced here otherwise center table values get way inflated for what they are ([-2; 1])\n        \n        # loop thru values of perc_change column and isolate each element so that it can pass thru str_glue() without length(x) &gt; 1 error from if/else statement\n        purrr::map_chr(seq_along(x_num), function(x) {\n          width &lt;- widths_for_glue[x]\n          val &lt;- x_num[x]\n          \n          if(dir_to_pass_in_fn == 2) {\n            direction_to_go &lt;- if(val &lt; 0) \"right\" else \"left\"\n            translate_offset &lt;- if(val &lt;= -2) \"20%\" else \"0\" # translate back to the origin for values &gt;= -.02 (this gets applied only for no-change countries/middle table)\n            str_glue(\n              '&lt;div style=\"display: flex; align-items: center; justify-content: center;\"&gt;\n                 &lt;div style=\"position: relative; width: 100%; height: 8px;\"&gt;\n                   &lt;div style=\"position: absolute; left: 50%; top: -4px; width: 2px; height: 16px; background: #ccc;\"&gt;&lt;/div&gt;\n                   &lt;div style=\"position: absolute; {direction_to_go}: 50%; top: 0; \n                               background: {hex_to_pass_in_fn}; height: 8px; width: {width}%; \n                               transform: translateX({translate_offset}); \n                               border-radius: 3px;\"&gt;&lt;/div&gt;\n                 &lt;/div&gt;\n               &lt;/div&gt;'\n            )\n          }  # for below, we treat direction 1 (very negative change) and 2 (very positive) virtually the same, only former goes from center to left while latter from center to right\n          else {\n            direction_to_go &lt;- if(direction == 1) \"right\" else \"left\"\n            str_glue(\n              '&lt;div style=\"display: flex; align-items: center; justify-content: center;\"&gt;\n                 &lt;div style=\"position: relative; width: 50%; height: 8px;\"&gt;\n                   &lt;div style=\"position: absolute; left: 50%; top: -4px; width: 2px; height: 16px; background: #ccc; transform: translateX(-1px);\"&gt;&lt;/div&gt;\n                   &lt;div style=\"position: absolute; {direction_to_go}: 50%; top: -4px; background: {hex_to_pass_in_fn}; height: 8px; width: {width}%; border-radius: 3px;\"&gt;&lt;/div&gt;\n                 &lt;/div&gt;\n               &lt;/div&gt;'\n            )\n          }\n        })\n      }\n    ) |&gt;\n    cols_align(\n      align = \"center\",\n      columns = perc_change\n    ) |&gt; \n    tab_style(\n      style = cell_text(color = hex),\n      locations = cells_body(columns = perc_change)\n    ) |&gt; \n    tab_style(\n      style = css(\"white-space\" = \"nowrap\"),\n      locations = cells_body(columns = country)\n      ) |&gt; \n    cols_label(\n      country = md(\"**Country**\"),\n      perc_change = \"\",\nperc_change_num = htmltools::HTML(\"&lt;span style='white-space: nowrap;'&gt;&lt;strong&gt;Change vs. 2024&lt;/strong&gt;&lt;/span&gt;\")    \n) |&gt; \n    opt_table_font(\n      font = c(\"franklin-medium\"),\n      weight = 500\n    ) |&gt; \n    tab_options(\n      heading.align = \"left\",\n      table.width = pct(100), \n      table.border.top.style = \"hidden\",             \n      column_labels.border.bottom.style = \"solid\",\n      column_labels.border.bottom.width = px(1),\n      column_labels.border.bottom.color = \"white\",\n    ) |&gt; \n    cols_width(\n    country ~ pct(50),\n    perc_change ~ pct(50),\n    perc_change_num ~ pct(50)\n    ) \n}\n\n# generate and assign tables below \ntbl1 &lt;- gt_table_custom_(hex = '#d65f00', direction = 1) |&gt; \n  tab_header(\n    title = md(\"**Where U.S.-bound summer flight bookings have &lt;span style='color: #d65f00;'&gt; decreased &lt;/span&gt;...**\")\n    ) |&gt; \n    tab_options(\n    heading.padding = px(8.7)\n  )\n\ntbl2 &lt;- gt_table_custom_(hex = '#666666', direction = 2) |&gt; \n  tab_header(\n    title = md(\"&lt;span style='color: #666666;'&gt;**... stayed about the same ...**&lt;/span&gt;\"),\n    subtitle = md(\"&lt;span style='color: #FFFFFF;'&gt;adding artificial padding.**&lt;/span&gt;\")\n  ) |&gt; \n    tab_options(\n    heading.padding = px(6)\n  )\n\ntbl3 &lt;- gt_table_custom_(hex = '#2b9d6c', direction = 3) |&gt; \n    tab_header(\n    title = md(\"**... and &lt;span style='color: #2b9d6c;'&gt;increased&lt;/span&gt;.**\"),\n    subtitle = md(\"&lt;span style='color: #FFFFFF;'&gt;adding artificial.** padding&lt;/span&gt;\")\n  ) |&gt; \n    tab_options(\n    heading.padding = px(6)\n  )\n\ntables_row_layout &lt;- htmltools::tags$div(\n  style = \"display: flex; justify-content: space-between; align-items: flex-start; gap: 20px; width: 100%; padding: 0 10px;\",\n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl1), \n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl2),\n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl3)\n)\n\ncaption_text &lt;- \"&lt;span style='color:#707070;'&gt;Source: Airlines Reporting Corporation &bull; Data covers flight bookings made between Feb. 1 and April 13 for travel between Memorial Day and Labor Day, compared to the same period last year.&lt;/span&gt;\"\ncaption_html_content &lt;- HTML(caption_text) \nleft_padding_value &lt;- \"20px\" # adding some padding so that caption moves slightl to the right to match original's caption poisiton \n\ncaption_styled_div &lt;- htmltools::tags$div(\n  style = paste(\n    \"width: 50%;\",  # overall visual span\n    \"max-width: 1000px;\", # optional cap the max width of the caption\n    \"margin: 5px auto 0 auto;\", \n    \"text-align: left;\",\n    \"font-family: 'franklin-medium', 'Libre Franklin', Arial, sans-serif;\", # prioritize 'franklin-medium'\n    \"font-weight: 500;\",                                                 \n    \"font-size: 0.85em;\", \n    \"line-height: 1.1;\",\n    paste0(\"padding-left: \", left_padding_value, \";\") \n  ),\n  caption_html_content\n)\n\n# This parent div will stack them vertically and can be used to constrain overall width.\noverall_final_layout &lt;- htmltools::tags$div(\n  style = \"width: 100%; max-width: 1900px; margin: 0 auto; padding-bottom: 1px;\", # Constrain total width, center on page, add bottom padding\n  tables_row_layout,\n  caption_styled_div\n)\n\n# To display in a Quarto/R Markdown document, ensure this is the last object evaluated in the chunk:\noverall_final_layout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhere U.S.-bound summer flight bookings have  decreased …\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nCanada\n-21%\n\n\n\n\n\n\n\n\n\n\n\n\nNetherlands\n-17%\n\n\n\n\n\n\n\n\n\n\n\n\nGermany\n-12%\n\n\n\n\n\n\n\n\n\n\n\n\nEcuador\n-11%\n\n\n\n\n\n\n\n\n\n\n\n\nMexico\n-9%\n\n\n\n\n\n\n\n\n\n\n\n\nDom. Rep.\n-9%\n\n\n\n\n\n\n\n\n\n\n\n\nSwitzerland\n-8%\n\n\n\n\n\n\n\n\n\n\n\n\nChina\n-7%\n\n\n\n\n\n\n\n\n\n\n\n\nSouth Korea\n-5%\n\n\n\n\n\n\n\n\n\n\n\n\nIndia\n-4%\n\n\n\n\n\n\n\n\n\n\n\n\nPoland\n-4%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n… stayed about the same …\n\n\nadding artificial padding.**\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nU.K.\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nFrance\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nColombia\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nItaly\n0%\n\n\n\n\n\n\n\n\n\n\n\n\nPhilippines\n+1%\n\n\n\n\n\n\n\n\n\n\n\n\nGreece\n+1%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n… and increased.\n\n\nadding artificial.** padding\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nCosta Rica\n+3%\n\n\n\n\n\n\n\n\n\n\n\n\nBrazil\n+4%\n\n\n\n\n\n\n\n\n\n\n\n\nAustralia\n+6%\n\n\n\n\n\n\n\n\n\n\n\n\nSpain\n+8%\n\n\n\n\n\n\n\n\n\n\n\n\nPortugal\n+8%\n\n\n\n\n\n\n\n\n\n\n\n\nJapan\n+11%\n\n\n\n\n\n\n\n\n\n\n\n\nIreland\n+11%\n\n\n\n\n\n\n\n\n\n\n\n\nArgentina\n+39%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Airlines Reporting Corporation • Data covers flight bookings made between Feb. 1 and April 13 for travel between Memorial Day and Labor Day, compared to the same period last year."
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#travel-score-cards",
    "href": "holder-chokshi-granados-article-TravelToUS.html#travel-score-cards",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "Travel Score Cards",
    "text": "Travel Score Cards\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: true\n\ntheme_set_custom()\n\np1_tribble &lt;- tribble(\n  ~perc_change, ~label, ~region, ~fill, ~width_cm, ~ length_cm, \n  '-1.5%', 'International arrivals\\n at U.S. airports', 'International','#969696', 170 / 300 * 2.54, 80 / 300 * 2.54, # converting into actual cm, controlling for resolution set (300 or print quality)\n  '-2%', 'Summer flight\\n bookings from Europe', 'Europe', '#969696', 130 / 300 * 2.54, 77 / 300 * 2.54,\n  '+4%', 'Summer flight\\n bookings from Asia', 'Asia', '#2b9d6c', 130 / 300 * 2.54, 77/ 300 * 2.54,\n  '-21%', 'Summer flight\\n bookings from Canada', 'Canada', '#d65f00', 164 / 300 * 2.54, 77 / 300 * 2.54\n)\n\n# here i go for an interactive process whereby each plot is created separately in a list of plots; one main reason is that the boxes/rectangles are of different sizes. \ntile_plot_rounded &lt;- function(perc_change, label_text, fill, width_cm, length_cm, scaler = 3) { # 3 was best here\n  library(grid) # for some reason, roundrectGrob() wasn't running without first loading grid here too (even if called earlier when loading all packages)\n  ggplot() +\n    ggtitle(label_text) + # set the label as thes plot sub-title\n    annotation_custom(\n      grob = roundrectGrob(\n        width = unit(width_cm * scaler, \"cm\"),    \n        height = unit(length_cm * scaler, \"cm\"), \n        r = unit(0.1, \"npc\"),  # corner radius, the higher the values the more prononcoumced the roundedness\n        gp = gpar(fill = fill, col = NA)\n      ),\n      xmin = 0, xmax = 6, ymin = 0, ymax = 3\n    ) +\n    annotate(\n    \"text\", \n      x = 3, y = 1.5,\n      hjust = 0.5, vjust = 0.5,\n      size = 10, # text size for perc_change\n      label = perc_change,\n      color = 'white', \n      family = 'franklin',\n      fontface = 'bold'\n    ) +\n    xlim(0, 6) + ylim(0, 3) +\n    coord_fixed(ratio = 1) + \n    theme_void() +\n    theme(\n      plot.margin = margin(4, 2, 2, 2), # small margins add around each plot for more subtitle room\n      plot.title = element_text(hjust = 0.5, size = 14, family = 'franklin-medium', margin = margin(b = 5)) # this is a midway font face between plain and bold\n    )\n}\n# loop through labels, fills, and dimensions, and including 'label' for the title\ntile_plots &lt;- pmap(\n  list(\n    perc_change = p1_tribble$perc_change,\n    label_text = p1_tribble$label, \n    fill = p1_tribble$fill,\n    width_cm = p1_tribble$width_cm,\n    length_cm = p1_tribble$length_cm\n  ),\n  tile_plot_rounded \n)\n\n# assign one row so that all plots are side by side and not potentially stacked (vertically)\np1 &lt;- wrap_plots(\n  tile_plots, nrow = 1\n) \n# adds after wrap a title\np_final &lt;- p1 + \n  plot_annotation(\n    title = 'Travel compared with last year',\n    caption = 'Sources: U.S. Customs and Border Protection and the Airlines Reporting Corporation',\n    theme = theme(\n      plot.title = element_text(size = 20, family = 'franklin', face = \"bold\", hjust = 0.5, margin = margin(t = -10, b = 10)),\n      plot.caption = element_text(size = 9, family = 'franklin-medium', face = 'bold', colour = '#727272', hjust = 0.15)\n      )\n  ) \np_final",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#international-arrivals-at-major-u.s.-airports",
    "href": "holder-chokshi-granados-article-TravelToUS.html#international-arrivals-at-major-u.s.-airports",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "International arrivals at major U.S. airports",
    "text": "International arrivals at major U.S. airports\n\nPlaceholder for plot 2- line plots for Q1 2024 vs Q1 2025 in Intl. arrivals at major US airports\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: true\n\n## p3; table to embed in gt() \n# read in the correspoinding table node\nurl &lt;- 'https://www.nytimes.com/interactive/2025/04/30/world/us-travel-decline.html'\nraw_table &lt;- \n  read_html(url) |&gt; \n  html_element(css = '.svelte-5z6yzk') |&gt; \n  html_table() |&gt; \n  select(country = 1, perc_change = 2) |&gt; \n  filter(perc_change != '')\n\n# processing the tibble\nindividual_country_changes &lt;- \n  raw_table |&gt; \n  mutate(\n    perc_change_num = parse_number(perc_change),\n    left_right_ended = if_else(perc_change_num &lt;= -.02, 'left', 'right'),\n    # below also going to be used to section off the table into 3 columns\n    change_direction = case_when(\n      between(perc_change_num, -2, 1) ~ 'stalled',\n      perc_change_num &lt; 0 ~ 'decreased',\n      .default = 'increased') \n  ) |&gt; \n  mutate(\n    groupings = case_when(\n      n() == 11 ~ 1,\n      n() ==  6 ~ 2,\n      .default = 3),\n    .by = change_direction\n    )",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#confidence-but-warning-signs",
    "href": "holder-chokshi-granados-article-TravelToUS.html#confidence-but-warning-signs",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "Confidence, but Warning Signs",
    "text": "Confidence, but Warning Signs\nFor the below visualization, I opted to use gt() from gt package as it naturally comes to mind when trying to build ‘great tables’, yes pun intended. A few things to mention here to explain my thought process. \n\nClearly the tables go over the left/right margins of the article layout in the original. While our dimensions may allow for all 3 tables to fit side by side, for replication purposes, we ‘push out’ the margins or reduce them to make them all 3 tables fit side by side.\n\nSecond, one other thing that stands out is the clear customization of the third column, the percent change actual values, where a target bar plot of some sort is drawn. To replicate that, one way (potentially only way) is to use text_transform(), in tandem with a custom function using fn argument that will incorporate mostly css code. This allows for greater customization down to the minutiae.\n\nSaid last column is also centered and anchored using a small vertical tick (this is most visible in the middle plot where values alternate between negative (left) and positive (right) of tick. \n\nFrom the tick each value is gauged on their max for that table, to get a sense of proportionality and make sure each bar’s no. of pixels proportionally match to the greatest (absolute) value per table.\n\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|results: 'asis' \n\ngt_table_custom_ &lt;- function(hex, direction, title = NULL) {\n  \n  title_ &lt;- title\n  hex_to_pass_in_fn &lt;- hex\n  dir_to_pass_in_fn &lt;- direction\n  \n  individual_country_changes |&gt; \n    filter(groupings == {{direction}}) |&gt; \n    select(1:3) |&gt; \n    gt() |&gt; \n    text_transform(\n      locations = cells_body(columns = perc_change_num),\n      fn = function(x) {\n        x_num &lt;- as.numeric(x)\n        max_val &lt;- max(abs(x_num), na.rm = TRUE)\n        if(max_val == 0) max_val &lt;- 1 \n        widths_for_glue &lt;- abs(x_num) / max_val * if (dir_to_pass_in_fn == 2) 8 else 100 # default scaling may look misleaading for 'no change' countries, so massively reduced here otherwise center table values get way inflated for what they are ([-2; 1])\n        \n        # loop thru values of perc_change column and isolate each element so that it can pass thru str_glue() without length(x) &gt; 1 error from if/else statement\n        purrr::map_chr(seq_along(x_num), function(x) {\n          width &lt;- widths_for_glue[x]\n          val &lt;- x_num[x]\n          \n          if(dir_to_pass_in_fn == 2) {\n            direction_to_go &lt;- if(val &lt; 0) \"right\" else \"left\"\n            translate_offset &lt;- if(val &lt;= -2) \"20%\" else \"0\" # translate back to the origin for values &gt;= -.02 (this gets applied only for no-change countries/middle table)\n            str_glue(\n              '&lt;div style=\"display: flex; align-items: center; justify-content: center;\"&gt;\n                 &lt;div style=\"position: relative; width: 100%; height: 8px;\"&gt;\n                   &lt;div style=\"position: absolute; left: 50%; top: -4px; bottom: 4px;width: 2px; height: 16px; background: #ccc;\"&gt;&lt;/div&gt;\n                   &lt;div style=\"position: absolute; {direction_to_go}: 50%; top: 0; \n                               background: {hex_to_pass_in_fn}; height: 8px; width: {width}%; \n                               transform: translateX({translate_offset}); \n                               border-radius: 3px;\"&gt;&lt;/div&gt;\n                 &lt;/div&gt;\n               &lt;/div&gt;'\n            )\n          }  # for below, we treat direction 1 (very negative change) and 2 (very positive) virtually the same, only former goes from center to left while latter from center to right\n          else {\n            direction_to_go &lt;- if(direction == 1) \"right\" else \"left\"\n            str_glue(\n              '&lt;div style=\"display: flex; align-items: center; justify-content: center;\"&gt;\n                 &lt;div style=\"position: relative; width: 50%; height: 8px;\"&gt;\n                   &lt;div style=\"position: absolute; left: 50%; top: -8px; width: 2px; height: 16px; background: #ccc; transform: translateX(-1px);\"&gt;&lt;/div&gt;\n                   &lt;div style=\"position: absolute; {direction_to_go}: 50%; top: -4px; background: {hex_to_pass_in_fn}; height: 8px; width: {width}%; border-radius: 3px;\"&gt;&lt;/div&gt;  \n                 &lt;/div&gt;\n               &lt;/div&gt;'\n            )\n          }\n        })\n      }\n    ) |&gt;\n    cols_align(\n      align = \"center\",\n      columns = perc_change\n    ) |&gt; \n    tab_style(\n      style = cell_text(color = hex),\n      locations = cells_body(columns = perc_change)\n    ) |&gt; \n    tab_style(\n      style = css(\"white-space\" = \"nowrap\"),\n      locations = cells_body(columns = country)\n      ) |&gt; \n    cols_label(\n      country = md(\"**Country**\"),\n      perc_change = \"\",\nperc_change_num = htmltools::HTML(\"&lt;span style='white-space: nowrap;'&gt;&lt;strong&gt;Change vs. 2024&lt;/strong&gt;&lt;/span&gt;\")    \n) |&gt; \n    opt_table_font(\n      font = c(\"franklin-medium\"),\n      weight = 500\n    ) |&gt; \n    tab_options(\n      heading.align = \"left\",\n      table.width = pct(100), \n      table.border.top.style = \"hidden\",             \n      column_labels.border.bottom.style = \"solid\",\n      column_labels.border.bottom.width = px(1),\n      column_labels.border.bottom.color = \"white\",\n    ) |&gt; \n    cols_width(\n    country ~ pct(50),\n    perc_change ~ pct(50),\n    perc_change_num ~ pct(50)\n    ) \n}\n\n# generate and assign tables below \ntbl1 &lt;- gt_table_custom_(hex = '#d65f00', direction = 1) |&gt; \n  tab_header(\n    title = md(\"**Where U.S.-bound summer flight bookings have &lt;span style='color: #d65f00;'&gt; decreased &lt;/span&gt;...**\")\n    ) |&gt; \n    tab_options(\n    heading.padding = px(8.7)\n  )\n\ntbl2 &lt;- gt_table_custom_(hex = '#666666', direction = 2) |&gt; \n  tab_header(\n    title = md(\"&lt;span style='color: #666666;'&gt;**... stayed about the same ...**&lt;/span&gt;\")\n    # subtitle = md(\"&lt;span style='color: #FFFFFF;'&gt;adding artificial padding.**&lt;/span&gt;\")\n  ) |&gt; \n    tab_options(\n    heading.padding = px(9.2)\n  )\n\ntbl3 &lt;- gt_table_custom_(hex = '#2b9d6c', direction = 3) |&gt; \n    tab_header(\n    title = md(\"**... and &lt;span style='color: #2b9d6c;'&gt;increased&lt;/span&gt;.**\")\n    # subtitle = md(\"&lt;span style='color: #FFFFFF;'&gt;adding artificial.** padding&lt;/span&gt;\")\n  ) |&gt; \n    tab_options(\n    heading.padding = px(9.2)\n  )\n\ntables_row_layout &lt;- htmltools::tags$div(\n  style = \"display: flex; justify-content: space-between; align-items: flex-start; gap: 20px; width: 100%; padding: 0 10px;\",\n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl1), \n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl2),\n  htmltools::tags$div(style = \"flex: 1; min-width: 0;\", tbl3)\n)\n\ncaption_text &lt;- \"&lt;span style='color:#707070;'&gt;Source: Airlines Reporting Corporation &bull; Data covers flight bookings made between Feb. 1 and April 13 for travel between Memorial Day and Labor Day, compared to the same period last year.&lt;/span&gt;\"\ncaption_html_content &lt;- HTML(caption_text) \nleft_padding_value &lt;- \"20px\" # adding some padding so that caption moves slightl to the right to match original's caption poisiton \n\ncaption_styled_div &lt;- htmltools::tags$div(\n  style = paste(\n    \"width: 50%;\",  # overall visual span\n    \"max-width: 1000px;\", # cap the max width of the caption\n    \"margin: 5px auto 0 auto;\", \n    \"text-align: left;\",\n    \"font-family: 'franklin-medium', 'Libre Franklin', Arial, sans-serif;\", # prioritize 'franklin-medium'\n    \"font-weight: 500;\",                                                 \n    \"font-size: 0.85em;\", \n    \"line-height: 1.1;\",\n    paste0(\"padding-left: \", left_padding_value, \";\") \n  ),\n  caption_html_content\n)\n\n# parent div will stack them vertically and can be used to constrain overall width.\noverall_final_layout &lt;- htmltools::tags$div(\n  style = \"width: 100%; max-width: 1900px; margin: 0 auto; padding-bottom: 1px;\",\n  tables_row_layout,\n  caption_styled_div\n)\n# final output\noverall_final_layout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhere U.S.-bound summer flight bookings have  decreased …\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nCanada\n-21%\n\n\n\n\n\n\n\n\n\n\n\n\nNetherlands\n-17%\n\n\n\n\n\n\n\n\n\n\n\n\nGermany\n-12%\n\n\n\n\n\n\n\n\n\n\n\n\nEcuador\n-11%\n\n\n\n\n\n\n\n\n\n\n\n\nMexico\n-9%\n\n\n\n\n\n\n\n\n\n\n\n\nDom. Rep.\n-9%\n\n\n\n\n\n\n\n\n\n\n\n\nSwitzerland\n-8%\n\n\n\n\n\n\n\n\n\n\n\n\nChina\n-7%\n\n\n\n\n\n\n\n\n\n\n\n\nSouth Korea\n-5%\n\n\n\n\n\n\n\n\n\n\n\n\nIndia\n-4%\n\n\n\n\n\n\n\n\n\n\n\n\nPoland\n-4%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n… stayed about the same …\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nU.K.\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nFrance\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nColombia\n-2%\n\n\n\n\n\n\n\n\n\n\n\n\nItaly\n0%\n\n\n\n\n\n\n\n\n\n\n\n\nPhilippines\n+1%\n\n\n\n\n\n\n\n\n\n\n\n\nGreece\n+1%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n… and increased.\n\n\nCountry\n\nChange vs. 2024\n\n\n\n\nCosta Rica\n+3%\n\n\n\n\n\n\n\n\n\n\n\n\nBrazil\n+4%\n\n\n\n\n\n\n\n\n\n\n\n\nAustralia\n+6%\n\n\n\n\n\n\n\n\n\n\n\n\nSpain\n+8%\n\n\n\n\n\n\n\n\n\n\n\n\nPortugal\n+8%\n\n\n\n\n\n\n\n\n\n\n\n\nJapan\n+11%\n\n\n\n\n\n\n\n\n\n\n\n\nIreland\n+11%\n\n\n\n\n\n\n\n\n\n\n\n\nArgentina\n+39%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Airlines Reporting Corporation • Data covers flight bookings made between Feb. 1 and April 13 for travel between Memorial Day and Labor Day, compared to the same period last year.\n\n\n\n\n\nUnlike the line graphs from earlier, showing the Intl. Arrivals, where the graph was embedded as an image, here I was able to extract the actual data using the tag id pointing out to the table using Selector Gadget - a free reliable Chrome Extension that can be used to identify either the CSS selector or Xpath of site elements - in tandem with rvest to read in the embedded data from said selector into a tibble. Note that within gtExtras, there already is an New York Times custom theme table using gtExtras::gt_theme_nytimes(), but did not closely match the style of the headers or the overall style of the tables; but it’s good to know if you are working with your own d¬ata (not replicating another piece), and you’re just ready to use a starter template or its boilerplate to at least test how it looks, if nothing else.  Overall, I think this is a fairly solid replication of the tables from the original, a piece I’ve enjoyed creating as it involved fairly advanced customization - overall it was deceptively simple to re-create, but worth it. One thing to call out however is that these tables are optimized for desktop viewing due to their 100% width formatting. Mobile users may experience cramped display issues.",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#a-canadian-boycott",
    "href": "holder-chokshi-granados-article-TravelToUS.html#a-canadian-boycott",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "A Canadian boycott",
    "text": "A Canadian boycott\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\ntheme_set_custom()\n\ncar_xing_ca_us_borders_py &lt;- read_csv('car_crossing_ca_us_borders.csv') |&gt;\n  distinct()\n\ncar_xing_ca_us_borders_cy &lt;- read_csv('car_crossing_ca_us_borders2.csv') |&gt; \n  distinct()\n\n# i am testing with below filters \n# 1st, 2nd filter should only focus on Canadian nationals and or residents (article focuses on Canadian sentiment; with use of strong word such as boycott, so assuming we should look into Canada returns only, not Intl. returns from US into Canada)\n# 3nd filter -&gt; 'Vehicles' is a major group (when 'automobiles' and 'motorcycles' are subgroups) so filtering to 'Vehicles' so that not to inflate the counts, but the plot caption in the original article mentions 'by automobile' so we filter t\n# 4rd filter same idea as in 2nd but here -&gt; 'Travellers' is a major group after a quick calculation for one day as an example where all values for that day sumn up to 'Travellers' value \n\nfiltered_to_canadian_cy &lt;-\n  car_xing_ca_us_borders_cy |&gt; \n  filter(\n    `Traveller characteristics` == 'Canadian resident visitors returning to Canada' & `Vehicle licence plate` == 'Canadian-plated vehicles entering Canada' & GEO == 'Canada' &\n    `Vehicle type` == 'Automobiles' & `Traveller type` == 'Travellers'\n    ) |&gt; \n  # above combination of filters is giving me exactly 1 record per day (without any aggregations/roll ups) and it also gives me 116 days (Jan 1 through to Apr 26th, so we stick to those filters; likely correct)\n  select(\n    crossing_date = 1,\n    travel_characteristic = 6,\n    travel_type = 7, \n    vehicle_ttl = ncol(car_xing_ca_us_borders_cy) - 4\n    ) \n\n# same with py (or prior year)\nfiltered_to_canadian_py &lt;- \n  car_xing_ca_us_borders_py |&gt; \n    filter(\n    `Traveller characteristics` == 'Canadian resident visitors returning to Canada' & `Vehicle licence plate` == 'Canadian-plated vehicles entering Canada' & GEO == 'Canada' &\n    `Vehicle type` == 'Automobiles' & `Traveller type` == 'Travellers'\n    ) |&gt; \n  select(\n    crossing_date = 1,\n    travel_characteristic = 6,\n    travel_type = 7, \n    vehicle_ttl = ncol(car_xing_ca_us_borders_py) - 4\n    ) |&gt; # 117 days for py since it was leap year, so we filter out feb 29th to have a day over day comparison\n  filter(crossing_date != '2024-02-29')\n  \n# combining both sets \ncar_xing_change &lt;- \n  filtered_to_canadian_cy |&gt; \n  select(1, last_col()) |&gt; \n  arrange(crossing_date) |&gt; \n  bind_cols(\n    filtered_to_canadian_py |&gt; \n      arrange(crossing_date) |&gt; \n      select(ly_ttls = last_col())\n  ) |&gt; \n  mutate(\n    change = vehicle_ttl - ly_ttls,\n    change_perc = (vehicle_ttl - ly_ttls) / ly_ttls\n    ) |&gt; \n    filter(crossing_date &lt; '2025-04-10') |&gt; \n  # add a rolling 7 day avg\n  mutate(\n    rolling_avg_7day = zoo::rollmean(change_perc, k = 7, fill = NA, na.rm = TRUE)\n    ) |&gt; \n  filter(!is.na(rolling_avg_7day))\n\n# first two months get abbreviated followed by a dot, while last two don't get abbreviated\nmonth_custom_labeller &lt;- \n  map_chr(\n  .x = car_xing_change |&gt; \n    pull(crossing_date) |&gt; \n    lubridate::month() |&gt; \n    unique() |&gt; \n    sort(), \n  .f = function(x) \n    case_when(\n      x &gt; 2 ~ month(x, label = TRUE, abbr = FALSE),\n      .default = paste0(month(x, label = TRUE, abbr = TRUE), '.')\n      )\n  )\n  \ncaption_text &lt;- \"&lt;span style='color:#707070;'&gt;Sources: Statistics Canada/K. Kardous Note: Data shows journeys by Canadian residents returning to Canada from the&lt;br&gt; U.S. by automobile. A 7-day rolling average is shown.&lt;/span&gt;\"\n\ncar_xing_change |&gt; \n    mutate(\n        y_pos = pmax(rolling_avg_7day, 0),  # positive values only; this caps at 0 for &lt; 0 so to create essentially two seperate series (one pos. and one negative)\n        y_neg = pmin(rolling_avg_7day, 0)   # negative values only\n    ) |&gt; \n  ggplot(aes(x = crossing_date)) + \n  geom_area(aes(y = y_pos), fill = '#2b9d6c', outline.type = 'lower') +\n  geom_area(aes(y = y_neg), fill = '#d65f00', outline.type = 'lower') +\n  geom_hline(yintercept = 0) + \n  labs(\n    x = NULL, \n    y = NULL,\n    caption = caption_text\n    ) + \n  scale_y_continuous(\n    labels = scales::percent\n    ) + \n  scale_x_date(\n    breaks = seq(as.Date('2025-01-01'), as.Date('2025-04-09'), 'm'),\n    labels = month_custom_labeller\n    ) +\n  # arrow and text for negative region\n  annotate(\n    geom = \"segment\",\n    x = as.Date('2025-04-04'),    \n    xend = as.Date('2025-04-04'), \n    y = -0.02,                    \n    yend = -0.1,                 \n    colour = \"black\",             \n    arrow = arrow(length = unit(0.1, \"cm\"), angle = 50, type = 'open'),\n    linewidth = .35\n  ) + \n  annotate(\n    geom = 'text',\n    x = as.Date('2025-04-02'),\n    y = -0.06,\n    label = 'Less travel\\nthan last year', \n    hjust = 1,\n  ) +\n  # arrow and text for positive region\n    annotate(\n    geom = \"segment\",\n    x = as.Date('2025-04-04'),    \n    xend = as.Date('2025-04-04'), \n    y = 0.025,                    \n    yend = 0.1,                 \n    colour = \"black\",             \n    arrow = arrow(length = unit(0.1, \"cm\"), angle = 50, type = 'open'),\n    linewidth = .35\n  ) +\n    annotate(\n    geom = 'text',\n    x = as.Date('2025-04-02'),\n    y = 0.06,\n    label = 'More travel\\nthan last year', \n    hjust = 1\n    ) + \n    ggtitle(\n    label = \"&lt;span style='color:black;'&gt;Car crossings at the Canada-U.S. border\",\n    subtitle = \"&lt;span style='color:#777777;'&gt;Change compared with same day last year\"\n  ) +\n  theme(\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title = element_markdown(hjust = .5),\n    plot.subtitle = element_markdown(hjust = .5),\n    plot.caption = element_markdown(\n      size = 8, hjust = 0, \n      margin = margin(l = -20, r = 10, t = 10, b = -5)\n      ),\n    axis.text = element_text(family = 'franklin-medium', face = 'bold'),\n    axis.text.x = element_text(hjust = -.9)\n  )",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  },
  {
    "objectID": "holder-chokshi-granados-article-TravelToUS.html#big-drops-along-the-border",
    "href": "holder-chokshi-granados-article-TravelToUS.html#big-drops-along-the-border",
    "title": "\nReplication of below article’s Data and Visualizations“Has International Travel  to the U.S. Really Collapsed?” By Josh Holder, Niraj Chokshi and Samuel Granados  Karim K. Kardous       \n",
    "section": "Big drops along the border",
    "text": "Big drops along the border\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(rnaturalearth)\nlibrary(tidygeocoder)\nlibrary(sf)\nlibrary(rnaturalearthdata)\ntheme_set_custom()\n# steps to recreate last plot/map displaying drops in border crossings between Canada and US\n# tested it on 1 example/1 port with Only ports with at least 1,000 crossings in March 2025\n# and the results match the visual to a percentage + or -\n## go to below lins for 2024\n# https://www150.statcan.gc.ca/t1/tbl1/en/cv!recreate.action?pid=2410005301&selectedNodeIds=1D146,2D3,2D18,2D41,2D42,2D75,2D91&checkedLevels=2D1&refPeriods=20240301,20240301&dimensionLayouts=layout2,layout3,layout2,layout2&vectorDisplay=false\n## go to below link for 2025\n# https://www150.statcan.gc.ca/t1/tbl1/en/cv!recreate.action?pid=2410005301&selectedNodeIds=1D146,2D41,2D42&checkedLevels=2D1,2D2&refPeriods=20250301,20250301&dimensionLayouts=layout3,layout3,layout3,layout2&vectorDisplay=false\n\n# filters applied to test on Niagara Falls - Queenston Bridge\n# \" GEOGRAPHY\n# Select specific levels only -&gt; keep blank\n# Niagara Area -&gt; check only Niagara Falls - Queenston Bridge\n#  TRAVELLER CHARACTERISITCS\n# Select specific levels only -&gt; keep blank\n# Canadian-resident visitors returning to Canada -&gt; check only Canadian residents returning from the United States of America \n#  TRAVELLER TYPE\n# Keep defaults (all checked; 'Travellers' is a the final rollup number/totl)\n#  REFERENCE PERIOD\n# March 2024\n# \n# SAME EXACT STEPS FOR 2025\n\n# DOWNLOAD BOTH AS CSVs and select 'Download selected data (for database loading) \"\n# (56331 - 103307) / 103307 # Niagara Falls - Rainbow Bridge\n# (90202 - 144738) / 144738 # Niagara Falls - Queenston Bridge\n# (0.3768 + 0.4547 ) / 2\n\n# let's try to recreate those figures now that we have loaded the full datasets\nmap_data_ca_xings &lt;- \n  read.csv('/Users/kardouskarrim/Desktop/2024_ca_us_ttl_xing_main_ports.csv') |&gt; \n  # mutate(year = 2025) |&gt; \n  clean_names() |&gt; \n  bind_rows(\n    read_csv('/Users/kardouskarrim/Desktop/2025_ca_us_ttl_xing_main_ports.csv') |&gt; \n      # mutate(year = 2024) |&gt; \n      clean_names()\n  ) |&gt; \n  as_tibble()\n\ninvisible(\n  {\n  map_data_ca_xings |&gt; \n    mutate(\n      ref_year = word(ref_date, 1, sep = '\\\\-')\n    ) |&gt; \n    filter(\n      traveller_type == 'Travellers' &\n        geo %in% c('Niagara Falls - Queenston Bridge', 'Niagara Falls - Rainbow Bridge') &\n        str_detect(traveller_characteristics, 'Canadian residents')\n    ) |&gt; \n    count(ref_year, geo, crossings = value) |&gt; \n    summarise(\n      perc_change_niagara_busiest_2ports = (\n        sum(ifelse(ref_year == 2025, crossings, 0)) - sum(ifelse(ref_year == 2024, crossings, 0))\n      ) / \n        sum(ifelse(ref_year == 2024, crossings, 0))\n    ) # 41% decline - article says 42%; close enough; some values, especially for 2025 may have been preliminary and may have been slightly adjusted \n  }\n)\n\n# let's create a function now that loops thru all major ports name and generate a port name by % decline (2 column tibble)\nport_name_list &lt;- map_data_ca_xings |&gt; pull(geo) |&gt; unique()\nperc_change_by_port &lt;- function(x, port_name){\n  \n  map_data_ca_xings |&gt; \n    mutate(\n      ref_year = word(ref_date, 1, sep = '\\\\-')\n    ) |&gt; \n    filter(\n      traveller_type == 'Travellers' & \n        str_detect(traveller_characteristics, 'Canadian residents') &\n        geo %in% port_name\n    ) |&gt; \n    count(ref_year, geo, crossings = value) |&gt; \n    filter(crossings &gt;= 1000) |&gt; \n    summarise(\n      perc_change = (\n        sum(ifelse(ref_year == 2025, crossings, 0)) - sum(ifelse(ref_year == 2024, crossings, 0))\n      ) / \n        sum(ifelse(ref_year == 2024, crossings, 0)),\n      .by = geo\n    ) |&gt; \n    filter(geo != 'Canada' & !is.na(perc_change) & between(abs(perc_change), 0, 1)) |&gt; \n    mutate_if(is.numeric, function(x) round(x, 2))\n}\nport_names_with_perc_changes &lt;- map_dfr(.x = port_name_list, ~ perc_change_by_port(port_name = .x)) \n# Canada as a whole country, has seen 24% fewer passengers in March 2025 vs. March 2024\n# adding lat/longs to then be able to add as a alayer on the map\nport_coords &lt;- tribble(\n  ~geo, ~latitude, ~longitude,\n  \"Niagara Falls - Queenston Bridge\",        43.1633, -79.0507,\n  \"Niagara Falls - Rainbow Bridge\",          43.0896, -79.0703,\n  \"Niagara Falls - Whirlpool Bridge\",        43.1051, -79.0645,\n  \"St. Stephen - 3rd Bridge\",                45.1856, -67.2792,\n  \"St. Stephen - ferry and other locations\", 45.2025, -67.2783,\n  \"St-Armand/Philipsburg\",                   45.0412, -73.0486,\n  \"Stanstead: Route 55\",                     45.0036, -72.0981,\n  \"Stanstead: Route 143\",                    45.0066, -72.1047,\n  \"Lacolle: Route 221\",                      45.0878, -73.3717,\n  \"Lacolle: Route 223\",                      45.0861, -73.3597,\n  \"St-Bernard-de-Lacolle: Highway 15\",       45.0051, -73.3723,\n  \"Douglas\",                                 49.0033, -122.7578,\n  \"Pacific Highway\",                         49.0038, -122.7382,\n  \"Abbotsford/Huntingdon\",                   49.0027, -122.2555\n)\n# not run\n# port_names_with_perc_changes |&gt;\n#   left_join(\n#     port_coords\n#   ) |&gt;\n#   summarise(\n\n#     na_prop = 1 - mean(is.na(latitude))\n#     ) # currently only a 10% match rate from online searches, so let's explore tidygeoder package to get more granular\n# and see if we can extend the matching to at least 60-70% then we can at least go from there\n\nyet_to_match &lt;- port_names_with_perc_changes |&gt; \n  left_join(\n    port_coords\n  ) |&gt; \n  filter(is.na(latitude)) |&gt; \n  pull(geo) |&gt; \n  str_c(' Canada US border')\n\n# writing an if statement to check if geocode_arcgis is already created a temp qs file, so that we avoid redundant api calls (every time we run/render the doc)\ncache_file &lt;- \"geocoded.qs\"\ngeocode_arcgis &lt;- if (file.exists(cache_file)) {\n  qread(cache_file)\n} else {\n  geocode_arcgis &lt;- map_dfr(yet_to_match, ~ geo(address = .x, method = \"arcgis\"))\n  qsave(geocode_arcgis, cache_file)\n  geocode_arcgis\n}\n\n# this massively improved the matches- but let's see if those coordinates realisticall can be considered \n# border regions between CA and US \n\n# validating whether location pertains to the 49th horizontal or at least not further than 200km away\n\n\n\n Show the code#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n#|eval: false\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(rnaturalearth)\nlibrary(tidygeocoder)\nlibrary(sf)\nlibrary(rnaturalearthdata)\ntheme_set_custom()\n\ninvisible(\n  {\n    validate_border_crossings &lt;- function(geocoded_df, max_km_from_49th = 200) {\n    \n    # Canada rough bounds\n    canada_lat &lt;- c(41.5, 84.0)\n    canada_lon &lt;- c(-141.0, -52.0)\n    \n    # simple distance to 49th parallel (main border)\n    distance_to_49th &lt;- function(lat) abs(lat - 49.0) * 111  # ~111 km per degree latitude\n    \n    geocode_arcgis |&gt;\n      filter(!is.na(lat), !is.na(long)) |&gt;\n      mutate(\n        within_canada = lat &gt;= canada_lat[1] & \n          lat &lt;= canada_lat[2] &\n          long &gt;= canada_lon[1] & \n          long &lt;= canada_lon[2],\n        \n        km_from_49th = distance_to_49th(lat),\n        \n        is_valid = within_canada & km_from_49th &lt;= max_km_from_49th,\n        \n        status = case_when(\n          !within_canada ~ \"outside canada bounds\",\n          km_from_49th &gt; max_km_from_49th ~ paste0(\"too far out (\", round(km_from_49th), \"km)\"),\n          TRUE ~ \"valid\"\n        )\n      )\n  }\n\n  # apply to your full dataset\n  validated_coords &lt;- validate_border_crossings(geocode_arcgis, max_km_from_49th = 300)\n  # using above threshold to sorta account for US 'curvature' into Canada, especially on the North-East region, \n  # as the border is not jsut one latitude/'horizontal' line \n  valid_coords &lt;- \n    validated_coords |&gt; \n    filter(is_valid) |&gt;\n    select(geo = address, lat, long) # this has moved from 10 matches up to 96 out of 140 ~ 70% match rate\n  # looking at no. of spikes in the article, 96 spikes should hopefully cover most if not all location of spikes in\n  # the article, which from visual insepction, looks like around 50 are draw/plotted on the Canada/US map/border\n  \n  # combine all tibbles into one with perc_changes\n  spike_prep &lt;- port_names_with_perc_changes |&gt; \n    left_join(\n      port_coords, \n      join_by(geo == geo)\n    ) |&gt; \n    left_join(\n      valid_coords |&gt; \n        mutate(\n          geo = str_remove(geo, ' Canada US border')\n        ),\n      join_by(geo == geo)\n    ) |&gt; \n    mutate(\n      latitude = coalesce(latitude, lat),\n      longitude = coalesce(longitude, long)\n    ) |&gt;\n    filter(!is.na(latitude)) |&gt; \n    select(geo:longitude) \n  }\n)\n## starting the work on the map \n\n# get map data\ninvisible({\n  countries &lt;- \n    ne_countries(scale = \"medium\", returnclass = \"sf\") %&gt;%\n    filter(name %in% c(\"United States of America\", \"Canada\"))\n})\ninvisible(capture.output({\n  # get great lakes\n  lakes &lt;- ne_download(\n    scale = \"medium\", \n    type = \"lakes\", \n    category = \"physical\", \n    returnclass = \"sf\"\n    ) %&gt;%\n    filter(\n      name %in% c(\n        \"Lake Ontario\", \"Lake Erie\", \"Lake Huron\", \n        \"Lake Michigan\", \"Lake Superior\")\n    )})\n)\n\n# crop to focus area - remove alaska\nmap_bounds &lt;- list(\n  xmin = -125, xmax = -65,\n  ymin = 41, ymax = 52\n)\n# filter out Alaska from US (longitude &gt; -140 is roughly Alaska)\ncontinental_us_canada &lt;- \n  countries |&gt;\n  mutate(\n    # create geometries without Alaska\n    geometry = case_when(\n      name == \"United States of America\" ~ st_crop(\n        geometry, xmin = -130, ymin = 20, xmax = -60, ymax = 50\n      ),\n      TRUE ~ geometry\n    )\n  ) |&gt;\n  # remove any empty geometries after cropping\n  filter(!st_is_empty(geometry))\n\n# combine all tibbles into one with perc_changes\nspike_prep_sf &lt;- \n  port_names_with_perc_changes |&gt; \n  left_join(\n    port_coords, \n    join_by(geo == geo)\n  ) |&gt; \n  left_join(\n    valid_coords |&gt; \n      mutate(\n        geo = str_remove(geo, ' Canada US border')\n      ),\n    join_by(geo == geo)\n  ) |&gt; \n  mutate(\n    latitude = coalesce(latitude, lat),\n    longitude = coalesce(longitude, long)\n  ) |&gt;\n  filter(!is.na(latitude)) |&gt; \n  select(geo:longitude) |&gt; \n  st_as_sf(\n    coords = c(\"longitude\", \"latitude\"), \n    crs = 4326, agr = \"constant\", \n    remove = FALSE\n  ) \n\n# generating regions for easier filtering of spikes\ncrossing_data &lt;- \n  spike_prep_sf |&gt; \n  filter(\n    abs(perc_change) &lt;= .50 & longitude &gt;= -122.76 & #exclude far west/Vancouver area and start at Douglas\n      !geo %in% c('Kelowna', 'Calgary Area', 'Calgary', 'Regina', '') \n  ) |&gt; \n  mutate(\n    perc_change = if_else(between(perc_change, -.39, -.23), perc_change / 10, perc_change)\n  ) |&gt; \n  # filter to match article criteria - only significant declines\n  filter(\n    abs(perc_change) &lt;= .45\n  ) %&gt;%\n  # add regional grouping for better selection\n  mutate(\n    region = case_when(\n      longitude &lt; -115 ~ \"west_coast\",\n      longitude &gt;= -115 & longitude &lt; -100 ~ \"prairie\", \n      longitude &gt;= -100 & longitude &lt; -85 ~ \"central\",\n      longitude &gt;= -85 ~ \"east\",\n      TRUE ~ \"other\"\n    ),\n    normalized_heights = abs(perc_change) / max(abs(perc_change))\n  )\n\n# select representative spikes by region to match article count (~40-50 total)\nselected_spikes &lt;- \n  crossing_data |&gt; \n  filter(latitude &lt;= 49.5 & longitude &lt; -65) |&gt; \n  group_by(region) |&gt; \n  arrange(perc_change) |&gt; # most negative first\n  mutate(\n    no = as.integer(case_when(\n      region == \"west_coast\" ~ 12,\n      region == \"prairie\" ~ 8, \n      region == \"central\" ~ 6,\n      region == \"east\" ~ 15,\n      TRUE ~ 3)\n    )\n  ) |&gt; \n  ungroup() |&gt; \n  slice(.by = region, 1:no) |&gt; \n  select(-no) |&gt; \n  bind_rows(\n    # pull select positive changes \n    crossing_data |&gt; \n      filter(perc_change &gt; 0) |&gt; \n      filter(longitude &lt; -65) \n  )\n\n# transform points to projected coordinate system; original is more elliptic in shape rather than a 'straight' plane\nselected_spikes_projected &lt;- \n  selected_spikes |&gt;\n  st_transform(crs = \"+proj=aeqd +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0\")\n\n# extract projected coordinates\nselected_spikes_coords &lt;- \n  selected_spikes_projected |&gt;\n  mutate(\n    proj_x = st_coordinates(geometry)[, 1],\n    proj_y = st_coordinates(geometry)[, 2]\n  ) |&gt;\n  st_drop_geometry()\n\n# create triangles using projected coordinates\ncreate_projected_triangles &lt;- function(data, height_scalar = 1) {\n  \n  height_mult &lt;&lt;- height_scalar\n  # function to create a triangle for each point using projected coordinates\n  create_triangle &lt;- function(x, y, perc_change, normalized_heights, height_mult) {\n    \n    # base width and height in projected units (meters)\n    base_width &lt;- 8e4  # 80km base width\n    height &lt;- abs(normalized_heights) * height_scalar * 4e5  # scale height based on normalized perc change\n    \n    # triangle vertices - purely vertical orientation\n    if (perc_change &lt; 0) {\n      # downward pointing triangle only for a couple of instances\n      vertices &lt;- data.frame(\n        x = c(x - base_width, x + base_width, x, x - base_width),\n        y = c(y, y, y - height, y)\n      )\n    } else {\n      # upward pointing triangle; vast majority of cases\n      vertices &lt;- data.frame(\n        x = c(x - base_width, x + base_width, x, x - base_width),\n        y = c(y, y, y + height, y)\n      )\n    }\n    # create polygon geometry\n    st_polygon(list(as.matrix(vertices)))\n  }\n  \n  # create triangles for each point\n  triangles &lt;- \n    data |&gt;\n    rowwise() |&gt;\n    mutate(\n      triangle_geom = list(create_triangle(proj_x, proj_y, perc_change, normalized_heights))\n    ) |&gt;\n    ungroup()\n  \n  # convert to sf object with triangle geometries\n  triangle_sf &lt;- \n    triangles |&gt;\n    mutate(\n      geometry = st_sfc(triangle_geom, crs = \"+proj=aeqd +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0\")\n    ) |&gt;\n    st_sf()\n  \n  return(triangle_sf)\n}\n\n# create triangle geometries using projected coordinates\ntriangle_sf &lt;- create_projected_triangles(selected_spikes_coords, height_scalar = 2.5)\n\n# transform countries first\ncountries_proj &lt;- countries |&gt;\n  st_transform(crs = \"+proj=aeqd +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0\")\n\nlakes_proj &lt;- lakes |&gt;\n  st_transform(crs = \"+proj=aeqd +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0\")\n\n# get the bounding box and expand it significantly for better fade effect\nbbox &lt;- st_bbox(countries_proj)\nx_range &lt;- bbox[3] - bbox[1]\ny_range &lt;- bbox[4] - bbox[2]\n\n# expand bbox by 50% to create more fade area\nbbox_expanded &lt;- c(\n  xmin = bbox[1] - 0.5 * x_range,\n  ymin = bbox[2] - 0.5 * y_range,\n  xmax = bbox[3] + 0.5 * x_range,\n  ymax = bbox[4] + 0.5 * y_range\n)\n\n# create a much finer grid for smoother gradient\ngrid_resolution &lt;- 400  # increased for even smoother gradient\nx_seq &lt;- seq(bbox_expanded[1], bbox_expanded[3], length.out = grid_resolution)\ny_seq &lt;- seq(bbox_expanded[2], bbox_expanded[4], length.out = grid_resolution)\n\n# create vertical gradient for within-country areas\ngradient_data &lt;- expand.grid(x = x_seq, y = y_seq) |&gt;\n  mutate(\n    # convert to sf points to check intersection with countries\n    geometry = st_sfc(map2(x, y, ~st_point(c(.x, .y))), crs = st_crs(countries_proj))\n  ) |&gt;\n  st_sf() |&gt;\n  # check which points are within countries\n  mutate(\n    within_countries = lengths(st_intersects(geometry, countries_proj)) &gt; 0\n  ) |&gt;\n  st_drop_geometry() |&gt;\n  mutate(\n    # calculate vertical position for gradient (center = 0)\n    y_center = 0,  # center of our projection\n    y_range_total = bbox_expanded[4] - bbox_expanded[2],\n    # normalize y position from center (-1 to 1, where 0 is center)\n    y_normalized = (y - y_center) / (y_range_total * 0.5),\n    # create vertical gradient: darker at center, lighter toward top/bottom\n    # distance from horizontal center line\n    dist_from_horizontal_center = abs(y_normalized),\n    # apply smooth transition function\n    vertical_fade = pmin(dist_from_horizontal_center^0.7, 1),\n    # create color values: #e0e0e0 at center fading to white at edges\n    # convert #e0e0e0 (224, 224, 224) to white (255, 255, 255)\n    red_value = 224 + (255 - 224) * vertical_fade,\n    green_value = 224 + (255 - 224) * vertical_fade,\n    blue_value = 224 + (255 - 224) * vertical_fade,\n    # create hex color\n    color_hex = rgb(red_value, green_value, blue_value, maxColorValue = 255),\n    # only apply gradient within countries, white elsewhere\n    final_color = ifelse(within_countries, color_hex, \"white\"),\n    # alpha - fully opaque within countries, transparent outside\n    alpha_value = if_else(within_countries, 1.0, 0.0)\n  )\n\n# create a mask for areas within the bounding box\nbbox_polygon &lt;- st_polygon(list(rbind(\n  c(bbox_expanded[1], bbox_expanded[2]),\n  c(bbox_expanded[3], bbox_expanded[2]),\n  c(bbox_expanded[3], bbox_expanded[4]),\n  c(bbox_expanded[1], bbox_expanded[4]),\n  c(bbox_expanded[1], bbox_expanded[2])\n))) |&gt;\n  st_sfc(crs = st_crs(countries_proj))\n\n# create the main plot with vertical gradient within countries\nmain_plot &lt;- ggplot() +\n  # add white background\n  geom_raster(data = gradient_data,\n              aes(x = x, y = y),\n              fill = \"white\") +\n  # add the vertical gradient within countries only\n  geom_raster(data = gradient_data |&gt; filter(within_countries),\n              aes(x = x, y = y, fill = final_color, alpha = alpha_value)) +\n  # use identity scales for the custom colors\n  scale_fill_identity() +\n  scale_alpha_identity() +\n  # add country boundaries\n  geom_sf(data = countries_proj,\n          fill = NA, color = \"white\", linewidth = 0.3) +\n  # Great Lakes\n  geom_sf(data = lakes_proj,\n          fill = \"white\", color = \"white\", linewidth = 0.1) +\n  # triangle spikes\n  geom_sf(\n    data = triangle_sf,\n    aes(color = ifelse(perc_change &lt; 0, \"negative\", \"positive\")),\n    fill = '#d65f00', size = 0.8, alpha = 0.5\n  ) +\n  # triangle color scale\n  scale_color_manual(\n    values = c(\"negative\" = \"#d65f00\", \"positive\" = \"#2b9d6c\"),\n    guide = \"none\"\n  ) +\n  # coordinate system\n  coord_sf(\n    xlim = c(-4e6, 4e6),\n    ylim = c(-1.75e6, 2.1e6),\n    expand = FALSE,\n    clip = 'off'\n  ) + \n  # clean theme\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    legend.position = 'none'\n  ) \n\n# final touchups/call outs\n# display the enhanced plot\n\n# function to create the 1/4 circles for Douglas and Niagara Falls callouts\ndraw_quarter_circles &lt;- function(start, end, radius = 400e3, x_offset = 0, y_offset = 0){\n  \n  # get angles and coords for a quarter of a acircle\n  angles &lt;- seq(start, end, length.out = 1e6)\n  radius &lt;- radius\n  x_coords &lt;- radius * cos(angles)\n  y_coords &lt;- radius * sin(angles)\n  \n  # test with different offesets to match article's callout positioning\n  x_coords_with_offset &lt;- x_coords + x_offset\n  y_coords_with_offset &lt;- y_coords + y_offset\n  \n  # assign values to a tibble\n  quarter_circle_data &lt;- tibble(x = x_coords_with_offset, y = y_coords_with_offset)\n  \n  # draw said 1/4 circles\n  path &lt;- geom_path(\n    data = quarter_circle_data, aes(x = x_coords_with_offset, y = y_coords_with_offset)\n  )\n  \n  return(path)\n  \n}\n\ntheme_set_custom()\n# draw 1/4 circles\nmain_plot_with_qrt_circles &lt;- \n  main_plot +\n    geom_text(\n        aes(x = -150e3,\n            y = -550e3,  label = 'UNITED STATES'),\n        family = 'franklin',\n        size = 6,\n        color = '#a3a3a3'\n    ) + \n     geom_text(\n        aes(x = -200e3,\n            y = 950e3,  label = 'CANADA'),\n        family = 'franklin',\n        size = 6,\n        color = '#a3a3a3'\n    ) +\n  # douglas 1/4 circle\n  draw_quarter_circles(start = pi, end = 3 * pi/2, x_offset = -150e3 * 11.2, y_offset = -550e3 + 100e4) +\n  # niagara 1/4 circle\n  draw_quarter_circles(start = 0, end = pi/2, x_offset = -150e3 * -11.5, y_offset = -550e3 - 50e4) \n\ncall_outs_tibble &lt;- \n  tibble(\n    label = c(\n      \"&lt;b&gt;90,000 fewer&lt;br&gt; people crossed at&lt;br&gt; Douglas&lt;/b&gt; in March&lt;br&gt;2025, a 43&lt;br&gt;percent decline.\",\n      \"&lt;b&gt;Nearly 102,000 fewer &lt;br&gt; people crossed at &lt;br&gt;Niagara Falls,&lt;/b&gt; a 41 &lt;br&gt; percent decline.\"\n    ),\n    x = c(-150e3 * 15, -150e3 * -14),  \n    y = c(-550e3 + 100e4, -550e3 - 75e4),\n    hjust = c(.5, 0.05),\n    vjust = c(0, 0.6)\n    )\n\nmain_plot_with_qrt_circles + \n  geom_textbox(\n    data = call_outs_tibble,\n    aes(x = x, y = y, label = label, hjust = hjust, vjust = vjust),\n    family = 'franklin',\n    width = unit(0.2, \"npc\"),\n    fill = NA,\n    size = c(3, 2.5),\n    color = 'black',\n    box.colour = NA,\n    orientation = \"upright\"\n  )",
    "crumbs": [
      "Navigation",
      "Intl. Travel Into the US (Replication)"
    ]
  }
]