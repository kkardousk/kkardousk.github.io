{
  "hash": "5952e05506b270646ae791c22c4ee950",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: |\n  <div class=\"custom-title-block\" style=\"text-align: center;\">\n    <span style=\"color:#2c3e50; font-size: 1.4em; font-weight: bold;\">Exploring Inversions in Python</span><br>\n    <span style=\"font-size:.5em;\">Karim K. Kardous</span><br>\n    <a href=\"mailto:kardouskarim@gmail.com\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-envelope\"></i>\n    </a>\n    <a href=\"https://github.com/kkardousk\" style=\"margin: 0 6px; font-size: 0.9em;\">\n      <i class=\"bi bi-github\"></i>\n    </a>\n  </div>\nformat:  \n  html:\n    toc: true\n    toc-depth: 4\n    toc-expand: true\n    toc-title: 'Jump To'\n    number-depth: 2\n    fig-format: retina\n    fig-dpi: 300\n    code-link: true # requires both downlit and xml2 to be downloaded\n    code-fold: true\n    code-summary: '<i class=\"bi-code-slash\"></i> Show the code'\n    # code-overflow: wrap\n    code-tools:\n      toggle: true  # adds \"Show All / Hide All\"; also allows for all code copy (at once as quarto doc)\n    css: styles.css\n    highlight-style: github-dark\n    df-print: paged\n    page-layout: article\n    embed-resources: true\n    smooth-scroll: true\n    link-external-icon: false\n    link-external-newwindow: true\n    fontsize: 1.1em\n    linestretch: 0\n    linespace: 0\n    html-math-method: katex\n    linkcolor: '#D35400'\nexecute:\n  echo: true\n  warning: false\n  message: false\n  info: false\n  cache: false\n  freeze: auto\neditor: visual\n---\n\n\n\n\n## **Initial Setup** \n:::{.text-justify}\nsome text...\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\ninvisible(\n  capture.output({\n    Sys.setenv(RETICULATE_PYTHON = \"py_venv/bin/python3.9\")\n    reticulate::use_python(\"py_venv/bin/python3.9\", required = TRUE)\n    })\n)\n\ninvisible(\n  capture.output({\n  use_python(\"py_venv/bin/python3.9\", required = TRUE)\n  py_config()\n  py_install(c('matplotlib', 'pillow'), envname = \"py_venv\", pip = TRUE)\n  })\n)\n```\n:::\n\n\n\n\n## **Image configuration and setup using [Pillow](https://pypi.org/project/pillow/)** {.text-justify}\n:::{.text-justify}\n\nUnfortunately, PIL and Image from pillow don't seem work too well in tandem with Quarto when rendering images, I'd have to first save the images 'locally' first to then show them in html output, so here matplotlib's pyplot is also used/loaded to bypass the local save first\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom PIL import Image \nimport matplotlib.pyplot as plt\nimport math\n\n# build a function to ease the plotting, reusable boilerplate basically with option to add additional arguments\ndef draw_figure(width=500, height=500, draw_func=None, title='Custom Board', figsize=(4, 4), background='white', **kwargs):\n    \n    board = Image.new('RGB', (width, height), background) \n    # apply function if provided\n    if draw_func:\n        draw_func(board, width, height, **kwargs)\n    \n    plt.figure(figsize=figsize)\n    plt.imshow(board)\n    plt.axis('off')\n    plt.title(title)\n    plt.show()\n    \ndef solid_unicolor_board(board, width, height):\n  \n  for x in range(width):\n    for y in range(height):\n      board.putpixel( (x, y), (0, 0, 0))\n      \n\n# define chess board pattern\ndef chess_pattern(board, width, height, square=100, **kwargs):\n  \n  for x in range(width):\n    for y in range(height):\n      cx = x // square # or you can use math.floor(x / square) if index doesn't jstart at 0 \n      cy = y // square\n      color = ((cx + cy) % 2) * 255\n      board.putpixel((x, y), (color, color, color))\n\n\ndraw_figure(draw_func = solid_unicolor_board, title = 'Solid Black Board')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-2-1.png){width=384}\n:::\n\n```{.python .cell-code}\ndraw_figure(draw_func = chess_pattern, title = 'Chess Board')\n```\n\n::: {.cell-output-display}\n![](inversions_py_files/figure-html/unnamed-chunk-2-2.png){width=384}\n:::\n:::\n\n\n\n\n:::{.text-justify}\nsome text...\n::: \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}