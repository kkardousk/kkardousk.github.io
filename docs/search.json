[
  {
    "objectID": "tom-calver.html",
    "href": "tom-calver.html",
    "title": "\nReplication of below article’s Data and Visualizations “We keep pumping money into the NHS. Is it good value?”  By Tom Calver   Karim K. Kardous       \n",
    "section": "",
    "text": "Show the code\n#|echo: false\n#|message: false\n#|warning: false\n#|include: false\n\n# install pacman if it's not already installed\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n# install.packages(\"gdtools\", type = \"source\")\n\ninstall.packages(\"gdtools\", type = \"source\")\n\n\nThe following package(s) will be installed:\n- gdtools [0.4.2]\nThese packages will be installed into \"~/project-replications/tom-calver/replications|opinions/renv/library/macos/R-4.5/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing gdtools ...                        OK [linked from cache]\nSuccessfully installed 1 package in 3.6 milliseconds.\n\n\n Show the code\n# brew install cairo harfbuzz fribidi\n# Load or install packages\npacman::p_load(\n  gdtools,\n  tidyverse,\n  quarto,\n  chromote,\n  here,\n  tidycensus,\n  janitor,\n  purrr,\n  ggtext,\n  ggiraph,\n  gfonts,\n  showtext,\n  ggborderline,\n  shiny,\n  gt,\n  rsvg,\n  magick,\n  stringr,\n  ggimage\n)\n# potential steps on mac for registering then loading Roboto font into \n# Set theme and options\noptions(scipen = 999)\ntheme_set(theme_minimal())\n\nsuppressMessages({\n  gdtools::register_gfont(\"Roboto\", \"roboto\")\n  sysfonts::font_add_google(\"Roboto\", \"roboto\")\n  showtext_auto()\n  showtext_opts(dpi = 300)\n})\n\n\nData Import/Read: Lucky for us, the data is embedded in\n\n\n Show the code\n```{r}\n#| message: false\n#| output: false\n#| warning: false\nb &lt;- ChromoteSession$new()\nb$Page$navigate(\"https://www.thetimes.com/comment/columnists/article/we-keep-pumping-money-into-the-nhs-is-it-good-value-blq8bxc39\")\nSys.sleep(6) # allow some time for dynamic content to render\n\n# extract all iframe srcs (joined by || in this case)\niframes_html &lt;- b$Runtime$evaluate(\"Array.from(document.querySelectorAll('iframe')).map(el =&gt; el.src).join('||')\")$result$value\n# split and filter valid Datawrapper url's\nchart_urls &lt;- str_split(iframes_html, \"\\\\|\\\\|\")[[1]] |&gt;\n  str_subset(\"^https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+$\")\n\nall_data &lt;- purrr::map_dfr(chart_urls, function(url) {  \n  message(\"Navigating to: \", url)\n  b$Page$navigate(url)\n  Sys.sleep(3)\n  \n  html &lt;- b$Runtime$evaluate(\"document.documentElement.outerHTML\")$result$value\n  \n  # match visible chart values if any\n  pattern &lt;- 'aria-datavariables=\"year,\\\\s*([A-Z]+)\".*?aria-datavalues=\"([0-9]{4}),\\\\s*([0-9.]+)\"'\n  matches &lt;- str_match_all(html, pattern)[[1]]\n  \n  # match dataset.csv url as well \n  csv_pattern &lt;- \"https://datawrapper\\\\.dwcdn\\\\.net/[a-zA-Z0-9]+/\\\\d+/dataset\\\\.csv\"\n  csv_link &lt;- str_extract(html, csv_pattern)\n  if (is.na(csv_link)) {\n    csv_link &lt;- str_glue(\"{url}/dataset.csv\")\n  }\n  \n  tibble(\n    chart_url = url,\n    country = if(nrow(matches)) matches[, 2] else NA,\n    year = if(nrow(matches)) as.integer(matches[, 3]) else NA,\n    value = if(nrow(matches)) as.numeric(matches[, 4]) else NA,\n    dataset_csv = csv_link\n  )\n})\n```\n\n\n\n\n Show the code\n# add a custom gt boilerplate -from {gt} package (great tables)-to reduce code redundancy (having to copy/paste same chunks of code every # time we turn a tibble into a gt object)\n\ngt_nyt_custom &lt;- function(x, title = '', subtitle = '', first_10_rows_only = TRUE){\n  \n  x &lt;- x |&gt; clean_names(case = 'title')\n  numeric_cols &lt;- x |&gt; select(where(is.double)) |&gt; names()\n  integer_cols &lt;- x |&gt; select(where(is.integer)) |&gt; names()\n  \n  title_fmt &lt;- if(title != \"\") glue::glue(\"**{title}**\") else \"\"\n  subtitle_fmt &lt;- if(subtitle != \"\") glue::glue(\"*{subtitle}*\") else \"\"\n  \n  x |&gt;\n    (\\(x) if (first_10_rows_only) slice_head(x, n = 10) else x)() |&gt;\n    gt() |&gt; \n    tab_header(\n      title = md(title_fmt),\n      subtitle = md(subtitle_fmt)\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#333333')\n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = list(\n        cell_text(color = '#CC6600', weight = 'bold')\n      ),\n      locations = cells_column_labels(everything())\n    ) |&gt; \n    fmt_number(\n      columns = c(numeric_cols),\n      decimals = 1\n    ) |&gt; \n    fmt_number(\n      columns = c(integer_cols),\n      decimals = 0\n    ) |&gt; \n    tab_options(\n      table.font.names = c(\"Merriweather\", \"Georgia\", \"serif\"),\n      table.font.size = 14,\n      heading.title.font.size = 18,\n      heading.subtitle.font.size = 14,\n      column_labels.font.weight = \"bold\",\n      column_labels.background.color = \"#eeeeee\",\n      table.border.top.color = \"#dddddd\",\n      table.border.bottom.color = \"#dddddd\",\n      data_row.padding = px(6),\n      row.striping.include_table_body = TRUE,\n      row.striping.background_color = \"#f9f9f9\"\n    )\n  \n}\nall_data |&gt; \n  count(url = chart_url, download_link = dataset_csv) |&gt; \n  select(-n) |&gt; \n  gt_nyt_custom(title = 'Dataset Ids') |&gt; \n  cols_label(\n    Url = \"Plot URL\",\n    `Download Link` = \"Link to CSV\"\n  )\n\n\n\n\n\n\n\n\nDataset Ids\n\n\n\n\n\nPlot URL\nLink to CSV\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Bxhol/4\nhttps://datawrapper.dwcdn.net/Bxhol/4/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/JH3Qn/1\nhttps://datawrapper.dwcdn.net/JH3Qn/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/Mc3q2/2\nhttps://datawrapper.dwcdn.net/Mc3q2/2/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/eXQPs/1\nhttps://datawrapper.dwcdn.net/eXQPs/1/dataset.csv\n\n\n\n\n\n\n\n Show the code\nhealth_sat &lt;- \n  all_data |&gt; \n  drop_na() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n\nHealth service satisfaction (ESS Survey; European Social Survey)\n\n\n Show the code\n# now we can focus on building plot \nall_data |&gt; \n  gt_nyt_custom() |&gt; \n  tab_header(\n    title = md(\"**Chart Data Summary**\"),\n    subtitle = md(\"*Extracted from embedded datawrapper from the HTML Source page*\")\n  )\n\n\n\n\n\n\n\n\nChart Data Summary\n\n\nExtracted from embedded datawrapper from the HTML Source page\n\n\nChart Url\nCountry\nYear\nValue\nDataset Csv\n\n\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,002\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,004\n4.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,006\n4.4\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,008\n4.6\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,010\n4.8\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,012\n5.7\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,014\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,016\n6.2\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,018\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\nhttps://datawrapper.dwcdn.net/7NJRB/1\nDE\n2,020\n5.9\nhttps://datawrapper.dwcdn.net/7NJRB/1/dataset.csv\n\n\n\n\n\n\n\n\n\n Show the code\n# let's just go with smoothing \nextract_smooth_build &lt;- function(tibble, country = 'GB'){\n  \n  initial_pull &lt;- \n    all_data |&gt; \n    filter(country %in% {{country}}) |&gt; \n    ggplot(aes(x = year, y = value)) + \n    geom_smooth(method = 'loess')\n  \n  # fetch country abbs for ids, and ranges\n  country_ids &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n  country_max &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; max()\n  country_min &lt;- all_data |&gt; filter(country == {{country}}) |&gt; pull(value) |&gt; min()\n  \n  # access smoothed, include actual years to imputed/smoothed points, cap at min max per country/series\n  # and keep only columns of interest\n  smoothed_df &lt;- ggplot_build(initial_pull)[[1]] |&gt; as.data.frame() |&gt; as_tibble()\n  \n  complete_series &lt;- \n    smoothed_df |&gt; \n    select(year = x, value = y) |&gt; \n    mutate(country := country) |&gt; \n    bind_rows(\n      all_data |&gt; \n        filter(country == {{country}}) |&gt; \n        select(year, value) \n    ) |&gt; \n    mutate(\n      year = as.integer(year),\n      year_val_tie_breaker = if_else(is.na(country), 1, 0)\n    ) |&gt; \n    group_by(country, year) |&gt; \n    arrange(desc(year_val_tie_breaker)) |&gt; \n    mutate(ties = row_number()) |&gt; \n    filter(\n      if (n() &lt; 4) TRUE else ties + year_val_tie_breaker != 1 # make sure every year/country combo gets same no. of obs\n      # and that original values (only in the event a given year is even or survey year) take precedence over smoothed ones\n      # otherwise just pass/do nothing\n    ) |&gt; \n    ungroup() |&gt; \n    # ensuer smoothed values don't go below/beyond lower/upper bounds\n    mutate(\n      value = pmin(pmax(value, country_min), country_max)\n    ) |&gt; \n    arrange(year) |&gt; \n    fill(country, .direction = 'downup') |&gt;  # since every year starts with \n    select(year, country, value) \n  \n  return(complete_series)\n  \n}\n# country vector to loop thru\ncountry_name_abbs &lt;- c(na.omit(all_data |&gt; pull(country) |&gt; unique()))\n# combine all series\nall_series &lt;- map_dfr(.x = country_name_abbs, ~extract_smooth_build(tibble = all_data, country = .x))\n\n# set contry 'switch; so that tooltip can change accordingly for odd numebred years\ncountry_labels &lt;- c(\n  NO = \"Norway\", DE = \"Germany\", ES = \"Spain\",\n  FR = \"France\", GB = \"UK\", IE = \"Ireland\", PT = \"Portugal\"\n)\n\n# adding year as continuous variable (decimal years) so that points don't overlap but strech over whithin a year to year span\nall_series &lt;- \n  all_series |&gt; \n  mutate(\n    rn = row_number(), .by = c(country, year)\n  ) |&gt; \n  mutate(\n    decimal_year = if_else(rn == 1, year, year + rn / 8)\n  ) |&gt; \n  mutate(\n    year = decimal_year\n  ) |&gt; \n  select(-decimal_year)\n\n# also join on country full name mapping so we can generate a consolidate data_id that links the aestethics together (for interactive simultaneus highlighting, etc.)\nall_series &lt;- \n  all_series |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), \n    join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values)\n  ) |&gt; \n  select(-values) |&gt; \n  mutate(\n    country_name = str_sub(data_id, 3, 20)\n  )\n\n# also generate visible (and non visible years by exclusion) as they don't visually get the same properties; visible (even numbered years) get the country abb as a tooltip (and larger markers/circles), \n# while 'invisible' ones (odd numbered years along with year 2023) get their country names fully spelled out and get transparent marker/circle fill\nvisible_years &lt;- c(seq(2002, 2022, 2), 2023)\n\nvisible_points &lt;- \n  all_series |&gt; \n  filter(round(year) %in% visible_years & floor(year) == ceiling(year))\ninvisible_points &lt;- all_series |&gt; \n  filter(!round(year) %in% visible_years & floor(year) != ceiling(year))\n\n# final touchups\n# set color mappings\ncolor_map &lt;- expr(\n  case_when(\n    country %in% c('NO', 'Norway') ~ '#d43b45',\n    country %in% c('DE', 'Germany') ~ '#DCA825',\n    country %in% c('ES', 'Spain') ~ '#b01622',\n    country %in% c('FR', 'France') ~ '#487caa',\n    country %in% c('GB', 'UK') ~ '#264250',\n    country %in% c('IE', 'Ireland') ~ '#61A861',\n    country %in% c('PT', 'Portugal') ~ '#d27e4e',\n    TRUE ~ '#000000'\n  )\n)\n\n# set tooltip mappings\ntooltip_map &lt;- expr(\n  case_when(\n    !year %in% c(seq(2002, 2022, 2), 2023) & country %in% names(country_labels) ~ country_labels[country],\n    TRUE ~ country\n  )\n)\n\nlabel_data &lt;-\n  all_series |&gt;\n  group_by(country) |&gt;\n  arrange(desc(year)) |&gt; \n  filter(row_number() == 1) |&gt;\n  mutate(\n    y_offset = case_when(\n      country == 'ES' ~ value + .1,\n      country == 'FR' ~ value +  0,\n      country == 'DE' ~ value - .05,\n      country == 'GB' ~ value - .1,\n      country == 'PT' ~ value + .2,\n      TRUE ~ value)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(\n    country_name = case_when(\n      country == \"DE\" ~ \"Germany\",\n      country == \"ES\" ~ \"Spain\",\n      country == \"FR\" ~ \"France\",\n      country == \"GB\" ~ \"UK\",\n      country == \"IE\" ~ \"Ireland\",\n      country == \"NO\" ~ \"Norway\",\n      country == \"PT\" ~ \"Portugal\",\n      TRUE ~ NA_character_\n    ),\n    country_color = case_when(\n      country %in% c(\"DE\", 'Germany') | country_name %in% 'Germany' ~ \"#9b6e00\",  # override DE/Germany label color here since curve color is different than country label color (only one)\n      country %in% c('NO', 'Norway') ~ '#d43b45',\n      country %in% c('ES', 'Spain') ~ '#b01622',\n      country %in% c('FR', 'France') ~ '#487caa',\n      country %in% c('GB', 'UK') ~ '#264250',\n      country %in% c('IE', 'Ireland') ~ '#61A861',\n      country %in% c('PT', 'Portugal') ~ '#d27e4e',\n      TRUE ~ '#000000'\n    )\n  ) |&gt; \n  inner_join(\n    country_labels |&gt; enframe() |&gt; rename(values = value), join_by(country == name)\n  ) |&gt; \n  mutate(\n    data_id = str_c(country, values),\n    country = if_else(country == 'DE', 'Germany', country)\n  )\n# add caption to match Tom's\ncaption_text &lt;- \"&lt;span style='color:#232323;'&gt;0 = extremely bad, 10 = extremely good.&lt;/span&gt;&lt;br&gt;\n                 &lt;span style='color:#939293; font-weight: bold;'&gt;Chart: Tom Calver | The Times and The Sunday Times • Source: ESS/K. Kardous&lt;/span&gt;&lt;br&gt;\"\n\np &lt;- \n  all_series |&gt; distinct() |&gt; \n  ggplot(\n    aes(x = year, \n        y = value, \n        group = data_id, \n        color = country)\n  ) +\n  scale_color_manual(\n    values = c(\n      'NO' = \"#d43b45\",\n      'DE' = '#DCA825',\n      'ES' = '#b01622',\n      'FR' = '#487caa',\n      'GB' = '#264250',\n      'IE' = '#61A861',\n      'PT' = '#d27e4e')\n  ) +\n  scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0, 8)) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2023),\n    expand = c(0, 0.1)\n  ) + \n  theme(\n    legend.position = 'none',\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  geom_smooth_interactive(\n    data = all_series,\n    aes(x = year, y = value, data_id = paste0(country, country_name)),\n    method = \"loess\",\n    se = FALSE,\n    linewidth = 3.5, # thick line acts as the 'border'\n    alpha = 1,\n    show.legend = FALSE,\n    color = \"white\"\n  ) +\n  # colored interactive smooth line\n  geom_smooth_interactive(data = all_series |&gt; filter(!country %in% 'IE'),\n                          aes(data_id = paste0(country, country_name)),\n                          method = \"loess\", \n                          se = FALSE, \n                          linewidth = 0.9, \n                          fill = NA\n  ) +\n  geom_smooth_interactive(data = all_series |&gt; filter(country %in% 'IE'),\n                          aes(data_id = paste0(country, country_name)),\n                          method = \"loess\", se = FALSE, linewidth = 0.9, fill = NA\n  ) +\n  scale_y_continuous(breaks = seq(0, 7, 1), limits = c(0, 8)) + \n  scale_x_continuous(\n    breaks = seq(2002, 2022, 2), \n    limits = c(2002, 2024),\n    expand = c(0, 0.1)\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    caption = caption_text\n  ) +\n  # final touchoups before interactive rendering thru girafe()\n  theme(\n    panel.spacing = unit(20, 'cm'),\n    plot.margin = margin(l = 5, b = 10), # leave some space/margin at the bottom for caption 'room to breathe'\n    legend.position = 'none',\n    axis.text = element_text(face = \"bold\"), # axis tick labels\n    strip.text = element_text(face = \"bold\"), # facet labels\n    panel.grid.major.x = element_blank(),\n    axis.text.x = element_text(margin = margin(b = 9, t = -9)),\n    panel.grid.major.y = element_line(color = \"gray90\"),\n    plot.caption = element_markdown(\n      hjust = 0,\n      size = 9,\n      lineheight = 1.4,\n      family = \"roboto\",\n      face = 'bold',\n      margin = margin(l = -10, t = 5)\n    ) \n  ) +\n  geom_segment(aes(x = 2002, xend = 2023, y = 0, yend = 0), color = 'black')\n\np_interactive &lt;- p +\n  geom_point_interactive(\n    data = visible_points,\n    aes(\n      x = year,\n      y = value, \n      color = country,\n      data_id = paste0(country, country_name)\n    ),\n    alpha = 0.1, fill = 'white', show.legend = FALSE\n  ) +\n  geom_point_interactive(\n    data = \n      all_series |&gt; \n      mutate(\n        point_size = if_else(country %in% c('NO', 'Norway', 'PT', 'Portugal'), 3, 1.5),\n        point_stroke = point_size\n      ),\n    aes(\n      x = year, \n      y = value,\n      data_id = paste0(country, country_name),\n      tooltip = paste0(\n        \"&lt;div style='text-align:\", \n        if_else(year &lt;= 2015.250, \"left\", \"right\"), \n        \"; line-height: 1.1;'&gt;\", # tightens spacing\n        \"&lt;div style='font-weight:bold; font-size:16px; color:\",\n        if_else(country_name == \"Germany\", \"#9b6e00\", eval(color_map)), \n        \";'&gt;\", \n        eval(tooltip_map), \n        \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(year, 0), \"&lt;/div&gt;\",\n        \"&lt;div style='font-size:16px;'&gt;\", round(value, 2), \"&lt;/div&gt;\",\n        \"&lt;/div&gt;\"\n      )\n    ),\n    color = 'white', fill = 'white', shape = 21, alpha = 0, show.legend = FALSE\n  ) +\n  geom_rect(\n    inherit.aes = FALSE,\n    aes(xmin = 2024, xmax = Inf, ymin = -Inf, ymax = Inf),\n    color = NA, fill = \"white\", \n  ) +\n  geom_label_interactive(\n    data = all_series |&gt; slice_max(year) |&gt; mutate(country_name = str_sub(data_id, 3, 20)),\n    aes(\n      x = year,\n      y = value,\n      group = paste0(country, country_name),\n      label = country_name,\n      data_id = paste0(country, country_name)\n    ),\n    label.size = NA,\n    fill = NA,\n    size = 2.2,\n    hjust = 0,\n    fontface = 'bold',\n    inherit.aes = TRUE,\n    alpha = 1\n  ) +\n  scale_color_manual(\n    breaks = c(\"GB\", \"FR\", \"IE\", \"PT\", \"ES\", \"NO\", 'DE', 'Germany'), # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n    values = c(\"#264250\", \"#487caa\", \"#61A861\", \"#d27e4e\", \"#b01622\", \"#d43b45\", '#DCA825', '#9b6e00') # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color\n  ) +\n  # scale_color_identity() +  # correctly apply the country color to the label's font\n  coord_cartesian(xlim = c(2002, 2024.5)) +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank()\n  ) +\n  # add persistent white circle that follows mouse (via selection); one to cover all data points is simply assigning data to country.year combo\n  geom_point_interactive(\n    data = all_series,\n    aes(\n      x = year,\n      y = value,\n      group = paste0(year, country_name)\n    ),\n    shape = 21,\n    size = 0.4,\n    stroke = 1,\n    fill = 'white',\n    color = \"grey85\",\n    alpha = 0\n  ) \n# render interactive plot thru girafe() engine\ngirafe(\n  ggobj = p_interactive,\n  options = list(\n    opts_tooltip(\n      css = \"\n      background: transparent;\n      border: none;\n      box-shadow: none;\n      font-family: sans-serif;\n      text-shadow:\n      0 0 4px rgba(234, 255, 255, 1),\n      0 0 4px rgba(234, 255, 255, 1),\n      0 0 4px rgba(255, 255, 255, 1);\n      border-radius: none;\n      transform: translate(-50%, 20px);\n      transition: all 0.2s ease-in-out;\",\n      delay_mouseover = 300,\n      delay_mouseout = 500\n    ),\n    opts_hover(\n      css = \"stroke-width: 3; stroke-opacity: 0.9; fill-opacity: 0.9; opacity: 1;\",\n      nearest_distance = 30,\n      reactive = FALSE\n    ),\n    opts_hover_inv(\n      css = \"stroke-opacity: 0.2; fill-opacity: 0.2; opacity: 0.4;\"\n    )\n  )\n)\n\n\n\n\n\n\n\n\nRoom to improve\n\n\n Show the code\n# generate the data\np3_prep &lt;-\n  tribble(\n    ~Current,  ~Potential,  ~Country,\n    78.9,      84.1,       \"United States\",\n    78.1,      83.8,       \"Germany\",\n    80.9,      80.9,       \"Poland\",\n    81.1,      83.8,       \"United Kingdom\",\n    81.6,      84.1,       \"Ireland\",\n    81.4,      83.8,       \"Finland\",\n    82.0,      84.1,       \"Norway\",\n    82.3,      84.1,       \"France\",\n    82.4,      84.1,       \"Sweden\",\n    81.4,      82.6,       \"Portugal\",\n    83.0,      84.1,       \"Australia\",\n    83.0,      83.2,       \"Italy\",\n    81.7,      81.7,       \"Greece\",\n    83.1,      83.1,       \"Spain\",\n    84.1,      84.1,       \"Japan\"\n  ) |&gt; \n  select(last_col(), everything()) |&gt; \n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15)\n\n# create country abb names (fetched from one of the html nodes within the original plot) and build urls/per flag\ncountry_abbs &lt;- c('us', 'de', 'pl', 'gb', 'ie', 'fi', 'no', 'fr', 'se', 'pt', 'au', 'it', 'gr', 'es', 'jp')\nflag_urls &lt;- str_glue(\"https://static.dwcdn.net/css/flag-icons/flags/4x3/{country_abbs}.svg\")\n\n# loop thru svg's and convert to png's\nflag_paths &lt;- map(\n  flag_urls, function(url) {\n\n    svg_path &lt;- tempfile(fileext = \".svg\")\n    png_path &lt;- tempfile(fileext = \".png\")\n    \n    download.file(url, svg_path, mode = \"wb\")\n    rsvg::rsvg_png(svg_path, png_path)\n    \n    return(png_path)\n  }\n) \nflag_paths &lt;- setNames(flag_paths, country_abbs)\n\n\n# add the 2 additional columns back to p3\np3_data &lt;- p3_prep |&gt; \n  bind_cols(\n    flag_paths |&gt; unlist() |&gt; stack() |&gt; rename(flag_pngs = values, country_abbs = ind)\n  ) |&gt; \n  select(Country, country_abbs, Current, Potential, flag_pngs)\n\n# also add html code straight into p3_data but first abbreviate country names\np3_data &lt;- \n  p3_data |&gt; \n  # abbreviated United States and United Kingdom because i noticed the blanks/two or more words can throw off element markdown, especially\n  # when embedding svg's; while not perfectly replicating here, in the context of country names, 'US' and 'UK' are universally reconized, especially\n  # if flag images are appended to them \n  mutate(\n    Country = if_else(\n      Country == 'United Kingdom', 'UK',\n      if_else(Country == 'United States', 'US', Country)\n      ),\n    flag_html = sprintf(\"&lt;img src='%s' width='25' height='15'&gt; %s\", flag_pngs, Country)\n    )\n# we will also preserve html flags as a single charazcter string in the event we create an independ plot and stack it (veritically)\n# alongside progress plot (for Current vs. Potential arrow chart)\n# flag_html &lt;- str_c(\n#   map2(rep(flag_paths, each = 2), p3_data_prep$Country,\n#            ~ sprintf(\"&lt;img src='%-s' width='20' height='15'&gt; %-s\", .x, .y)),\n#   collapse = \"&lt;br&gt;\"\n# )\n\n# we have to turb this from wide to long; to get a tracking per country (current -&gt; potential)\np3_data_prep &lt;- \n  p3_data |&gt; \n  # order gets lost when pivoting longer so we create a integer sequence and force rank/arrange that way\n  mutate(seq = 1:15) |&gt; \n  pivot_longer(\n    -c(seq, Country, country_abbs, flag_pngs, flag_html), names_to = 'progress'\n  ) |&gt; \n  mutate(\n    # add color codes (different for UK compared to rest)\n    # for greece, default arrow shows a recession, but in Tom's plot, it's '&gt;', it's the same value for current and for potential for Greece, so we \n    # artificially add + 0.001 to the Greek score for potential for force '&gt;' arrow direction\n    # value = if_else(Country == 'Greece' & progress == 'Potential', value + 0.0001, value),\n    hex_codes = if_else(Country == 'UK', '#73a3d3', '#264250'), # UK gets its own color\n    arrow_end_angle = if_else(Country %in% c('Spain', 'Japan'), 90, 70)) |&gt; \n  arrange(desc(seq)) # for some reason, below plot was reversing order, so we reverse order here so that plot arranges countries properly\n\n# since arrow() wouldn't natively recoznied arrow_end_angle,\n# we create an variable in the global env. to call it within arrow() later on\np3 &lt;- p3_data_prep |&gt; \n  ggplot(aes(y = fct_reorder(Country, -seq), x = value, color = hex_codes)) +  \n  geom_path(arrow = arrow(\n    type = \"open\", \n    angle = c(rep(90, 3), rep(60, 27)), \n    length = unit(3, 'pt')), \n    linewidth = .8\n  ) +\n  geom_label(\n    data = p3_data_prep |&gt; filter(progress == 'Current'),\n    aes(label = value, hjust = 1.2, family = \"roboto\"),\n    size = 2, fill = 'white', label.size = NA\n  ) +\n  geom_text(\n    data = p3_data_prep |&gt; filter(progress == 'Potential'),\n    aes(label = value, hjust = -.3, family = \"roboto\"),\n    size = 2\n  ) + \n  geom_text(\n    aes(x = 78.9, y = 15, label = '\\nCurrent\\n', family = 'roboto'), \n    size = 1.9, nudge_y = .5, nudge_x = -.2\n  ) + \n  geom_text(\n    aes(x = 84.1, y = 15, label = '\\nPotential\\n', family = 'roboto'), \n    size = 1.9, nudge_y = .5, nudge_x = .1\n  ) + \n  scale_color_identity() +  \n  scale_y_discrete(\n    labels = p3_data_prep |&gt; filter(progress == \"Current\") |&gt; pull(flag_html)\n  ) +\n  theme(\n    axis.text.y = element_markdown(inherit.blank = FALSE, family = \"roboto\", size = 4, hjust = 0, face = 'bold'),  \n    axis.text.x = element_text(family = \"roboto\", size = 4),  \n    axis.title.x = element_text(size = 7),  \n    axis.title.y = element_text(size = 7), \n    panel.grid.minor.x = element_blank()\n    # plot.margin = margin(r = 30)\n  ) + \n  labs(x = NULL, y = NULL) + \n  theme(legend.position = 'none') + \n  geom_segment(\n    aes(x = 78.9, xend = 78.9, y = 15.1, yend = 15.3), \n    color = \"grey70\", linewidth = 0.1, inherit.aes = FALSE\n  ) + \n  geom_segment(\n    aes(x = 84.1, xend = 84.1, y = 15.1, yend = 15.3), \n    color = 'grey70', linewidth = 0.1, inherit.aes = FALSE\n  ) \n\n# add plot caption to match what Tom has \ncaption_text &lt;- \"&lt;span style='color:#989799; font-weight:bold;'&gt;Chart: The Times And The Sunday Times • Source&lt;/span&gt; \n                 &lt;span style='color:#232323; font-weight:bold;'&gt;Zarulli et al.&lt;/span&gt;\"\n\np3 &lt;- p3 + \n  labs(caption = caption_text) + \n  theme(\n    plot.caption = element_markdown(inherit.blank = TRUE,\n                                    hjust = -0.18,  \n                                    size = 4.7,\n                                    lineheight = 1.2,\n                                    family = \"roboto\"\n    )\n  )\np3\n\n\n\n\n\n\n\n\n\n\n\nValue for money (Excludes 2020-22 given the high COVID spend)\n\n\n Show the code\ncountry_labels &lt;- tribble(\n  ~country, ~year, ~spend, ~life_expectancy, ~xnudge, ~ynudge,\n  \"France\", 2023,  5014,   83.3,             500,       0,\n  \"Germany\",2023,  5971,   81.4,             600,       0,\n  \"UK\",     2023,  4444,   81.3,             350,       0,\n  \"Italy\",  2023,  3249,   83.7,             0,       0.55,\n  \"Canada\", 2023,  5307,   82.6,             550,       0,\n  \"Japan\",  2023,  4874,   84.7,             500,       0,\n  \"US\",     2023, 10827,   79.3,             0,       0.5\n)\n\n\ndata &lt;- \n  read_tsv(\"https://datawrapper.dwcdn.net/Bxhol/9/dataset.csv\") |&gt; \n  mutate(last_year = year == 2023) |&gt;  # this is done because most recent year gets a black fill/border while antecedent years get a white one\n  arrange(country, year) |&gt; \n  mutate(\n    country_tooltip = if_else(year == 2023, country, paste(country, year, sep = ', '))\n  ) |&gt; \n  mutate(\n    country_fill = case_when(\n      str_detect(country_tooltip, \"US\") ~ \"US\",\n      str_detect(country_tooltip, \"France\") ~ \"France\",\n      str_detect(country_tooltip, \"Italy\") ~ \"Italy\",\n      str_detect(country_tooltip, \"Germany\") ~ \"Germany\",\n      str_detect(country_tooltip, \"Canada\") ~ \"Canada\",\n      str_detect(country_tooltip, \"Japan\") ~ \"Japan\",\n      str_detect(country_tooltip, \"UK\") ~ \"UK\",\n      TRUE ~ country_tooltip\n    )\n  ) |&gt; \n  # make sure to hide tooltips for most recent years as they will get an explicit data label there anywyas\n  mutate(\n    country_tooltip = if_else(year == 2023, '', country_tooltip)\n  ) |&gt; \n  mutate(\n    country = factor(country, levels = c(\"Canada\", \"France\", \"Germany\", \"Japan\", \"Italy\", \"UK\", \"US\"))\n  )\n\np2 &lt;- data |&gt; \n  ggplot(aes(x = spend, y = le, color = last_year, fill = country_fill, group = country_fill)) +\n  geom_point_interactive(\n    aes(size = size, data_id = country_fill, tooltip = country_tooltip), \n    shape = 21, alpha = 1\n  ) +\n  geom_text_interactive(\n    data = data |&gt; slice_max(year) |&gt; distinct(country_fill, .keep_all = TRUE), \n    aes(\n      text = country_fill, \n      label = country_fill, \n      data_id = country_fill, \n      tooltip = country_tooltip\n    ), \n    hjust = -0.3, vjust = 0, alpha = 1\n  ) +\n  scale_fill_manual(\n    breaks = c(\"US\", \"France\", \"Italy\", \"Germany\", \"Canada\", \"Japan\", \"UK\"),\n    values = c(\"#4076A4\", \"#80B1E2\", \"#61A961\", \"#F5C55E\", \"#FFAEA9\", \"#DACFC0\", \"#E94F55\")\n  ) +\n  scale_color_manual(\n    breaks = c(FALSE, TRUE),\n    values = c('white', 'black')\n  ) +\n  theme(\n    plot.title = element_markdown(size = 12, lineheight = 1.2, linewidth = 1.5),\n    plot.subtitle = element_markdown(size = 12, lineheight = 1.2)\n  ) + \n  labs(\n    title = '**Value for money**',\n    subtitle = \"How life expectancy and per-capita healthcare spend have changed since 2000.&lt;br&gt; \n               &lt;span style='background-color:#e94f55; color:white; padding:2px 4px;'&gt;**UK**&lt;/span&gt; spending is rising, but life expectancy has stalled.\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(\n    breaks = seq(3000, 11000, 1000),\n    labels = c(format(seq(3000, 10000, 1000), big.mark = \",\", trim = TRUE), \"$11,000\")\n  ) +\n  coord_cartesian(\n    xlim = c(2100, 11300),\n    ylim = c(77, 86), \n    expand = FALSE, \n    clip = 'off'\n  ) +\n  # add caption for p2\n  labs(\n    caption = \"&lt;span style='color:#232323; font-weight:bold;'&gt;In US Dollars, adjusted for purchasing power and inflation. Excludes 2020-22.&lt;/span&gt;  &lt;br&gt;\n             &lt;span style='color:#989799; font-weight:bold;'&gt;Chart: Tom Calver | The Times and The Sunday Times&lt;/span&gt;\"\n  ) +\n  theme(\n    text = element_text(family = 'roboto'), element_text(color = 'black', face = 'bold'),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major = element_line(size = 0.3, color = \"grey80\"),\n    axis.line = element_line(color = \"black\", size = 0.3),\n    legend.position = 'none',\n    plot.caption = element_markdown(\n      size = 10, \n      hjust = 0, \n      lineheight = 1.2\n    )\n  ) +\n  annotate(\n    geom = 'rect', \n    xmin = 2075,\n    xmax = 2345,\n    ymax = 86.5,\n    ymin = 86.15, \n    fill = '#e94f55'\n  ) + \n  # we also need to annotate the years 2000 and 2023 with Germany's yellow hex code (to match what Tom has)\n  # not so much for Germany but for reference in general to the range of years for the plot\n  # 2000 persistent text geom; for 2023 we use text geom; for 2000, we use label with no borders to bring forward '2000'\n  annotate( \n    geom = 'label', \n    label = '2000',\n    x = 4250,\n    y = 77.97,\n    color = '#F5C55E',\n    fill = 'white',\n    label.size = NA,\n    fontface = \"bold\" \n  ) +\n  # 2023 persistent text geom\n  annotate(\n    geom = 'text', \n    label = '2023',\n    x = 6400,\n    y = 81.2,\n    color = '#F5C55E',\n    fontface = \"bold\" \n  ) + \n  # add x and y axes titles (within the plot itself)\n  # y axis\n  annotate(\n    geom = 'text', \n    label = 'Life expectancy',\n    x = 2685,\n    y = 85.8,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15\n  ) +\n  # x axis\n  annotate(\n    geom = 'text', \n    label = 'Per-capita\\n  spend',\n    x = 11200,\n    y = 77.5,\n    color = '#7B7B7B',\n    fontface = \"bold\",\n    fontfamily = 'Roboto',\n    fontsize = 15,\n    hjust = .9,\n    vjust = .6\n  ) \n\ngirafe(\n  ggobj = p2,\n  width_svg = 10, height_svg = 6, \n  options = list(\n    opts_tooltip(\n      css = \"background: white;\n             border: 1px solid #ddd;\n             border-radius: 4px;\n             padding: 6px;\n             font-family: 'Roboto', sans-serif;\n             font-size: 14px;\n             font-weight: bold;\n             color: #232323;\n             text-align: left;\n             box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);\"\n    ),\n    opts_hover(\n      css = \"stroke-opacity: 1; fill-opacity: 1; color: #232323; font-size: 12px; alpha: 1;\"\n    ),\n    opts_hover_inv(\n      css = \"fill-opacity: 0.01; stroke-opacity: 0.01; color: transparent; font-size: 0.1px;\"\n    )\n  )\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]