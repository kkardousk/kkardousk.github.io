)
)
# set tooltip mappings
tooltip_map <- expr(
case_when(
!year %in% c(seq(2002, 2022, 2), 2023) & country %in% names(country_labels) ~ country_labels[country],
TRUE ~ country
)
)
label_data <-
all_series |>
group_by(country) |>
arrange(desc(year)) |>
filter(row_number() == 1) |>
mutate(
y_offset = case_when(
country == 'ES' ~ value + .1,
country == 'FR' ~ value +  0,
country == 'DE' ~ value - .05,
country == 'GB' ~ value - .1,
country == 'PT' ~ value + .2,
TRUE ~ value)
) |>
ungroup() |>
mutate(
country_name = case_when(
country == "DE" ~ "Germany",
country == "ES" ~ "Spain",
country == "FR" ~ "France",
country == "GB" ~ "UK",
country == "IE" ~ "Ireland",
country == "NO" ~ "Norway",
country == "PT" ~ "Portugal",
TRUE ~ NA_character_
),
country_color = case_when(
country %in% c("DE", 'Germany') | country_name %in% 'Germany' ~ "#9b6e00",  # override DE/Germany label color here since curve color is different than country label color (only one)
country %in% c('NO', 'Norway') ~ '#d43b45',
country %in% c('ES', 'Spain') ~ '#b01622',
country %in% c('FR', 'France') ~ '#487caa',
country %in% c('GB', 'UK') ~ '#264250',
country %in% c('IE', 'Ireland') ~ '#61A861',
country %in% c('PT', 'Portugal') ~ '#d27e4e',
TRUE ~ '#000000'
)
) |>
inner_join(
country_labels |> enframe() |> rename(values = value), join_by(country == name)
) |>
mutate(
data_id = str_c(country, values),
country = if_else(country == 'DE', 'Germany', country)
)
# add caption to match Tom's
caption_text <- "<span style='color:#232323;'>0 = extremely bad, 10 = extremely good</span><br><span style='color:#939291; font-weight: normal;'>Chart: Tom Calver | The Times and The Sunday Times â€¢ Source: ESS/K. Kardous</span>"
p <-
all_series |> distinct() |>
ggplot(
aes(x = year,
y = value,
group = data_id,
color = country)
) +
scale_color_manual(
values = c(
'NO' = "#d43b45",
'DE' = '#DCA825',
'ES' = '#b01622',
'FR' = '#487caa',
'GB' = '#264250',
'IE' = '#61A861',
'PT' = '#d27e4e')
) +
scale_y_continuous(
breaks = seq(0, 7, 1), limits = c(0, 8)
) +
scale_x_continuous(
breaks = seq(2002, 2022, 2),
limits = c(2002, 2025),
expand = c(0, 0.1)
) +
theme(
legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
geom_smooth_interactive(
data = all_series,
aes(x = year, y = value, data_id = paste0(country, country_name)),
method = "loess",
se = FALSE,
linewidth = 3.5, # thick line acts as the 'border'
alpha = 1,
show.legend = FALSE,
color = "white"
) +
# colored interactive smooth line
geom_smooth_interactive(
data = all_series |> filter(!country %in% 'IE'),
aes(data_id = paste0(country, country_name)),
method = "loess",
se = FALSE,
linewidth = 0.9,
fill = NA,
show.legend = FALSE
) +
geom_smooth_interactive(
data = all_series |> filter(country %in% 'IE'),
aes(data_id = paste0(country, country_name)),
method = "loess",
se = FALSE,
linewidth = 0.9,
fill = NA,
show.legend = FALSE
) +
scale_y_continuous(
breaks = seq(0, 7, 1), limits = c(0, 8)
) +
scale_x_continuous(
breaks = seq(2002, 2022, 2),
limits = c(2002, 2025),
expand = c(0, 0.1)
) +
labs(
x = NULL,
y = NULL,
caption = caption_text
) +
# final touchoups before interactive rendering thru girafe()
theme(
panel.spacing = unit(20, 'cm'),
plot.margin = margin(l = 5, b = 10), # leave some space/margin at the bottom for caption 'room to breathe'
axis.text = element_text(face = "bold"), # axis tick labels
strip.text = element_text(face = "bold"), # facet labels
panel.grid.major.x = element_blank(),
axis.text.x = element_text(margin = margin(b = 10, t = -10)),
panel.grid.major.y = element_line(color = "gray90"),
axis.ticks.x = element_blank(),
plot.caption = element_markdown(
family = "Roboto",
face = 'bold'
)
)
p_interactive <- p +
geom_point_interactive(
data = visible_points,
aes(
x = year,
y = value,
color = country,
data_id = paste0(country, country_name)
),
alpha = 0.1, fill = 'white', show.legend = FALSE
) +
geom_point_interactive(
data =
all_series |>
mutate(
point_size = if_else(country %in% c('NO', 'Norway', 'PT', 'Portugal'), 3, 1.5),
point_stroke = point_size
),
aes(
x = year,
y = value,
data_id = paste0(country, country_name),
tooltip = paste0(
"<div style='text-align:",
if_else(year <= 2015.250, "left", "right"),
"; line-height: 1.1;'>", # tightens spacing
"<div style='font-weight:bold; font-size:16px; color:",
if_else(country_name == "Germany", "#9b6e00", eval(color_map)),
";'>",
eval(tooltip_map),
"</div>",
"<div style='font-size:16px;'>", round(year, 0), "</div>",
"<div style='font-size:16px;'>", round(value, 2), "</div>",
"</div>"
)
),
color = 'white',
fill = 'white',
shape = 21,
alpha = 0
) +
geom_rect(
inherit.aes = FALSE,
aes(xmin = 2024, xmax = Inf, ymin = -Inf, ymax = Inf),
color = NA,
fill = "white"
) +
scale_color_manual(
breaks = c("GB", "FR", "IE", "PT", "ES", "NO", 'DE', 'Germany'), # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color
values = c("#264250", "#487caa", "#61A861", "#d27e4e", "#b01622", "#d43b45", '#DCA825', '#9b6e00') # this makes sure Germany as a country label gets dark yellow while 'DE' as a curve gets a darker yellow color
) +
# scale_color_identity() +  # correctly apply the country color to the label's font
# coord_cartesian(xlim = c(2002, 2024.5)) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
) +
# add persistent white circle that follows mouse (via selection); one to cover all data points is simply assigning data to country.year combo
geom_point_interactive(
data = all_series,
aes(
x = year,
y = value,
group = paste0(year, country_name)
),
shape = 21,
size = 0.4,
stroke = 1,
fill = 'white',
color = "grey85",
alpha = 0,
show.legend = FALSE
)
#|echo: false
#|message: false
#|warning: false
p_ggraph_ready <-
p_interactive +
theme_minimal() +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = 'none'
) +
labs(
caption = caption_text
) +
theme(
plot.caption = element_markdown(
lineheight = 1.2,
hjust = -0.01,
margin = margin(t = 10, l = -7, r = 1),
halign = 0
),
axis.text.x = element_text(margin = margin(t = -7, l = 3, b = 7, r = -3))
) +
geom_segment(
aes(x = 2002, xend = 2023, y = 0, yend = 0),
color = 'black',
linewidth = .1
) +
geom_label_interactive(
data =
all_series |>
bind_rows(
all_series |>
slice_max(year) |>
arrange(desc(value)) |>
mutate(
country_name = str_sub(data_id, 3, 20),
year = 2024,
value = c(c(7, 5.8), c(5.7, 5.4, 5.1, 4.8, 4.5) - .3)
)
)
|>
slice_max(year) |>
mutate(year = 2023.4),
aes(
x = year,
y = value,
group = paste0(country, country_name),
label =  c("Norway", "Spain", "France", "Germany", "UK", "Ireland", "Portugal"),
data_id = paste0(country, country_name)
),
label.size = NA,
fill = NA,
color = c("#d43b45", "#b01622", "#487caa", "#9b6e00", "#264250", "#61A861", "#d27e4e"),
size = 3.3,
hjust = 0,
vjust = -.2,
# fontface = 'bold',
inherit.aes = FALSE,
alpha = 1
)
girafe(
ggobj = p_ggraph_ready,
options = list(
opts_tooltip(
css = "
background: transparent;
border: none;
box-shadow: none;
font-family: sans-serif;
text-shadow:
0 0 4px rgba(234, 255, 255, 1),
0 0 4px rgba(234, 255, 255, 1),
0 0 4px rgba(255, 255, 255, 1);
line-shadow:
0 0 4px rgba(234, 255, 255, 1),
0 0 4px rgba(234, 255, 255, 1),
0 0 4px rgba(255, 255, 255, 1);
border-radius: none;
transform: translate(-50%, 20px);
transition: all 0.2s ease-in-out;",
delay_mouseover = 300,
delay_mouseout = 200
),
opts_hover(
css = "stroke-width: 3; stroke-opacity: 0.9; fill-opacity: 0.9; opacity: 1;",
nearest_distance = 30,
reactive = FALSE
),
opts_hover_inv(
css = "stroke-width: .2; stroke-opacity: 0.2; fill-opacity: 0.2; opacity: 0.4;"
)
)
)
#|echo: false
#|message: false
#|warning: false
#|include: false
tryCatch({
sysfonts::font_add(family = "roboto-regular", regular = "~/Library/Fonts/Roboto-Regular.ttf")
sysfonts::font_add(family = "roboto-bold", regular = "~/Library/Fonts/Roboto-Bold.ttf")
sysfonts::font_add(family = "roboto-condensed", regular = "~/Library/Fonts/Roboto_Condensed-Regular.ttf")
sysfonts::font_add(family = "roboto-condensed-bold", regular = "~/Library/Fonts/Roboto_Condensed-Bold.ttf")
}, error = function(e) {
message("Fonts not available locally: ", e$message)
})
# used for most things within ggplot so we can assign them as default themes set
theme_set(
theme_minimal() +
theme(
text = element_text(family = "roboto-regular", size = 11),
plot.title = element_text(family = "roboto-bold", size = 16),
plot.subtitle = element_text(family = "roboto-regular", size = 12),
axis.text = element_text(family = "roboto-regular", size = 10),
axis.title = element_text(family = "roboto-condensed", size = 11)
)
)
showtext::showtext_auto(enable = TRUE)
data <-
value_for_money |>
drop_na(country) |>
filter(
!country %in% c('Norway', 'Australia')
) |>
mutate(
last_year = year == 2023,
country_tooltip = paste(country, year, sep = ', ')
) |>
arrange(country, year) |>
mutate(
country_fill = case_when(
str_detect(country_tooltip, "US") ~ "US",
str_detect(country_tooltip, "France") ~ "France",
str_detect(country_tooltip, "Italy") ~ "Italy",
str_detect(country_tooltip, "Germany") ~ "Germany",
str_detect(country_tooltip, "Canada") ~ "Canada",
str_detect(country_tooltip, "Japan") ~ "Japan",
str_detect(country_tooltip, "UK") ~ "UK",
TRUE ~ country_tooltip
),
country = factor(country, levels = c("Canada", "France", "Germany", "Japan", "Italy", "UK", "US"))
)
p2 <- data |>
ggplot(aes(x = spend, y = le, color = last_year, fill = country_fill, group = country_fill)) +
geom_point_interactive(
aes(size = size, data_id = country_fill, tooltip = country_tooltip),
shape = 21, alpha = 1
) +
geom_text_interactive(
data = data |> slice_max(year) |> distinct(country_fill, .keep_all = TRUE),
aes(
text = country_fill,
label = country_fill,
data_id = country_fill,
tooltip = country_tooltip
),
hjust = -0.3, vjust = 0, alpha = 1
) +
scale_fill_manual(
breaks = c("US", "France", "Italy", "Germany", "Canada", "Japan", "UK"),
values = c("#4076A4", "#80B1E2", "#61A961", "#F5C55E", "#FFAEA9", "#DACFC0", "#E94F55")
) +
scale_color_manual(
breaks = c(FALSE, TRUE),
values = c('white', 'black')
) +
theme(
plot.title = element_markdown(size = 12, lineheight = 1.2, linewidth = 1.5),
plot.subtitle = element_markdown(size = 12, lineheight = 1.2)
) +
labs(
title = '**Value for money**',
subtitle = "How life expectancy and per-capita healthcare spend have changed since 2000.<br>
<span style='background-color:#e94f55; color:white; padding:2px 4px;'>**UK**</span> spending is rising, but life expectancy has stalled."
) +
labs(x = NULL, y = NULL) +
scale_x_continuous(
breaks = seq(3000, 11000, 1000),
labels = c(format(seq(3000, 10000, 1000), big.mark = ",", trim = TRUE), "$11,000")
) +
coord_cartesian(
xlim = c(2100, 11300),
ylim = c(77, 86),
expand = FALSE,
clip = 'off'
) +
# add caption for p2
labs(
caption = "<span style='color:#232323; font-weight:bold;'>In US Dollars, adjusted for purchasing power and inflation. Excludes 2020-22.</span>  <br>
<span style='color:#989799; font-weight:bold;'>Chart: Tom Calver | The Times and The Sunday Times</span>"
) +
theme(
text = element_text(family = 'Roboto', color = 'black', face = 'bold'),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major = element_line(size = 0.3, color = "grey80"),
axis.line = element_line(color = "black", size = 0.3),
legend.position = 'none',
plot.caption = element_markdown(
size = 10,
hjust = 0,
lineheight = 1.2,
face = 'plain'
)
) +
annotate(
geom = 'rect',
xmin = 2075,
xmax = 2345,
ymax = 86.5,
ymin = 86.15,
fill = '#e94f55'
) +
# we also need to annotate the years 2000 and 2023 with Germany's yellow hex code (to match what Tom has)
# not so much for Germany but for reference in general to the range of years for the plot
# 2000 persistent text geom; for 2023 we use text geom; for 2000, we use label with no borders to bring forward '2000'
annotate(
geom = 'label',
label = '2000',
x = 4250,
y = 77.97,
color = '#F5C55E',
fill = 'white',
label.size = NA,
fontface = "bold"
) +
# 2023 persistent text geom
annotate(
geom = 'text',
label = '2023',
x = 6400,
y = 81.2,
color = '#F5C55E',
fontface = "bold"
) +
# add x and y axes titles (within the plot itself)
# y axis
annotate(
geom = 'text',
label = 'Life expectancy',
x = 2685,
y = 85.8,
color = '#7B7B7B',
fontface = "bold",
fontfamily = 'Roboto',
fontsize = 15
) +
# x axis; i couldn't get the text to right justify for x axis title 'Per Capita\n spend' even after using hjust = 1, so i split that text in two lines and that works/matches Tom's
annotate(
geom = 'text',
label = 'Per-capita',
x = 11200,
y = 77.5,
color = '#7B7B7B',
fontface = "bold",
fontfamily = 'Roboto',
fontsize = 15,
hjust = 1,
vjust = .6
) +
annotate(
geom = 'text',
label = 'spend',
x = 11200,
y = 77.2,
color = '#7B7B7B',
fontface = "bold",
fontfamily = 'Roboto',
fontsize = 15,
hjust = 1,
vjust = .6
)
girafe(
ggobj = p2,
width_svg = 10, height_svg = 6,
options = list(
opts_tooltip(
css = "background: white;
border: 1px solid #ddd;
border-radius: 4px;
padding: 6px;
font-size: 14px;
font-family: Roboto;
font-weight: bold;
color: #232323;
text-align: left;
box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);"
),
opts_hover(
css = "stroke-opacity: 1; fill-opacity: 1; color: #232323; font-size: 12px; alpha: 1;"
),
opts_hover_inv(
css = "fill-opacity: 0.01; stroke-opacity: 0.01; color: transparent; font-size: 0.1px;"
)
)
)
